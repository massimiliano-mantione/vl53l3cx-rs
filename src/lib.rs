mod test_structs_layout;

const VL53LX_SOFT_RESET: u32 = 0;
const VL53LX_I2C_SLAVE__DEVICE_ADDRESS: u32 = 1;
const VL53LX_ANA_CONFIG__VHV_REF_SEL_VDDPIX: u32 = 2;
const VL53LX_ANA_CONFIG__VHV_REF_SEL_VQUENCH: u32 = 3;
const VL53LX_ANA_CONFIG__REG_AVDD1V2_SEL: u32 = 4;
const VL53LX_ANA_CONFIG__FAST_OSC__TRIM: u32 = 5;
const VL53LX_OSC_MEASURED__FAST_OSC__FREQUENCY: u32 = 6;
const VL53LX_OSC_MEASURED__FAST_OSC__FREQUENCY_HI: u32 = 6;
const VL53LX_OSC_MEASURED__FAST_OSC__FREQUENCY_LO: u32 = 7;
const VL53LX_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND: u32 = 8;
const VL53LX_VHV_CONFIG__COUNT_THRESH: u32 = 9;
const VL53LX_VHV_CONFIG__OFFSET: u32 = 10;
const VL53LX_VHV_CONFIG__INIT: u32 = 11;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0: u32 = 13;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_1: u32 = 14;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_2: u32 = 15;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_3: u32 = 16;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_4: u32 = 17;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_5: u32 = 18;
const VL53LX_GLOBAL_CONFIG__REF_EN_START_SELECT: u32 = 19;
const VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS: u32 = 20;
const VL53LX_REF_SPAD_MAN__REF_LOCATION: u32 = 21;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS: u32 = 22;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS_HI: u32 = 22;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS_LO: u32 = 23;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS: u32 = 24;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS_HI: u32 = 24;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS_LO: u32 = 25;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS: u32 = 26;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS_HI: u32 = 26;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS_LO: u32 = 27;
const VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS: u32 = 28;
const VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS_HI: u32 = 28;
const VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS_LO: u32 = 29;
const VL53LX_ALGO__PART_TO_PART_RANGE_OFFSET_MM: u32 = 30;
const VL53LX_ALGO__PART_TO_PART_RANGE_OFFSET_MM_HI: u32 = 30;
const VL53LX_ALGO__PART_TO_PART_RANGE_OFFSET_MM_LO: u32 = 31;
const VL53LX_MM_CONFIG__INNER_OFFSET_MM: u32 = 32;
const VL53LX_MM_CONFIG__INNER_OFFSET_MM_HI: u32 = 32;
const VL53LX_MM_CONFIG__INNER_OFFSET_MM_LO: u32 = 33;
const VL53LX_MM_CONFIG__OUTER_OFFSET_MM: u32 = 34;
const VL53LX_MM_CONFIG__OUTER_OFFSET_MM_HI: u32 = 34;
const VL53LX_MM_CONFIG__OUTER_OFFSET_MM_LO: u32 = 35;
const VL53LX_DSS_CONFIG__TARGET_TOTAL_RATE_MCPS: u32 = 36;
const VL53LX_DSS_CONFIG__TARGET_TOTAL_RATE_MCPS_HI: u32 = 36;
const VL53LX_DSS_CONFIG__TARGET_TOTAL_RATE_MCPS_LO: u32 = 37;
const VL53LX_DEBUG__CTRL: u32 = 38;
const VL53LX_TEST_MODE__CTRL: u32 = 39;
const VL53LX_CLK_GATING__CTRL: u32 = 40;
const VL53LX_NVM_BIST__CTRL: u32 = 41;
const VL53LX_NVM_BIST__NUM_NVM_WORDS: u32 = 42;
const VL53LX_NVM_BIST__START_ADDRESS: u32 = 43;
const VL53LX_HOST_IF__STATUS: u32 = 44;
const VL53LX_PAD_I2C_HV__CONFIG: u32 = 45;
const VL53LX_PAD_I2C_HV__EXTSUP_CONFIG: u32 = 46;
const VL53LX_GPIO_HV_PAD__CTRL: u32 = 47;
const VL53LX_GPIO_HV_MUX__CTRL: u32 = 48;
const VL53LX_GPIO__TIO_HV_STATUS: u32 = 49;
const VL53LX_GPIO__FIO_HV_STATUS: u32 = 50;
const VL53LX_ANA_CONFIG__SPAD_SEL_PSWIDTH: u32 = 51;
const VL53LX_ANA_CONFIG__VCSEL_PULSE_WIDTH_OFFSET: u32 = 52;
const VL53LX_ANA_CONFIG__FAST_OSC__CONFIG_CTRL: u32 = 53;
const VL53LX_SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS: u32 = 54;
const VL53LX_SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS: u32 = 55;
const VL53LX_SIGMA_ESTIMATOR__SIGMA_REF_MM: u32 = 56;
const VL53LX_ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM: u32 = 57;
const VL53LX_SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_0: u32 = 58;
const VL53LX_SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_1: u32 = 59;
const VL53LX_ALGO__RANGE_IGNORE_THRESHOLD_MCPS: u32 = 60;
const VL53LX_ALGO__RANGE_IGNORE_THRESHOLD_MCPS_HI: u32 = 60;
const VL53LX_ALGO__RANGE_IGNORE_THRESHOLD_MCPS_LO: u32 = 61;
const VL53LX_ALGO__RANGE_IGNORE_VALID_HEIGHT_MM: u32 = 62;
const VL53LX_ALGO__RANGE_MIN_CLIP: u32 = 63;
const VL53LX_ALGO__CONSISTENCY_CHECK__TOLERANCE: u32 = 64;
const VL53LX_SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_2: u32 = 65;
const VL53LX_SD_CONFIG__RESET_STAGES_MSB: u32 = 66;
const VL53LX_SD_CONFIG__RESET_STAGES_LSB: u32 = 67;
const VL53LX_GPH_CONFIG__STREAM_COUNT_UPDATE_VALUE: u32 = 68;
const VL53LX_GLOBAL_CONFIG__STREAM_DIVIDER: u32 = 69;
const VL53LX_SYSTEM__INTERRUPT_CONFIG_GPIO: u32 = 70;
const VL53LX_CAL_CONFIG__VCSEL_START: u32 = 71;
const VL53LX_CAL_CONFIG__REPEAT_RATE: u32 = 72;
const VL53LX_CAL_CONFIG__REPEAT_RATE_HI: u32 = 72;
const VL53LX_CAL_CONFIG__REPEAT_RATE_LO: u32 = 73;
const VL53LX_GLOBAL_CONFIG__VCSEL_WIDTH: u32 = 74;
const VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP: u32 = 75;
const VL53LX_PHASECAL_CONFIG__TARGET: u32 = 76;
const VL53LX_PHASECAL_CONFIG__OVERRIDE: u32 = 77;
const VL53LX_DSS_CONFIG__ROI_MODE_CONTROL: u32 = 79;
const VL53LX_SYSTEM__THRESH_RATE_HIGH: u32 = 80;
const VL53LX_SYSTEM__THRESH_RATE_HIGH_HI: u32 = 80;
const VL53LX_SYSTEM__THRESH_RATE_HIGH_LO: u32 = 81;
const VL53LX_SYSTEM__THRESH_RATE_LOW: u32 = 82;
const VL53LX_SYSTEM__THRESH_RATE_LOW_HI: u32 = 82;
const VL53LX_SYSTEM__THRESH_RATE_LOW_LO: u32 = 83;
const VL53LX_DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT: u32 = 84;
const VL53LX_DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_HI: u32 = 84;
const VL53LX_DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_LO: u32 = 85;
const VL53LX_DSS_CONFIG__MANUAL_BLOCK_SELECT: u32 = 86;
const VL53LX_DSS_CONFIG__APERTURE_ATTENUATION: u32 = 87;
const VL53LX_DSS_CONFIG__MAX_SPADS_LIMIT: u32 = 88;
const VL53LX_DSS_CONFIG__MIN_SPADS_LIMIT: u32 = 89;
const VL53LX_MM_CONFIG__TIMEOUT_MACROP_A_HI: u32 = 90;
const VL53LX_MM_CONFIG__TIMEOUT_MACROP_A_LO: u32 = 91;
const VL53LX_MM_CONFIG__TIMEOUT_MACROP_B_HI: u32 = 92;
const VL53LX_MM_CONFIG__TIMEOUT_MACROP_B_LO: u32 = 93;
const VL53LX_RANGE_CONFIG__TIMEOUT_MACROP_A_HI: u32 = 94;
const VL53LX_RANGE_CONFIG__TIMEOUT_MACROP_A_LO: u32 = 95;
const VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A: u32 = 96;
const VL53LX_RANGE_CONFIG__TIMEOUT_MACROP_B_HI: u32 = 97;
const VL53LX_RANGE_CONFIG__TIMEOUT_MACROP_B_LO: u32 = 98;
const VL53LX_RANGE_CONFIG__VCSEL_PERIOD_B: u32 = 99;
const VL53LX_RANGE_CONFIG__SIGMA_THRESH: u32 = 100;
const VL53LX_RANGE_CONFIG__SIGMA_THRESH_HI: u32 = 100;
const VL53LX_RANGE_CONFIG__SIGMA_THRESH_LO: u32 = 101;
const VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS: u32 = 102;
const VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_HI: u32 = 102;
const VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_LO: u32 = 103;
const VL53LX_RANGE_CONFIG__VALID_PHASE_LOW: u32 = 104;
const VL53LX_RANGE_CONFIG__VALID_PHASE_HIGH: u32 = 105;
const VL53LX_SYSTEM__INTERMEASUREMENT_PERIOD: u32 = 108;
const VL53LX_SYSTEM__INTERMEASUREMENT_PERIOD_3: u32 = 108;
const VL53LX_SYSTEM__INTERMEASUREMENT_PERIOD_2: u32 = 109;
const VL53LX_SYSTEM__INTERMEASUREMENT_PERIOD_1: u32 = 110;
const VL53LX_SYSTEM__INTERMEASUREMENT_PERIOD_0: u32 = 111;
const VL53LX_SYSTEM__FRACTIONAL_ENABLE: u32 = 112;
const VL53LX_SYSTEM__GROUPED_PARAMETER_HOLD_0: u32 = 113;
const VL53LX_SYSTEM__THRESH_HIGH: u32 = 114;
const VL53LX_SYSTEM__THRESH_HIGH_HI: u32 = 114;
const VL53LX_SYSTEM__THRESH_HIGH_LO: u32 = 115;
const VL53LX_SYSTEM__THRESH_LOW: u32 = 116;
const VL53LX_SYSTEM__THRESH_LOW_HI: u32 = 116;
const VL53LX_SYSTEM__THRESH_LOW_LO: u32 = 117;
const VL53LX_SYSTEM__ENABLE_XTALK_PER_QUADRANT: u32 = 118;
const VL53LX_SYSTEM__SEED_CONFIG: u32 = 119;
const VL53LX_SD_CONFIG__WOI_SD0: u32 = 120;
const VL53LX_SD_CONFIG__WOI_SD1: u32 = 121;
const VL53LX_SD_CONFIG__INITIAL_PHASE_SD0: u32 = 122;
const VL53LX_SD_CONFIG__INITIAL_PHASE_SD1: u32 = 123;
const VL53LX_SYSTEM__GROUPED_PARAMETER_HOLD_1: u32 = 124;
const VL53LX_SD_CONFIG__FIRST_ORDER_SELECT: u32 = 125;
const VL53LX_SD_CONFIG__QUANTIFIER: u32 = 126;
const VL53LX_ROI_CONFIG__USER_ROI_CENTRE_SPAD: u32 = 127;
const VL53LX_ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE: u32 = 128;
const VL53LX_SYSTEM__SEQUENCE_CONFIG: u32 = 129;
const VL53LX_SYSTEM__GROUPED_PARAMETER_HOLD: u32 = 130;
const VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE: u32 = 131;
const VL53LX_SYSTEM__STREAM_COUNT_CTRL: u32 = 132;
const VL53LX_FIRMWARE__ENABLE: u32 = 133;
const VL53LX_SYSTEM__INTERRUPT_CLEAR: u32 = 134;
const VL53LX_SYSTEM__MODE_START: u32 = 135;
const VL53LX_RESULT__INTERRUPT_STATUS: u32 = 136;
const VL53LX_RESULT__RANGE_STATUS: u32 = 137;
const VL53LX_RESULT__REPORT_STATUS: u32 = 138;
const VL53LX_RESULT__STREAM_COUNT: u32 = 139;
const VL53LX_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 140;
const VL53LX_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 140;
const VL53LX_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 141;
const VL53LX_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0: u32 = 142;
const VL53LX_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI: u32 = 142;
const VL53LX_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO: u32 = 143;
const VL53LX_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0: u32 = 144;
const VL53LX_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI: u32 = 144;
const VL53LX_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO: u32 = 145;
const VL53LX_RESULT__SIGMA_SD0: u32 = 146;
const VL53LX_RESULT__SIGMA_SD0_HI: u32 = 146;
const VL53LX_RESULT__SIGMA_SD0_LO: u32 = 147;
const VL53LX_RESULT__PHASE_SD0: u32 = 148;
const VL53LX_RESULT__PHASE_SD0_HI: u32 = 148;
const VL53LX_RESULT__PHASE_SD0_LO: u32 = 149;
const VL53LX_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0: u32 = 150;
const VL53LX_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI: u32 = 150;
const VL53LX_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO: u32 = 151;
const VL53LX_PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0: u32 = 152;
const VL53LX__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI: u32 = 152;
const VL53LX___PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO: u32 = 153;
const VL53LX_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 154;
const VL53LX_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 154;
const VL53LX_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 155;
const VL53LX_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 156;
const VL53LX_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 156;
const VL53LX_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 157;
const VL53LX_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0: u32 = 158;
const VL53LX_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI: u32 = 158;
const VL53LX_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO: u32 = 159;
const VL53LX_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1: u32 = 160;
const VL53LX_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI: u32 = 160;
const VL53LX_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO: u32 = 161;
const VL53LX_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1: u32 = 162;
const VL53LX_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI: u32 = 162;
const VL53LX_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO: u32 = 163;
const VL53LX_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1: u32 = 164;
const VL53LX_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI: u32 = 164;
const VL53LX_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO: u32 = 165;
const VL53LX_RESULT__SIGMA_SD1: u32 = 166;
const VL53LX_RESULT__SIGMA_SD1_HI: u32 = 166;
const VL53LX_RESULT__SIGMA_SD1_LO: u32 = 167;
const VL53LX_RESULT__PHASE_SD1: u32 = 168;
const VL53LX_RESULT__PHASE_SD1_HI: u32 = 168;
const VL53LX_RESULT__PHASE_SD1_LO: u32 = 169;
const VL53LX_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1: u32 = 170;
const VL53LX_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI: u32 = 170;
const VL53LX_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO: u32 = 171;
const VL53LX_RESULT__SPARE_0_SD1: u32 = 172;
const VL53LX_RESULT__SPARE_0_SD1_HI: u32 = 172;
const VL53LX_RESULT__SPARE_0_SD1_LO: u32 = 173;
const VL53LX_RESULT__SPARE_1_SD1: u32 = 174;
const VL53LX_RESULT__SPARE_1_SD1_HI: u32 = 174;
const VL53LX_RESULT__SPARE_1_SD1_LO: u32 = 175;
const VL53LX_RESULT__SPARE_2_SD1: u32 = 176;
const VL53LX_RESULT__SPARE_2_SD1_HI: u32 = 176;
const VL53LX_RESULT__SPARE_2_SD1_LO: u32 = 177;
const VL53LX_RESULT__SPARE_3_SD1: u32 = 178;
const VL53LX_RESULT__THRESH_INFO: u32 = 179;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0: u32 = 180;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3: u32 = 180;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2: u32 = 181;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1: u32 = 182;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0: u32 = 183;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0: u32 = 184;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3: u32 = 184;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2: u32 = 185;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1: u32 = 186;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0: u32 = 187;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0: u32 = 188;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3: u32 = 188;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2: u32 = 189;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1: u32 = 190;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0: u32 = 191;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0: u32 = 192;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3: u32 = 192;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2: u32 = 193;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1: u32 = 194;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0: u32 = 195;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1: u32 = 196;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3: u32 = 196;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2: u32 = 197;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1: u32 = 198;
const VL53LX_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0: u32 = 199;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1: u32 = 200;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3: u32 = 200;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2: u32 = 201;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1: u32 = 202;
const VL53LX_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0: u32 = 203;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1: u32 = 204;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3: u32 = 204;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2: u32 = 205;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1: u32 = 206;
const VL53LX_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0: u32 = 207;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1: u32 = 208;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3: u32 = 208;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2: u32 = 209;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1: u32 = 210;
const VL53LX_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0: u32 = 211;
const VL53LX_RESULT_CORE__SPARE_0: u32 = 212;
const VL53LX_PHASECAL_RESULT__REFERENCE_PHASE: u32 = 214;
const VL53LX_PHASECAL_RESULT__REFERENCE_PHASE_HI: u32 = 214;
const VL53LX_PHASECAL_RESULT__REFERENCE_PHASE_LO: u32 = 215;
const VL53LX_PHASECAL_RESULT__VCSEL_START: u32 = 216;
const VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS: u32 = 217;
const VL53LX_REF_SPAD_CHAR_RESULT__REF_LOCATION: u32 = 218;
const VL53LX_VHV_RESULT__COLDBOOT_STATUS: u32 = 219;
const VL53LX_VHV_RESULT__SEARCH_RESULT: u32 = 220;
const VL53LX_VHV_RESULT__LATEST_SETTING: u32 = 221;
const VL53LX_RESULT__OSC_CALIBRATE_VAL: u32 = 222;
const VL53LX_RESULT__OSC_CALIBRATE_VAL_HI: u32 = 222;
const VL53LX_RESULT__OSC_CALIBRATE_VAL_LO: u32 = 223;
const VL53LX_ANA_CONFIG__POWERDOWN_GO1: u32 = 224;
const VL53LX_ANA_CONFIG__REF_BG_CTRL: u32 = 225;
const VL53LX_ANA_CONFIG__REGDVDD1V2_CTRL: u32 = 226;
const VL53LX_ANA_CONFIG__OSC_SLOW_CTRL: u32 = 227;
const VL53LX_TEST_MODE__STATUS: u32 = 228;
const VL53LX_FIRMWARE__SYSTEM_STATUS: u32 = 229;
const VL53LX_FIRMWARE__MODE_STATUS: u32 = 230;
const VL53LX_FIRMWARE__SECONDARY_MODE_STATUS: u32 = 231;
const VL53LX_FIRMWARE__CAL_REPEAT_RATE_COUNTER: u32 = 232;
const VL53LX_FIRMWARE__CAL_REPEAT_RATE_COUNTER_HI: u32 = 232;
const VL53LX_FIRMWARE__CAL_REPEAT_RATE_COUNTER_LO: u32 = 233;
const VL53LX_FIRMWARE__HISTOGRAM_BIN: u32 = 234;
const VL53LX_GPH__SYSTEM__THRESH_HIGH: u32 = 236;
const VL53LX_GPH__SYSTEM__THRESH_HIGH_HI: u32 = 236;
const VL53LX_GPH__SYSTEM__THRESH_HIGH_LO: u32 = 237;
const VL53LX_GPH__SYSTEM__THRESH_LOW: u32 = 238;
const VL53LX_GPH__SYSTEM__THRESH_LOW_HI: u32 = 238;
const VL53LX_GPH__SYSTEM__THRESH_LOW_LO: u32 = 239;
const VL53LX_GPH__SYSTEM__ENABLE_XTALK_PER_QUADRANT: u32 = 240;
const VL53LX_GPH__SPARE_0: u32 = 241;
const VL53LX_GPH__SD_CONFIG__WOI_SD0: u32 = 242;
const VL53LX_GPH__SD_CONFIG__WOI_SD1: u32 = 243;
const VL53LX_GPH__SD_CONFIG__INITIAL_PHASE_SD0: u32 = 244;
const VL53LX_GPH__SD_CONFIG__INITIAL_PHASE_SD1: u32 = 245;
const VL53LX_GPH__SD_CONFIG__FIRST_ORDER_SELECT: u32 = 246;
const VL53LX_GPH__SD_CONFIG__QUANTIFIER: u32 = 247;
const VL53LX_GPH__ROI_CONFIG__USER_ROI_CENTRE_SPAD: u32 = 248;
const VL53LX_GPH__ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE: u32 = 249;
const VL53LX_GPH__SYSTEM__SEQUENCE_CONFIG: u32 = 250;
const VL53LX_GPH__GPH_ID: u32 = 251;
const VL53LX_SYSTEM__INTERRUPT_SET: u32 = 252;
const VL53LX_INTERRUPT_MANAGER__ENABLES: u32 = 253;
const VL53LX_INTERRUPT_MANAGER__CLEAR: u32 = 254;
const VL53LX_INTERRUPT_MANAGER__STATUS: u32 = 255;
const VL53LX_MCU_TO_HOST_BANK__WR_ACCESS_EN: u32 = 256;
const VL53LX_POWER_MANAGEMENT__GO1_RESET_STATUS: u32 = 257;
const VL53LX_PAD_STARTUP_MODE__VALUE_RO: u32 = 258;
const VL53LX_PAD_STARTUP_MODE__VALUE_CTRL: u32 = 259;
const VL53LX_PLL_PERIOD_US: u32 = 260;
const VL53LX_PLL_PERIOD_US_3: u32 = 260;
const VL53LX_PLL_PERIOD_US_2: u32 = 261;
const VL53LX_PLL_PERIOD_US_1: u32 = 262;
const VL53LX_PLL_PERIOD_US_0: u32 = 263;
const VL53LX_INTERRUPT_SCHEDULER__DATA_OUT: u32 = 264;
const VL53LX_INTERRUPT_SCHEDULER__DATA_OUT_3: u32 = 264;
const VL53LX_INTERRUPT_SCHEDULER__DATA_OUT_2: u32 = 265;
const VL53LX_INTERRUPT_SCHEDULER__DATA_OUT_1: u32 = 266;
const VL53LX_INTERRUPT_SCHEDULER__DATA_OUT_0: u32 = 267;
const VL53LX_NVM_BIST__COMPLETE: u32 = 268;
const VL53LX_NVM_BIST__STATUS: u32 = 269;
const VL53LX_IDENTIFICATION__MODEL_ID: u32 = 271;
const VL53LX_IDENTIFICATION__MODULE_TYPE: u32 = 272;
const VL53LX_IDENTIFICATION__REVISION_ID: u32 = 273;
const VL53LX_IDENTIFICATION__MODULE_ID: u32 = 274;
const VL53LX_IDENTIFICATION__MODULE_ID_HI: u32 = 274;
const VL53LX_IDENTIFICATION__MODULE_ID_LO: u32 = 275;
const VL53LX_ANA_CONFIG__FAST_OSC__TRIM_MAX: u32 = 276;
const VL53LX_ANA_CONFIG__FAST_OSC__FREQ_SET: u32 = 277;
const VL53LX_ANA_CONFIG__VCSEL_TRIM: u32 = 278;
const VL53LX_ANA_CONFIG__VCSEL_SELION: u32 = 279;
const VL53LX_ANA_CONFIG__VCSEL_SELION_MAX: u32 = 280;
const VL53LX_PROTECTED_LASER_SAFETY__LOCK_BIT: u32 = 281;
const VL53LX_LASER_SAFETY__KEY: u32 = 282;
const VL53LX_LASER_SAFETY__KEY_RO: u32 = 283;
const VL53LX_LASER_SAFETY__CLIP: u32 = 284;
const VL53LX_LASER_SAFETY__MULT: u32 = 285;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_0: u32 = 286;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_1: u32 = 287;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_2: u32 = 288;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_3: u32 = 289;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_4: u32 = 290;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_5: u32 = 291;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_6: u32 = 292;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_7: u32 = 293;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_8: u32 = 294;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_9: u32 = 295;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_10: u32 = 296;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_11: u32 = 297;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_12: u32 = 298;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_13: u32 = 299;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_14: u32 = 300;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_15: u32 = 301;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_16: u32 = 302;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_17: u32 = 303;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_18: u32 = 304;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_19: u32 = 305;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_20: u32 = 306;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_21: u32 = 307;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_22: u32 = 308;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_23: u32 = 309;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_24: u32 = 310;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_25: u32 = 311;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_26: u32 = 312;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_27: u32 = 313;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_28: u32 = 314;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_29: u32 = 315;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_30: u32 = 316;
const VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_RTN_31: u32 = 317;
const VL53LX_ROI_CONFIG__MODE_ROI_CENTRE_SPAD: u32 = 318;
const VL53LX_ROI_CONFIG__MODE_ROI_XY_SIZE: u32 = 319;
const VL53LX_GO2_HOST_BANK_ACCESS__OVERRIDE: u32 = 768;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLICAND: u32 = 1024;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLICAND_3: u32 = 1024;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLICAND_2: u32 = 1025;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLICAND_1: u32 = 1026;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLICAND_0: u32 = 1027;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLIER: u32 = 1028;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLIER_3: u32 = 1028;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLIER_2: u32 = 1029;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLIER_1: u32 = 1030;
const VL53LX_MCU_UTIL_MULTIPLIER__MULTIPLIER_0: u32 = 1031;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_HI: u32 = 1032;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_HI_3: u32 = 1032;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_HI_2: u32 = 1033;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_HI_1: u32 = 1034;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_HI_0: u32 = 1035;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_LO: u32 = 1036;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_LO_3: u32 = 1036;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_LO_2: u32 = 1037;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_LO_1: u32 = 1038;
const VL53LX_MCU_UTIL_MULTIPLIER__PRODUCT_LO_0: u32 = 1039;
const VL53LX_MCU_UTIL_MULTIPLIER__START: u32 = 1040;
const VL53LX_MCU_UTIL_MULTIPLIER__STATUS: u32 = 1041;
const VL53LX_MCU_UTIL_DIVIDER__START: u32 = 1042;
const VL53LX_MCU_UTIL_DIVIDER__STATUS: u32 = 1043;
const VL53LX_MCU_UTIL_DIVIDER__DIVIDEND: u32 = 1044;
const VL53LX_MCU_UTIL_DIVIDER__DIVIDEND_3: u32 = 1044;
const VL53LX_MCU_UTIL_DIVIDER__DIVIDEND_2: u32 = 1045;
const VL53LX_MCU_UTIL_DIVIDER__DIVIDEND_1: u32 = 1046;
const VL53LX_MCU_UTIL_DIVIDER__DIVIDEND_0: u32 = 1047;
const VL53LX_MCU_UTIL_DIVIDER__DIVISOR: u32 = 1048;
const VL53LX_MCU_UTIL_DIVIDER__DIVISOR_3: u32 = 1048;
const VL53LX_MCU_UTIL_DIVIDER__DIVISOR_2: u32 = 1049;
const VL53LX_MCU_UTIL_DIVIDER__DIVISOR_1: u32 = 1050;
const VL53LX_MCU_UTIL_DIVIDER__DIVISOR_0: u32 = 1051;
const VL53LX_MCU_UTIL_DIVIDER__QUOTIENT: u32 = 1052;
const VL53LX_MCU_UTIL_DIVIDER__QUOTIENT_3: u32 = 1052;
const VL53LX_MCU_UTIL_DIVIDER__QUOTIENT_2: u32 = 1053;
const VL53LX_MCU_UTIL_DIVIDER__QUOTIENT_1: u32 = 1054;
const VL53LX_MCU_UTIL_DIVIDER__QUOTIENT_0: u32 = 1055;
const VL53LX_TIMER0__VALUE_IN: u32 = 1056;
const VL53LX_TIMER0__VALUE_IN_3: u32 = 1056;
const VL53LX_TIMER0__VALUE_IN_2: u32 = 1057;
const VL53LX_TIMER0__VALUE_IN_1: u32 = 1058;
const VL53LX_TIMER0__VALUE_IN_0: u32 = 1059;
const VL53LX_TIMER1__VALUE_IN: u32 = 1060;
const VL53LX_TIMER1__VALUE_IN_3: u32 = 1060;
const VL53LX_TIMER1__VALUE_IN_2: u32 = 1061;
const VL53LX_TIMER1__VALUE_IN_1: u32 = 1062;
const VL53LX_TIMER1__VALUE_IN_0: u32 = 1063;
const VL53LX_TIMER0__CTRL: u32 = 1064;
const VL53LX_TIMER1__CTRL: u32 = 1065;
const VL53LX_MCU_GENERAL_PURPOSE__GP_0: u32 = 1068;
const VL53LX_MCU_GENERAL_PURPOSE__GP_1: u32 = 1069;
const VL53LX_MCU_GENERAL_PURPOSE__GP_2: u32 = 1070;
const VL53LX_MCU_GENERAL_PURPOSE__GP_3: u32 = 1071;
const VL53LX_MCU_RANGE_CALC__CONFIG: u32 = 1072;
const VL53LX_MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE: u32 = 1074;
const VL53LX_MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE_HI: u32 = 1074;
const VL53LX_MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE_LO: u32 = 1075;
const VL53LX_MCU_RANGE_CALC__SPARE_4: u32 = 1076;
const VL53LX_MCU_RANGE_CALC__SPARE_4_3: u32 = 1076;
const VL53LX_MCU_RANGE_CALC__SPARE_4_2: u32 = 1077;
const VL53LX_MCU_RANGE_CALC__SPARE_4_1: u32 = 1078;
const VL53LX_MCU_RANGE_CALC__SPARE_4_0: u32 = 1079;
const VL53LX_MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC: u32 = 1080;
const VL53LX_MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC_HI: u32 = 1080;
const VL53LX_MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC_LO: u32 = 1081;
const VL53LX_MCU_RANGE_CALC__ALGO_VCSEL_PERIOD: u32 = 1084;
const VL53LX_MCU_RANGE_CALC__SPARE_5: u32 = 1085;
const VL53LX_MCU_RANGE_CALC__ALGO_TOTAL_PERIODS: u32 = 1086;
const VL53LX_MCU_RANGE_CALC__ALGO_TOTAL_PERIODS_HI: u32 = 1086;
const VL53LX_MCU_RANGE_CALC__ALGO_TOTAL_PERIODS_LO: u32 = 1087;
const VL53LX_MCU_RANGE_CALC__ALGO_ACCUM_PHASE: u32 = 1088;
const VL53LX_MCU_RANGE_CALC__ALGO_ACCUM_PHASE_3: u32 = 1088;
const VL53LX_MCU_RANGE_CALC__ALGO_ACCUM_PHASE_2: u32 = 1089;
const VL53LX_MCU_RANGE_CALC__ALGO_ACCUM_PHASE_1: u32 = 1090;
const VL53LX_MCU_RANGE_CALC__ALGO_ACCUM_PHASE_0: u32 = 1091;
const VL53LX_MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS: u32 = 1092;
const VL53LX_MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_3: u32 = 1092;
const VL53LX_MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_2: u32 = 1093;
const VL53LX_MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_1: u32 = 1094;
const VL53LX_MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_0: u32 = 1095;
const VL53LX_MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS: u32 = 1096;
const VL53LX_MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_3: u32 = 1096;
const VL53LX_MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_2: u32 = 1097;
const VL53LX_MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_1: u32 = 1098;
const VL53LX_MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_0: u32 = 1099;
const VL53LX_MCU_RANGE_CALC__SPARE_6: u32 = 1100;
const VL53LX_MCU_RANGE_CALC__SPARE_6_HI: u32 = 1100;
const VL53LX_MCU_RANGE_CALC__SPARE_6_LO: u32 = 1101;
const VL53LX_MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD: u32 = 1102;
const VL53LX_MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD_HI: u32 = 1102;
const VL53LX_MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD_LO: u32 = 1103;
const VL53LX_MCU_RANGE_CALC__NUM_SPADS: u32 = 1104;
const VL53LX_MCU_RANGE_CALC__NUM_SPADS_HI: u32 = 1104;
const VL53LX_MCU_RANGE_CALC__NUM_SPADS_LO: u32 = 1105;
const VL53LX_MCU_RANGE_CALC__PHASE_OUTPUT: u32 = 1106;
const VL53LX_MCU_RANGE_CALC__PHASE_OUTPUT_HI: u32 = 1106;
const VL53LX_MCU_RANGE_CALC__PHASE_OUTPUT_LO: u32 = 1107;
const VL53LX_MCU_RANGE_CALC__RATE_PER_SPAD_MCPS: u32 = 1108;
const VL53LX_MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_3: u32 = 1108;
const VL53LX_MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_2: u32 = 1109;
const VL53LX_MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_1: u32 = 1110;
const VL53LX_MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_0: u32 = 1111;
const VL53LX_MCU_RANGE_CALC__SPARE_7: u32 = 1112;
const VL53LX_MCU_RANGE_CALC__SPARE_8: u32 = 1113;
const VL53LX_MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS: u32 = 1114;
const VL53LX_MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS_HI: u32 = 1114;
const VL53LX_MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS_LO: u32 = 1115;
const VL53LX_MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS: u32 = 1116;
const VL53LX_MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS_HI: u32 = 1116;
const VL53LX_MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS_LO: u32 = 1117;
const VL53LX_MCU_RANGE_CALC__AMBIENT_RATE_MCPS: u32 = 1118;
const VL53LX_MCU_RANGE_CALC__AMBIENT_RATE_MCPS_HI: u32 = 1118;
const VL53LX_MCU_RANGE_CALC__AMBIENT_RATE_MCPS_LO: u32 = 1119;
const VL53LX_MCU_RANGE_CALC__XTALK: u32 = 1120;
const VL53LX_MCU_RANGE_CALC__XTALK_HI: u32 = 1120;
const VL53LX_MCU_RANGE_CALC__XTALK_LO: u32 = 1121;
const VL53LX_MCU_RANGE_CALC__CALC_STATUS: u32 = 1122;
const VL53LX_MCU_RANGE_CALC__DEBUG: u32 = 1123;
const VL53LX_MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS: u32 = 1124;
const VL53LX_MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS_HI: u32 = 1124;
const VL53LX_MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS_LO: u32 = 1125;
const VL53LX_MCU_RANGE_CALC__SPARE_0: u32 = 1128;
const VL53LX_MCU_RANGE_CALC__SPARE_1: u32 = 1129;
const VL53LX_MCU_RANGE_CALC__SPARE_2: u32 = 1130;
const VL53LX_MCU_RANGE_CALC__SPARE_3: u32 = 1131;
const VL53LX_PATCH__CTRL: u32 = 1136;
const VL53LX_PATCH__JMP_ENABLES: u32 = 1138;
const VL53LX_PATCH__JMP_ENABLES_HI: u32 = 1138;
const VL53LX_PATCH__JMP_ENABLES_LO: u32 = 1139;
const VL53LX_PATCH__DATA_ENABLES: u32 = 1140;
const VL53LX_PATCH__DATA_ENABLES_HI: u32 = 1140;
const VL53LX_PATCH__DATA_ENABLES_LO: u32 = 1141;
const VL53LX_PATCH__OFFSET_0: u32 = 1142;
const VL53LX_PATCH__OFFSET_0_HI: u32 = 1142;
const VL53LX_PATCH__OFFSET_0_LO: u32 = 1143;
const VL53LX_PATCH__OFFSET_1: u32 = 1144;
const VL53LX_PATCH__OFFSET_1_HI: u32 = 1144;
const VL53LX_PATCH__OFFSET_1_LO: u32 = 1145;
const VL53LX_PATCH__OFFSET_2: u32 = 1146;
const VL53LX_PATCH__OFFSET_2_HI: u32 = 1146;
const VL53LX_PATCH__OFFSET_2_LO: u32 = 1147;
const VL53LX_PATCH__OFFSET_3: u32 = 1148;
const VL53LX_PATCH__OFFSET_3_HI: u32 = 1148;
const VL53LX_PATCH__OFFSET_3_LO: u32 = 1149;
const VL53LX_PATCH__OFFSET_4: u32 = 1150;
const VL53LX_PATCH__OFFSET_4_HI: u32 = 1150;
const VL53LX_PATCH__OFFSET_4_LO: u32 = 1151;
const VL53LX_PATCH__OFFSET_5: u32 = 1152;
const VL53LX_PATCH__OFFSET_5_HI: u32 = 1152;
const VL53LX_PATCH__OFFSET_5_LO: u32 = 1153;
const VL53LX_PATCH__OFFSET_6: u32 = 1154;
const VL53LX_PATCH__OFFSET_6_HI: u32 = 1154;
const VL53LX_PATCH__OFFSET_6_LO: u32 = 1155;
const VL53LX_PATCH__OFFSET_7: u32 = 1156;
const VL53LX_PATCH__OFFSET_7_HI: u32 = 1156;
const VL53LX_PATCH__OFFSET_7_LO: u32 = 1157;
const VL53LX_PATCH__OFFSET_8: u32 = 1158;
const VL53LX_PATCH__OFFSET_8_HI: u32 = 1158;
const VL53LX_PATCH__OFFSET_8_LO: u32 = 1159;
const VL53LX_PATCH__OFFSET_9: u32 = 1160;
const VL53LX_PATCH__OFFSET_9_HI: u32 = 1160;
const VL53LX_PATCH__OFFSET_9_LO: u32 = 1161;
const VL53LX_PATCH__OFFSET_10: u32 = 1162;
const VL53LX_PATCH__OFFSET_10_HI: u32 = 1162;
const VL53LX_PATCH__OFFSET_10_LO: u32 = 1163;
const VL53LX_PATCH__OFFSET_11: u32 = 1164;
const VL53LX_PATCH__OFFSET_11_HI: u32 = 1164;
const VL53LX_PATCH__OFFSET_11_LO: u32 = 1165;
const VL53LX_PATCH__OFFSET_12: u32 = 1166;
const VL53LX_PATCH__OFFSET_12_HI: u32 = 1166;
const VL53LX_PATCH__OFFSET_12_LO: u32 = 1167;
const VL53LX_PATCH__OFFSET_13: u32 = 1168;
const VL53LX_PATCH__OFFSET_13_HI: u32 = 1168;
const VL53LX_PATCH__OFFSET_13_LO: u32 = 1169;
const VL53LX_PATCH__OFFSET_14: u32 = 1170;
const VL53LX_PATCH__OFFSET_14_HI: u32 = 1170;
const VL53LX_PATCH__OFFSET_14_LO: u32 = 1171;
const VL53LX_PATCH__OFFSET_15: u32 = 1172;
const VL53LX_PATCH__OFFSET_15_HI: u32 = 1172;
const VL53LX_PATCH__OFFSET_15_LO: u32 = 1173;
const VL53LX_PATCH__ADDRESS_0: u32 = 1174;
const VL53LX_PATCH__ADDRESS_0_HI: u32 = 1174;
const VL53LX_PATCH__ADDRESS_0_LO: u32 = 1175;
const VL53LX_PATCH__ADDRESS_1: u32 = 1176;
const VL53LX_PATCH__ADDRESS_1_HI: u32 = 1176;
const VL53LX_PATCH__ADDRESS_1_LO: u32 = 1177;
const VL53LX_PATCH__ADDRESS_2: u32 = 1178;
const VL53LX_PATCH__ADDRESS_2_HI: u32 = 1178;
const VL53LX_PATCH__ADDRESS_2_LO: u32 = 1179;
const VL53LX_PATCH__ADDRESS_3: u32 = 1180;
const VL53LX_PATCH__ADDRESS_3_HI: u32 = 1180;
const VL53LX_PATCH__ADDRESS_3_LO: u32 = 1181;
const VL53LX_PATCH__ADDRESS_4: u32 = 1182;
const VL53LX_PATCH__ADDRESS_4_HI: u32 = 1182;
const VL53LX_PATCH__ADDRESS_4_LO: u32 = 1183;
const VL53LX_PATCH__ADDRESS_5: u32 = 1184;
const VL53LX_PATCH__ADDRESS_5_HI: u32 = 1184;
const VL53LX_PATCH__ADDRESS_5_LO: u32 = 1185;
const VL53LX_PATCH__ADDRESS_6: u32 = 1186;
const VL53LX_PATCH__ADDRESS_6_HI: u32 = 1186;
const VL53LX_PATCH__ADDRESS_6_LO: u32 = 1187;
const VL53LX_PATCH__ADDRESS_7: u32 = 1188;
const VL53LX_PATCH__ADDRESS_7_HI: u32 = 1188;
const VL53LX_PATCH__ADDRESS_7_LO: u32 = 1189;
const VL53LX_PATCH__ADDRESS_8: u32 = 1190;
const VL53LX_PATCH__ADDRESS_8_HI: u32 = 1190;
const VL53LX_PATCH__ADDRESS_8_LO: u32 = 1191;
const VL53LX_PATCH__ADDRESS_9: u32 = 1192;
const VL53LX_PATCH__ADDRESS_9_HI: u32 = 1192;
const VL53LX_PATCH__ADDRESS_9_LO: u32 = 1193;
const VL53LX_PATCH__ADDRESS_10: u32 = 1194;
const VL53LX_PATCH__ADDRESS_10_HI: u32 = 1194;
const VL53LX_PATCH__ADDRESS_10_LO: u32 = 1195;
const VL53LX_PATCH__ADDRESS_11: u32 = 1196;
const VL53LX_PATCH__ADDRESS_11_HI: u32 = 1196;
const VL53LX_PATCH__ADDRESS_11_LO: u32 = 1197;
const VL53LX_PATCH__ADDRESS_12: u32 = 1198;
const VL53LX_PATCH__ADDRESS_12_HI: u32 = 1198;
const VL53LX_PATCH__ADDRESS_12_LO: u32 = 1199;
const VL53LX_PATCH__ADDRESS_13: u32 = 1200;
const VL53LX_PATCH__ADDRESS_13_HI: u32 = 1200;
const VL53LX_PATCH__ADDRESS_13_LO: u32 = 1201;
const VL53LX_PATCH__ADDRESS_14: u32 = 1202;
const VL53LX_PATCH__ADDRESS_14_HI: u32 = 1202;
const VL53LX_PATCH__ADDRESS_14_LO: u32 = 1203;
const VL53LX_PATCH__ADDRESS_15: u32 = 1204;
const VL53LX_PATCH__ADDRESS_15_HI: u32 = 1204;
const VL53LX_PATCH__ADDRESS_15_LO: u32 = 1205;
const VL53LX_SPI_ASYNC_MUX__CTRL: u32 = 1216;
const VL53LX_CLK__CONFIG: u32 = 1220;
const VL53LX_GPIO_LV_MUX__CTRL: u32 = 1228;
const VL53LX_GPIO_LV_PAD__CTRL: u32 = 1229;
const VL53LX_PAD_I2C_LV__CONFIG: u32 = 1232;
const VL53LX_PAD_STARTUP_MODE__VALUE_RO_GO1: u32 = 1236;
const VL53LX_HOST_IF__STATUS_GO1: u32 = 1237;
const VL53LX_MCU_CLK_GATING__CTRL: u32 = 1240;
const VL53LX_TEST__BIST_ROM_CTRL: u32 = 1248;
const VL53LX_TEST__BIST_ROM_RESULT: u32 = 1249;
const VL53LX_TEST__BIST_ROM_MCU_SIG: u32 = 1250;
const VL53LX_TEST__BIST_ROM_MCU_SIG_HI: u32 = 1250;
const VL53LX_TEST__BIST_ROM_MCU_SIG_LO: u32 = 1251;
const VL53LX_TEST__BIST_RAM_CTRL: u32 = 1252;
const VL53LX_TEST__BIST_RAM_RESULT: u32 = 1253;
const VL53LX_TEST__TMC: u32 = 1256;
const VL53LX_TEST__PLL_BIST_MIN_THRESHOLD: u32 = 1264;
const VL53LX_TEST__PLL_BIST_MIN_THRESHOLD_HI: u32 = 1264;
const VL53LX_TEST__PLL_BIST_MIN_THRESHOLD_LO: u32 = 1265;
const VL53LX_TEST__PLL_BIST_MAX_THRESHOLD: u32 = 1266;
const VL53LX_TEST__PLL_BIST_MAX_THRESHOLD_HI: u32 = 1266;
const VL53LX_TEST__PLL_BIST_MAX_THRESHOLD_LO: u32 = 1267;
const VL53LX_TEST__PLL_BIST_COUNT_OUT: u32 = 1268;
const VL53LX_TEST__PLL_BIST_COUNT_OUT_HI: u32 = 1268;
const VL53LX_TEST__PLL_BIST_COUNT_OUT_LO: u32 = 1269;
const VL53LX_TEST__PLL_BIST_GONOGO: u32 = 1270;
const VL53LX_TEST__PLL_BIST_CTRL: u32 = 1271;
const VL53LX_RANGING_CORE__DEVICE_ID: u32 = 1664;
const VL53LX_RANGING_CORE__REVISION_ID: u32 = 1665;
const VL53LX_RANGING_CORE__CLK_CTRL1: u32 = 1667;
const VL53LX_RANGING_CORE__CLK_CTRL2: u32 = 1668;
const VL53LX_RANGING_CORE__WOI_1: u32 = 1669;
const VL53LX_RANGING_CORE__WOI_REF_1: u32 = 1670;
const VL53LX_RANGING_CORE__START_RANGING: u32 = 1671;
const VL53LX_RANGING_CORE__LOW_LIMIT_1: u32 = 1680;
const VL53LX_RANGING_CORE__HIGH_LIMIT_1: u32 = 1681;
const VL53LX_RANGING_CORE__LOW_LIMIT_REF_1: u32 = 1682;
const VL53LX_RANGING_CORE__HIGH_LIMIT_REF_1: u32 = 1683;
const VL53LX_RANGING_CORE__QUANTIFIER_1_MSB: u32 = 1684;
const VL53LX_RANGING_CORE__QUANTIFIER_1_LSB: u32 = 1685;
const VL53LX_RANGING_CORE__QUANTIFIER_REF_1_MSB: u32 = 1686;
const VL53LX_RANGING_CORE__QUANTIFIER_REF_1_LSB: u32 = 1687;
const VL53LX_RANGING_CORE__AMBIENT_OFFSET_1_MSB: u32 = 1688;
const VL53LX_RANGING_CORE__AMBIENT_OFFSET_1_LSB: u32 = 1689;
const VL53LX_RANGING_CORE__AMBIENT_OFFSET_REF_1_MSB: u32 = 1690;
const VL53LX_RANGING_CORE__AMBIENT_OFFSET_REF_1_LSB: u32 = 1691;
const VL53LX_RANGING_CORE__FILTER_STRENGTH_1: u32 = 1692;
const VL53LX_RANGING_CORE__FILTER_STRENGTH_REF_1: u32 = 1693;
const VL53LX_RANGING_CORE__SIGNAL_EVENT_LIMIT_1_MSB: u32 = 1694;
const VL53LX_RANGING_CORE__SIGNAL_EVENT_LIMIT_1_LSB: u32 = 1695;
const VL53LX_RANGING_CORE__SIGNAL_EVENT_LIMIT_REF_1_MSB: u32 = 1696;
const VL53LX_RANGING_CORE__SIGNAL_EVENT_LIMIT_REF_1_LSB: u32 = 1697;
const VL53LX_RANGING_CORE__TIMEOUT_OVERALL_PERIODS_MSB: u32 = 1700;
const VL53LX_RANGING_CORE__TIMEOUT_OVERALL_PERIODS_LSB: u32 = 1701;
const VL53LX_RANGING_CORE__INVERT_HW: u32 = 1702;
const VL53LX_RANGING_CORE__FORCE_HW: u32 = 1703;
const VL53LX_RANGING_CORE__STATIC_HW_VALUE: u32 = 1704;
const VL53LX_RANGING_CORE__FORCE_CONTINUOUS_AMBIENT: u32 = 1705;
const VL53LX_RANGING_CORE__TEST_PHASE_SELECT_TO_FILTER: u32 = 1706;
const VL53LX_RANGING_CORE__TEST_PHASE_SELECT_TO_TIMING_GEN: u32 = 1707;
const VL53LX_RANGING_CORE__INITIAL_PHASE_VALUE_1: u32 = 1708;
const VL53LX_RANGING_CORE__INITIAL_PHASE_VALUE_REF_1: u32 = 1709;
const VL53LX_RANGING_CORE__FORCE_UP_IN: u32 = 1710;
const VL53LX_RANGING_CORE__FORCE_DN_IN: u32 = 1711;
const VL53LX_RANGING_CORE__STATIC_UP_VALUE_1: u32 = 1712;
const VL53LX_RANGING_CORE__STATIC_UP_VALUE_REF_1: u32 = 1713;
const VL53LX_RANGING_CORE__STATIC_DN_VALUE_1: u32 = 1714;
const VL53LX_RANGING_CORE__STATIC_DN_VALUE_REF_1: u32 = 1715;
const VL53LX_RANGING_CORE__MONITOR_UP_DN: u32 = 1716;
const VL53LX_RANGING_CORE__INVERT_UP_DN: u32 = 1717;
const VL53LX_RANGING_CORE__CPUMP_1: u32 = 1718;
const VL53LX_RANGING_CORE__CPUMP_2: u32 = 1719;
const VL53LX_RANGING_CORE__CPUMP_3: u32 = 1720;
const VL53LX_RANGING_CORE__OSC_1: u32 = 1721;
const VL53LX_RANGING_CORE__PLL_1: u32 = 1723;
const VL53LX_RANGING_CORE__PLL_2: u32 = 1724;
const VL53LX_RANGING_CORE__REFERENCE_1: u32 = 1725;
const VL53LX_RANGING_CORE__REFERENCE_3: u32 = 1727;
const VL53LX_RANGING_CORE__REFERENCE_4: u32 = 1728;
const VL53LX_RANGING_CORE__REFERENCE_5: u32 = 1729;
const VL53LX_RANGING_CORE__REGAVDD1V2: u32 = 1731;
const VL53LX_RANGING_CORE__CALIB_1: u32 = 1732;
const VL53LX_RANGING_CORE__CALIB_2: u32 = 1733;
const VL53LX_RANGING_CORE__CALIB_3: u32 = 1734;
const VL53LX_RANGING_CORE__TST_MUX_SEL1: u32 = 1737;
const VL53LX_RANGING_CORE__TST_MUX_SEL2: u32 = 1738;
const VL53LX_RANGING_CORE__TST_MUX: u32 = 1739;
const VL53LX_RANGING_CORE__GPIO_OUT_TESTMUX: u32 = 1740;
const VL53LX_RANGING_CORE__CUSTOM_FE: u32 = 1741;
const VL53LX_RANGING_CORE__CUSTOM_FE_2: u32 = 1742;
const VL53LX_RANGING_CORE__SPAD_READOUT: u32 = 1743;
const VL53LX_RANGING_CORE__SPAD_READOUT_1: u32 = 1744;
const VL53LX_RANGING_CORE__SPAD_READOUT_2: u32 = 1745;
const VL53LX_RANGING_CORE__SPAD_PS: u32 = 1746;
const VL53LX_RANGING_CORE__LASER_SAFETY_2: u32 = 1748;
const VL53LX_RANGING_CORE__NVM_CTRL__MODE: u32 = 1920;
const VL53LX_RANGING_CORE__NVM_CTRL__PDN: u32 = 1921;
const VL53LX_RANGING_CORE__NVM_CTRL__PROGN: u32 = 1922;
const VL53LX_RANGING_CORE__NVM_CTRL__READN: u32 = 1923;
const VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB: u32 = 1924;
const VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_LSB: u32 = 1925;
const VL53LX_RANGING_CORE__NVM_CTRL__HV_RISE_MSB: u32 = 1926;
const VL53LX_RANGING_CORE__NVM_CTRL__HV_RISE_LSB: u32 = 1927;
const VL53LX_RANGING_CORE__NVM_CTRL__HV_FALL_MSB: u32 = 1928;
const VL53LX_RANGING_CORE__NVM_CTRL__HV_FALL_LSB: u32 = 1929;
const VL53LX_RANGING_CORE__NVM_CTRL__TST: u32 = 1930;
const VL53LX_RANGING_CORE__NVM_CTRL__TESTREAD: u32 = 1931;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAIN_MMM: u32 = 1932;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAIN_LMM: u32 = 1933;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAIN_LLM: u32 = 1934;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAIN_LLL: u32 = 1935;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAOUT_MMM: u32 = 1936;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAOUT_LMM: u32 = 1937;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAOUT_LLM: u32 = 1938;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAOUT_LLL: u32 = 1939;
const VL53LX_RANGING_CORE__NVM_CTRL__ADDR: u32 = 1940;
const VL53LX_RANGING_CORE__NVM_CTRL__DATAOUT_ECC: u32 = 1941;
const VL53LX_RANGING_CORE__RET_SPAD_EN_0: u32 = 1942;
const VL53LX_RANGING_CORE__RET_SPAD_EN_1: u32 = 1943;
const VL53LX_RANGING_CORE__RET_SPAD_EN_2: u32 = 1944;
const VL53LX_RANGING_CORE__RET_SPAD_EN_3: u32 = 1945;
const VL53LX_RANGING_CORE__RET_SPAD_EN_4: u32 = 1946;
const VL53LX_RANGING_CORE__RET_SPAD_EN_5: u32 = 1947;
const VL53LX_RANGING_CORE__RET_SPAD_EN_6: u32 = 1948;
const VL53LX_RANGING_CORE__RET_SPAD_EN_7: u32 = 1949;
const VL53LX_RANGING_CORE__RET_SPAD_EN_8: u32 = 1950;
const VL53LX_RANGING_CORE__RET_SPAD_EN_9: u32 = 1951;
const VL53LX_RANGING_CORE__RET_SPAD_EN_10: u32 = 1952;
const VL53LX_RANGING_CORE__RET_SPAD_EN_11: u32 = 1953;
const VL53LX_RANGING_CORE__RET_SPAD_EN_12: u32 = 1954;
const VL53LX_RANGING_CORE__RET_SPAD_EN_13: u32 = 1955;
const VL53LX_RANGING_CORE__RET_SPAD_EN_14: u32 = 1956;
const VL53LX_RANGING_CORE__RET_SPAD_EN_15: u32 = 1957;
const VL53LX_RANGING_CORE__RET_SPAD_EN_16: u32 = 1958;
const VL53LX_RANGING_CORE__RET_SPAD_EN_17: u32 = 1959;
const VL53LX_RANGING_CORE__SPAD_SHIFT_EN: u32 = 1978;
const VL53LX_RANGING_CORE__SPAD_DISABLE_CTRL: u32 = 1979;
const VL53LX_RANGING_CORE__SPAD_EN_SHIFT_OUT_DEBUG: u32 = 1980;
const VL53LX_RANGING_CORE__SPI_MODE: u32 = 1981;
const VL53LX_RANGING_CORE__GPIO_DIR: u32 = 1982;
const VL53LX_RANGING_CORE__VCSEL_PERIOD: u32 = 2176;
const VL53LX_RANGING_CORE__VCSEL_START: u32 = 2177;
const VL53LX_RANGING_CORE__VCSEL_STOP: u32 = 2178;
const VL53LX_RANGING_CORE__VCSEL_1: u32 = 2181;
const VL53LX_RANGING_CORE__VCSEL_STATUS: u32 = 2189;
const VL53LX_RANGING_CORE__STATUS: u32 = 2432;
const VL53LX_RANGING_CORE__LASER_CONTINUITY_STATE: u32 = 2433;
const VL53LX_RANGING_CORE__RANGE_1_MMM: u32 = 2434;
const VL53LX_RANGING_CORE__RANGE_1_LMM: u32 = 2435;
const VL53LX_RANGING_CORE__RANGE_1_LLM: u32 = 2436;
const VL53LX_RANGING_CORE__RANGE_1_LLL: u32 = 2437;
const VL53LX_RANGING_CORE__RANGE_REF_1_MMM: u32 = 2438;
const VL53LX_RANGING_CORE__RANGE_REF_1_LMM: u32 = 2439;
const VL53LX_RANGING_CORE__RANGE_REF_1_LLM: u32 = 2440;
const VL53LX_RANGING_CORE__RANGE_REF_1_LLL: u32 = 2441;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_MMM: u32 = 2442;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LMM: u32 = 2443;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LLM: u32 = 2444;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LLL: u32 = 2445;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_1_MMM: u32 = 2446;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_1_LMM: u32 = 2447;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_1_LLM: u32 = 2448;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_1_LLL: u32 = 2449;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_MMM: u32 = 2450;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LMM: u32 = 2451;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LLM: u32 = 2452;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LLL: u32 = 2453;
const VL53LX_RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_MM: u32 = 2454;
const VL53LX_RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_LM: u32 = 2455;
const VL53LX_RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_LL: u32 = 2456;
const VL53LX_RANGING_CORE__AMBIENT_MISMATCH_MM: u32 = 2457;
const VL53LX_RANGING_CORE__AMBIENT_MISMATCH_LM: u32 = 2458;
const VL53LX_RANGING_CORE__AMBIENT_MISMATCH_LL: u32 = 2459;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_MMM: u32 = 2460;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LMM: u32 = 2461;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LLM: u32 = 2462;
const VL53LX_RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LLL: u32 = 2463;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_MMM: u32 = 2464;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LMM: u32 = 2465;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LLM: u32 = 2466;
const VL53LX_RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LLL: u32 = 2467;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_MMM: u32 = 2468;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LMM: u32 = 2469;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LLM: u32 = 2470;
const VL53LX_RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LLL: u32 = 2471;
const VL53LX_RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_MM: u32 = 2472;
const VL53LX_RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_LM: u32 = 2473;
const VL53LX_RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_LL: u32 = 2474;
const VL53LX_RANGING_CORE__AMBIENT_MISMATCH_REF_MM: u32 = 2475;
const VL53LX_RANGING_CORE__AMBIENT_MISMATCH_REF_LM: u32 = 2476;
const VL53LX_RANGING_CORE__AMBIENT_MISMATCH_REF_LL: u32 = 2477;
const VL53LX_RANGING_CORE__GPIO_CONFIG__A0: u32 = 2560;
const VL53LX_RANGING_CORE__RESET_CONTROL__A0: u32 = 2561;
const VL53LX_RANGING_CORE__INTR_MANAGER__A0: u32 = 2562;
const VL53LX_RANGING_CORE__POWER_FSM_TIME_OSC__A0: u32 = 2566;
const VL53LX_RANGING_CORE__VCSEL_ATEST__A0: u32 = 2567;
const VL53LX_RANGING_CORE__VCSEL_PERIOD_CLIPPED__A0: u32 = 2568;
const VL53LX_RANGING_CORE__VCSEL_STOP_CLIPPED__A0: u32 = 2569;
const VL53LX_RANGING_CORE__CALIB_2__A0: u32 = 2570;
const VL53LX_RANGING_CORE__STOP_CONDITION__A0: u32 = 2571;
const VL53LX_RANGING_CORE__STATUS_RESET__A0: u32 = 2572;
const VL53LX_RANGING_CORE__READOUT_CFG__A0: u32 = 2573;
const VL53LX_RANGING_CORE__WINDOW_SETTING__A0: u32 = 2574;
const VL53LX_RANGING_CORE__VCSEL_DELAY__A0: u32 = 2586;
const VL53LX_RANGING_CORE__REFERENCE_2__A0: u32 = 2587;
const VL53LX_RANGING_CORE__REGAVDD1V2__A0: u32 = 2589;
const VL53LX_RANGING_CORE__TST_MUX__A0: u32 = 2591;
const VL53LX_RANGING_CORE__CUSTOM_FE_2__A0: u32 = 2592;
const VL53LX_RANGING_CORE__SPAD_READOUT__A0: u32 = 2593;
const VL53LX_RANGING_CORE__CPUMP_1__A0: u32 = 2594;
const VL53LX_RANGING_CORE__SPARE_REGISTER__A0: u32 = 2595;
const VL53LX_RANGING_CORE__VCSEL_CONT_STAGE5_BYPASS__A0: u32 = 2596;
const VL53LX_RANGING_CORE__RET_SPAD_EN_18: u32 = 2597;
const VL53LX_RANGING_CORE__RET_SPAD_EN_19: u32 = 2598;
const VL53LX_RANGING_CORE__RET_SPAD_EN_20: u32 = 2599;
const VL53LX_RANGING_CORE__RET_SPAD_EN_21: u32 = 2600;
const VL53LX_RANGING_CORE__RET_SPAD_EN_22: u32 = 2601;
const VL53LX_RANGING_CORE__RET_SPAD_EN_23: u32 = 2602;
const VL53LX_RANGING_CORE__RET_SPAD_EN_24: u32 = 2603;
const VL53LX_RANGING_CORE__RET_SPAD_EN_25: u32 = 2604;
const VL53LX_RANGING_CORE__RET_SPAD_EN_26: u32 = 2605;
const VL53LX_RANGING_CORE__RET_SPAD_EN_27: u32 = 2606;
const VL53LX_RANGING_CORE__RET_SPAD_EN_28: u32 = 2607;
const VL53LX_RANGING_CORE__RET_SPAD_EN_29: u32 = 2608;
const VL53LX_RANGING_CORE__RET_SPAD_EN_30: u32 = 2609;
const VL53LX_RANGING_CORE__RET_SPAD_EN_31: u32 = 2610;
const VL53LX_RANGING_CORE__REF_SPAD_EN_0__EWOK: u32 = 2611;
const VL53LX_RANGING_CORE__REF_SPAD_EN_1__EWOK: u32 = 2612;
const VL53LX_RANGING_CORE__REF_SPAD_EN_2__EWOK: u32 = 2613;
const VL53LX_RANGING_CORE__REF_SPAD_EN_3__EWOK: u32 = 2614;
const VL53LX_RANGING_CORE__REF_SPAD_EN_4__EWOK: u32 = 2615;
const VL53LX_RANGING_CORE__REF_SPAD_EN_5__EWOK: u32 = 2616;
const VL53LX_RANGING_CORE__REF_EN_START_SELECT: u32 = 2617;
const VL53LX_RANGING_CORE__REGDVDD1V2_ATEST__EWOK: u32 = 2625;
const VL53LX_SOFT_RESET_GO1: u32 = 2816;
const VL53LX_PRIVATE__PATCH_BASE_ADDR_RSLV: u32 = 3584;
const VL53LX_PREV_SHADOW_RESULT__INTERRUPT_STATUS: u32 = 3792;
const VL53LX_PREV_SHADOW_RESULT__RANGE_STATUS: u32 = 3793;
const VL53LX_PREV_SHADOW_RESULT__REPORT_STATUS: u32 = 3794;
const VL53LX_PREV_SHADOW_RESULT__STREAM_COUNT: u32 = 3795;
const VL53LX_PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 3796;
const VL53LX_PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 3796;
const VL53LX_PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 3797;
const VL53LX_PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0: u32 = 3798;
const VL53LX_PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI: u32 = 3798;
const VL53LX_PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO: u32 = 3799;
const VL53LX_PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0: u32 = 3800;
const VL53LX_PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI: u32 = 3800;
const VL53LX_PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO: u32 = 3801;
const VL53LX_PREV_SHADOW_RESULT__SIGMA_SD0: u32 = 3802;
const VL53LX_PREV_SHADOW_RESULT__SIGMA_SD0_HI: u32 = 3802;
const VL53LX_PREV_SHADOW_RESULT__SIGMA_SD0_LO: u32 = 3803;
const VL53LX_PREV_SHADOW_RESULT__PHASE_SD0: u32 = 3804;
const VL53LX_PREV_SHADOW_RESULT__PHASE_SD0_HI: u32 = 3804;
const VL53LX_PREV_SHADOW_RESULT__PHASE_SD0_LO: u32 = 3805;
const VL53LX_PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0: u32 = 3806;
const VL53LX_PREV__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI: u32 = 3806;
const VL53LX_PREV__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO: u32 = 3807;
const VL53LX_PREV__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0: u32 = 3808;
const VL53LX_PPEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI: u32 = 3808;
const VL53LX_PPEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO: u32 = 3809;
const VL53LX_PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 3810;
const VL53LX_PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 3810;
const VL53LX_PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 3811;
const VL53LX_PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 3812;
const VL53LX_PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 3812;
const VL53LX_PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 3813;
const VL53LX_PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0: u32 = 3814;
const VL53LX_PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI: u32 = 3814;
const VL53LX_PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO: u32 = 3815;
const VL53LX_PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1: u32 = 3816;
const VL53LX_PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI: u32 = 3816;
const VL53LX_PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO: u32 = 3817;
const VL53LX_PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1: u32 = 3818;
const VL53LX_PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI: u32 = 3818;
const VL53LX_PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO: u32 = 3819;
const VL53LX_PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1: u32 = 3820;
const VL53LX_PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI: u32 = 3820;
const VL53LX_PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO: u32 = 3821;
const VL53LX_PREV_SHADOW_RESULT__SIGMA_SD1: u32 = 3822;
const VL53LX_PREV_SHADOW_RESULT__SIGMA_SD1_HI: u32 = 3822;
const VL53LX_PREV_SHADOW_RESULT__SIGMA_SD1_LO: u32 = 3823;
const VL53LX_PREV_SHADOW_RESULT__PHASE_SD1: u32 = 3824;
const VL53LX_PREV_SHADOW_RESULT__PHASE_SD1_HI: u32 = 3824;
const VL53LX_PREV_SHADOW_RESULT__PHASE_SD1_LO: u32 = 3825;
const VL53LX_PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1: u32 = 3826;
const VL53LX_PFINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI: u32 = 3826;
const VL53LX_PFINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO: u32 = 3827;
const VL53LX_PREV_SHADOW_RESULT__SPARE_0_SD1: u32 = 3828;
const VL53LX_PREV_SHADOW_RESULT__SPARE_0_SD1_HI: u32 = 3828;
const VL53LX_PREV_SHADOW_RESULT__SPARE_0_SD1_LO: u32 = 3829;
const VL53LX_PREV_SHADOW_RESULT__SPARE_1_SD1: u32 = 3830;
const VL53LX_PREV_SHADOW_RESULT__SPARE_1_SD1_HI: u32 = 3830;
const VL53LX_PREV_SHADOW_RESULT__SPARE_1_SD1_LO: u32 = 3831;
const VL53LX_PREV_SHADOW_RESULT__SPARE_2_SD1: u32 = 3832;
const VL53LX_PREV_SHADOW_RESULT__SPARE_2_SD1_HI: u32 = 3832;
const VL53LX_PREV_SHADOW_RESULT__SPARE_2_SD1_LO: u32 = 3833;
const VL53LX_PREV_SHADOW_RESULT__SPARE_3_SD1: u32 = 3834;
const VL53LX_PREV_SHADOW_RESULT__SPARE_3_SD1_HI: u32 = 3834;
const VL53LX_PREV_SHADOW_RESULT__SPARE_3_SD1_LO: u32 = 3835;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0: u32 = 3836;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3: u32 = 3836;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2: u32 = 3837;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1: u32 = 3838;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0: u32 = 3839;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0: u32 = 3840;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3: u32 = 3840;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2: u32 = 3841;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1: u32 = 3842;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0: u32 = 3843;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0: u32 = 3844;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3: u32 = 3844;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2: u32 = 3845;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1: u32 = 3846;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0: u32 = 3847;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0: u32 = 3848;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3: u32 = 3848;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2: u32 = 3849;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1: u32 = 3850;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0: u32 = 3851;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1: u32 = 3852;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3: u32 = 3852;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2: u32 = 3853;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1: u32 = 3854;
const VL53LX_PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0: u32 = 3855;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1: u32 = 3856;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3: u32 = 3856;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2: u32 = 3857;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1: u32 = 3858;
const VL53LX_PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0: u32 = 3859;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1: u32 = 3860;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3: u32 = 3860;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2: u32 = 3861;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1: u32 = 3862;
const VL53LX_PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0: u32 = 3863;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1: u32 = 3864;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3: u32 = 3864;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2: u32 = 3865;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1: u32 = 3866;
const VL53LX_PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0: u32 = 3867;
const VL53LX_PREV_SHADOW_RESULT_CORE__SPARE_0: u32 = 3868;
const VL53LX_RESULT__DEBUG_STATUS: u32 = 3872;
const VL53LX_RESULT__DEBUG_STAGE: u32 = 3873;
const VL53LX_GPH__SYSTEM__THRESH_RATE_HIGH: u32 = 3876;
const VL53LX_GPH__SYSTEM__THRESH_RATE_HIGH_HI: u32 = 3876;
const VL53LX_GPH__SYSTEM__THRESH_RATE_HIGH_LO: u32 = 3877;
const VL53LX_GPH__SYSTEM__THRESH_RATE_LOW: u32 = 3878;
const VL53LX_GPH__SYSTEM__THRESH_RATE_LOW_HI: u32 = 3878;
const VL53LX_GPH__SYSTEM__THRESH_RATE_LOW_LO: u32 = 3879;
const VL53LX_GPH__SYSTEM__INTERRUPT_CONFIG_GPIO: u32 = 3880;
const VL53LX_GPH__DSS_CONFIG__ROI_MODE_CONTROL: u32 = 3887;
const VL53LX_GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT: u32 = 3888;
const VL53LX_GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_HI: u32 = 3888;
const VL53LX_GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_LO: u32 = 3889;
const VL53LX_GPH__DSS_CONFIG__MANUAL_BLOCK_SELECT: u32 = 3890;
const VL53LX_GPH__DSS_CONFIG__MAX_SPADS_LIMIT: u32 = 3891;
const VL53LX_GPH__DSS_CONFIG__MIN_SPADS_LIMIT: u32 = 3892;
const VL53LX_GPH__MM_CONFIG__TIMEOUT_MACROP_A_HI: u32 = 3894;
const VL53LX_GPH__MM_CONFIG__TIMEOUT_MACROP_A_LO: u32 = 3895;
const VL53LX_GPH__MM_CONFIG__TIMEOUT_MACROP_B_HI: u32 = 3896;
const VL53LX_GPH__MM_CONFIG__TIMEOUT_MACROP_B_LO: u32 = 3897;
const VL53LX_GPH__RANGE_CONFIG__TIMEOUT_MACROP_A_HI: u32 = 3898;
const VL53LX_GPH__RANGE_CONFIG__TIMEOUT_MACROP_A_LO: u32 = 3899;
const VL53LX_GPH__RANGE_CONFIG__VCSEL_PERIOD_A: u32 = 3900;
const VL53LX_GPH__RANGE_CONFIG__VCSEL_PERIOD_B: u32 = 3901;
const VL53LX_GPH__RANGE_CONFIG__TIMEOUT_MACROP_B_HI: u32 = 3902;
const VL53LX_GPH__RANGE_CONFIG__TIMEOUT_MACROP_B_LO: u32 = 3903;
const VL53LX_GPH__RANGE_CONFIG__SIGMA_THRESH: u32 = 3904;
const VL53LX_GPH__RANGE_CONFIG__SIGMA_THRESH_HI: u32 = 3904;
const VL53LX_GPH__RANGE_CONFIG__SIGMA_THRESH_LO: u32 = 3905;
const VL53LX_GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS: u32 = 3906;
const VL53LX_GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_HI: u32 = 3906;
const VL53LX_GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_LO: u32 = 3907;
const VL53LX_GPH__RANGE_CONFIG__VALID_PHASE_LOW: u32 = 3908;
const VL53LX_GPH__RANGE_CONFIG__VALID_PHASE_HIGH: u32 = 3909;
const VL53LX_FIRMWARE__INTERNAL_STREAM_COUNT_DIV: u32 = 3910;
const VL53LX_FIRMWARE__INTERNAL_STREAM_COUNTER_VAL: u32 = 3911;
const VL53LX_DSS_CALC__ROI_CTRL: u32 = 3924;
const VL53LX_DSS_CALC__SPARE_1: u32 = 3925;
const VL53LX_DSS_CALC__SPARE_2: u32 = 3926;
const VL53LX_DSS_CALC__SPARE_3: u32 = 3927;
const VL53LX_DSS_CALC__SPARE_4: u32 = 3928;
const VL53LX_DSS_CALC__SPARE_5: u32 = 3929;
const VL53LX_DSS_CALC__SPARE_6: u32 = 3930;
const VL53LX_DSS_CALC__SPARE_7: u32 = 3931;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_0: u32 = 3932;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_1: u32 = 3933;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_2: u32 = 3934;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_3: u32 = 3935;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_4: u32 = 3936;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_5: u32 = 3937;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_6: u32 = 3938;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_7: u32 = 3939;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_8: u32 = 3940;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_9: u32 = 3941;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_10: u32 = 3942;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_11: u32 = 3943;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_12: u32 = 3944;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_13: u32 = 3945;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_14: u32 = 3946;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_15: u32 = 3947;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_16: u32 = 3948;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_17: u32 = 3949;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_18: u32 = 3950;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_19: u32 = 3951;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_20: u32 = 3952;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_21: u32 = 3953;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_22: u32 = 3954;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_23: u32 = 3955;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_24: u32 = 3956;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_25: u32 = 3957;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_26: u32 = 3958;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_27: u32 = 3959;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_28: u32 = 3960;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_29: u32 = 3961;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_30: u32 = 3962;
const VL53LX_DSS_CALC__USER_ROI_SPAD_EN_31: u32 = 3963;
const VL53LX_DSS_CALC__USER_ROI_0: u32 = 3964;
const VL53LX_DSS_CALC__USER_ROI_1: u32 = 3965;
const VL53LX_DSS_CALC__MODE_ROI_0: u32 = 3966;
const VL53LX_DSS_CALC__MODE_ROI_1: u32 = 3967;
const VL53LX_SIGMA_ESTIMATOR_CALC__SPARE_0: u32 = 3968;
const VL53LX_VHV_RESULT__PEAK_SIGNAL_RATE_MCPS: u32 = 3970;
const VL53LX_VHV_RESULT__PEAK_SIGNAL_RATE_MCPS_HI: u32 = 3970;
const VL53LX_VHV_RESULT__PEAK_SIGNAL_RATE_MCPS_LO: u32 = 3971;
const VL53LX_VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF: u32 = 3972;
const VL53LX_VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_3: u32 = 3972;
const VL53LX_VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_2: u32 = 3973;
const VL53LX_VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_1: u32 = 3974;
const VL53LX_VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_0: u32 = 3975;
const VL53LX_PHASECAL_RESULT__PHASE_OUTPUT_REF: u32 = 3976;
const VL53LX_PHASECAL_RESULT__PHASE_OUTPUT_REF_HI: u32 = 3976;
const VL53LX_PHASECAL_RESULT__PHASE_OUTPUT_REF_LO: u32 = 3977;
const VL53LX_DSS_RESULT__TOTAL_RATE_PER_SPAD: u32 = 3978;
const VL53LX_DSS_RESULT__TOTAL_RATE_PER_SPAD_HI: u32 = 3978;
const VL53LX_DSS_RESULT__TOTAL_RATE_PER_SPAD_LO: u32 = 3979;
const VL53LX_DSS_RESULT__ENABLED_BLOCKS: u32 = 3980;
const VL53LX_DSS_RESULT__NUM_REQUESTED_SPADS: u32 = 3982;
const VL53LX_DSS_RESULT__NUM_REQUESTED_SPADS_HI: u32 = 3982;
const VL53LX_DSS_RESULT__NUM_REQUESTED_SPADS_LO: u32 = 3983;
const VL53LX_MM_RESULT__INNER_INTERSECTION_RATE: u32 = 3986;
const VL53LX_MM_RESULT__INNER_INTERSECTION_RATE_HI: u32 = 3986;
const VL53LX_MM_RESULT__INNER_INTERSECTION_RATE_LO: u32 = 3987;
const VL53LX_MM_RESULT__OUTER_COMPLEMENT_RATE: u32 = 3988;
const VL53LX_MM_RESULT__OUTER_COMPLEMENT_RATE_HI: u32 = 3988;
const VL53LX_MM_RESULT__OUTER_COMPLEMENT_RATE_LO: u32 = 3989;
const VL53LX_MM_RESULT__TOTAL_OFFSET: u32 = 3990;
const VL53LX_MM_RESULT__TOTAL_OFFSET_HI: u32 = 3990;
const VL53LX_MM_RESULT__TOTAL_OFFSET_LO: u32 = 3991;
const VL53LX_XTALK_CALC__XTALK_FOR_ENABLED_SPADS: u32 = 3992;
const VL53LX_XTALK_CALC__XTALK_FOR_ENABLED_SPADS_3: u32 = 3992;
const VL53LX_XTALK_CALC__XTALK_FOR_ENABLED_SPADS_2: u32 = 3993;
const VL53LX_XTALK_CALC__XTALK_FOR_ENABLED_SPADS_1: u32 = 3994;
const VL53LX_XTALK_CALC__XTALK_FOR_ENABLED_SPADS_0: u32 = 3995;
const VL53LX_XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS: u32 = 3996;
const VL53LX_XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_3: u32 = 3996;
const VL53LX_XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_2: u32 = 3997;
const VL53LX_XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_1: u32 = 3998;
const VL53LX_XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_0: u32 = 3999;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS: u32 = 4000;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_3: u32 = 4000;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_2: u32 = 4001;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_1: u32 = 4002;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_0: u32 = 4003;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS: u32 = 4004;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_3: u32 = 4004;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_2: u32 = 4005;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_1: u32 = 4006;
const VL53LX_XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_0: u32 = 4007;
const VL53LX_RANGE_RESULT__ACCUM_PHASE: u32 = 4008;
const VL53LX_RANGE_RESULT__ACCUM_PHASE_3: u32 = 4008;
const VL53LX_RANGE_RESULT__ACCUM_PHASE_2: u32 = 4009;
const VL53LX_RANGE_RESULT__ACCUM_PHASE_1: u32 = 4010;
const VL53LX_RANGE_RESULT__ACCUM_PHASE_0: u32 = 4011;
const VL53LX_RANGE_RESULT__OFFSET_CORRECTED_RANGE: u32 = 4012;
const VL53LX_RANGE_RESULT__OFFSET_CORRECTED_RANGE_HI: u32 = 4012;
const VL53LX_RANGE_RESULT__OFFSET_CORRECTED_RANGE_LO: u32 = 4013;
const VL53LX_SHADOW_PHASECAL_RESULT__VCSEL_START: u32 = 4014;
const VL53LX_SHADOW_RESULT__INTERRUPT_STATUS: u32 = 4016;
const VL53LX_SHADOW_RESULT__RANGE_STATUS: u32 = 4017;
const VL53LX_SHADOW_RESULT__REPORT_STATUS: u32 = 4018;
const VL53LX_SHADOW_RESULT__STREAM_COUNT: u32 = 4019;
const VL53LX_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 4020;
const VL53LX_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 4020;
const VL53LX_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 4021;
const VL53LX_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0: u32 = 4022;
const VL53LX_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI: u32 = 4022;
const VL53LX_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO: u32 = 4023;
const VL53LX_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0: u32 = 4024;
const VL53LX_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI: u32 = 4024;
const VL53LX_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO: u32 = 4025;
const VL53LX_SHADOW_RESULT__SIGMA_SD0: u32 = 4026;
const VL53LX_SHADOW_RESULT__SIGMA_SD0_HI: u32 = 4026;
const VL53LX_SHADOW_RESULT__SIGMA_SD0_LO: u32 = 4027;
const VL53LX_SHADOW_RESULT__PHASE_SD0: u32 = 4028;
const VL53LX_SHADOW_RESULT__PHASE_SD0_HI: u32 = 4028;
const VL53LX_SHADOW_RESULT__PHASE_SD0_LO: u32 = 4029;
const VL53LX_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0: u32 = 4030;
const VL53LX_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI: u32 = 4030;
const VL53LX_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO: u32 = 4031;
const VL53LX_SHPEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0: u32 = 4032;
const VL53LX_SHPEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI: u32 = 4032;
const VL53LX_SHPEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO: u32 = 4033;
const VL53LX_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 4034;
const VL53LX_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 4034;
const VL53LX_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 4035;
const VL53LX_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0: u32 = 4036;
const VL53LX_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI: u32 = 4036;
const VL53LX_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO: u32 = 4037;
const VL53LX_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0: u32 = 4038;
const VL53LX_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI: u32 = 4038;
const VL53LX_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO: u32 = 4039;
const VL53LX_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1: u32 = 4040;
const VL53LX_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI: u32 = 4040;
const VL53LX_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO: u32 = 4041;
const VL53LX_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1: u32 = 4042;
const VL53LX_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI: u32 = 4042;
const VL53LX_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO: u32 = 4043;
const VL53LX_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1: u32 = 4044;
const VL53LX_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI: u32 = 4044;
const VL53LX_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO: u32 = 4045;
const VL53LX_SHADOW_RESULT__SIGMA_SD1: u32 = 4046;
const VL53LX_SHADOW_RESULT__SIGMA_SD1_HI: u32 = 4046;
const VL53LX_SHADOW_RESULT__SIGMA_SD1_LO: u32 = 4047;
const VL53LX_SHADOW_RESULT__PHASE_SD1: u32 = 4048;
const VL53LX_SHADOW_RESULT__PHASE_SD1_HI: u32 = 4048;
const VL53LX_SHADOW_RESULT__PHASE_SD1_LO: u32 = 4049;
const VL53LX_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1: u32 = 4050;
const VL53LX_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI: u32 = 4050;
const VL53LX_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO: u32 = 4051;
const VL53LX_SHADOW_RESULT__SPARE_0_SD1: u32 = 4052;
const VL53LX_SHADOW_RESULT__SPARE_0_SD1_HI: u32 = 4052;
const VL53LX_SHADOW_RESULT__SPARE_0_SD1_LO: u32 = 4053;
const VL53LX_SHADOW_RESULT__SPARE_1_SD1: u32 = 4054;
const VL53LX_SHADOW_RESULT__SPARE_1_SD1_HI: u32 = 4054;
const VL53LX_SHADOW_RESULT__SPARE_1_SD1_LO: u32 = 4055;
const VL53LX_SHADOW_RESULT__SPARE_2_SD1: u32 = 4056;
const VL53LX_SHADOW_RESULT__SPARE_2_SD1_HI: u32 = 4056;
const VL53LX_SHADOW_RESULT__SPARE_2_SD1_LO: u32 = 4057;
const VL53LX_SHADOW_RESULT__SPARE_3_SD1: u32 = 4058;
const VL53LX_SHADOW_RESULT__THRESH_INFO: u32 = 4059;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0: u32 = 4060;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3: u32 = 4060;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2: u32 = 4061;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1: u32 = 4062;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0: u32 = 4063;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0: u32 = 4064;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3: u32 = 4064;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2: u32 = 4065;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1: u32 = 4066;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0: u32 = 4067;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0: u32 = 4068;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3: u32 = 4068;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2: u32 = 4069;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1: u32 = 4070;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0: u32 = 4071;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0: u32 = 4072;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3: u32 = 4072;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2: u32 = 4073;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1: u32 = 4074;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0: u32 = 4075;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1: u32 = 4076;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3: u32 = 4076;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2: u32 = 4077;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1: u32 = 4078;
const VL53LX_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0: u32 = 4079;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1: u32 = 4080;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3: u32 = 4080;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2: u32 = 4081;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1: u32 = 4082;
const VL53LX_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0: u32 = 4083;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1: u32 = 4084;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3: u32 = 4084;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2: u32 = 4085;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1: u32 = 4086;
const VL53LX_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0: u32 = 4087;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1: u32 = 4088;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3: u32 = 4088;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2: u32 = 4089;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1: u32 = 4090;
const VL53LX_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0: u32 = 4091;
const VL53LX_SHADOW_RESULT_CORE__SPARE_0: u32 = 4092;
const VL53LX_SHADOW_PHASECAL_RESULT__REFERENCE_PHASE_HI: u32 = 4094;
const VL53LX_SHADOW_PHASECAL_RESULT__REFERENCE_PHASE_LO: u32 = 4095;
const IGNORE_DIVISION_BY_ZERO: u32 = 0;
const IGNORE_XTALK_EXTRACTION_NO_SAMPLE_FAIL: u32 = 0;
const IGNORE_XTALK_EXTRACTION_SIGMA_LIMIT_FAIL: u32 = 0;
const IGNORE_XTALK_EXTRACTION_NO_SAMPLE_FOR_GRADIENT_WARN: u32 = 0;
const IGNORE_XTALK_EXTRACTION_SIGMA_LIMIT_FOR_GRADIENT_WARN: u32 = 0;
const IGNORE_XTALK_EXTRACTION_MISSING_SAMPLES_WARN: u32 = 0;
const IGNORE_REF_SPAD_CHAR_NOT_ENOUGH_SPADS: u32 = 0;
const IGNORE_REF_SPAD_CHAR_RATE_TOO_HIGH: u32 = 0;
const IGNORE_REF_SPAD_CHAR_RATE_TOO_LOW: u32 = 0;
const IGNORE_OFFSET_CAL_MISSING_SAMPLES: u32 = 0;
const IGNORE_OFFSET_CAL_SIGMA_TOO_HIGH: u32 = 0;
const IGNORE_OFFSET_CAL_RATE_TOO_HIGH: u32 = 0;
const IGNORE_OFFSET_CAL_SPAD_COUNT_TOO_LOW: u32 = 0;
const IGNORE_ZONE_CAL_MISSING_SAMPLES: u32 = 0;
const IGNORE_ZONE_CAL_SIGMA_TOO_HIGH: u32 = 0;
const IGNORE_ZONE_CAL_RATE_TOO_HIGH: u32 = 0;
const VL53LX_DEVICESCHEDULERMODE_PSEUDO_SOLO: u32 = 0;
const VL53LX_DEVICESCHEDULERMODE_STREAMING: u32 = 1;
const VL53LX_DEVICESCHEDULERMODE_HISTOGRAM: u32 = 2;
const VL53LX_DEVICEREADOUTMODE_SINGLE_SD: u32 = 0;
const VL53LX_DEVICEREADOUTMODE_DUAL_SD: u32 = 4;
const VL53LX_DEVICEREADOUTMODE_SPLIT_READOUT: u32 = 8;
const VL53LX_DEVICEREADOUTMODE_SPLIT_MANUAL: u32 = 12;
const VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK: u32 = 240;
const VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK: u32 = 15;
const VL53LX_GROUPEDPARAMETERHOLD_ID_MASK: u32 = 2;
const VL53LX_EWOK_I2C_DEV_ADDR_DEFAULT: u32 = 41;
const VL53LX_OSC_FREQUENCY: u32 = 0;
const VL53LX_OSC_TRIM_DEFAULT: u32 = 0;
const VL53LX_OSC_FREQ_SET_DEFAULT: u32 = 0;
const VL53LX_RANGE_HISTOGRAM_REF: u32 = 8;
const VL53LX_RANGE_HISTOGRAM_RET: u32 = 16;
const VL53LX_RANGE_HISTOGRAM_BOTH: u32 = 24;
const VL53LX_RANGE_HISTOGRAM_INIT: u32 = 32;
const VL53LX_RANGE_VHV_INIT: u32 = 64;
const VL53LX_RESULT_RANGE_STATUS: u32 = 31;
const VL53LX_SYSTEM__SEED_CONFIG__MANUAL: u32 = 0;
const VL53LX_SYSTEM__SEED_CONFIG__STANDARD: u32 = 1;
const VL53LX_SYSTEM__SEED_CONFIG__EVEN_UPDATE_ONLY: u32 = 2;
const VL53LX_INTERRUPT_CONFIG_LEVEL_LOW: u32 = 0;
const VL53LX_INTERRUPT_CONFIG_LEVEL_HIGH: u32 = 1;
const VL53LX_INTERRUPT_CONFIG_OUT_OF_WINDOW: u32 = 2;
const VL53LX_INTERRUPT_CONFIG_IN_WINDOW: u32 = 3;
const VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY: u32 = 32;
const VL53LX_CLEAR_RANGE_INT: u32 = 1;
const VL53LX_CLEAR_ERROR_INT: u32 = 2;
const VL53LX_SEQUENCE_VHV_EN: u32 = 1;
const VL53LX_SEQUENCE_PHASECAL_EN: u32 = 2;
const VL53LX_SEQUENCE_REFERENCE_PHASE_EN: u32 = 4;
const VL53LX_SEQUENCE_DSS1_EN: u32 = 8;
const VL53LX_SEQUENCE_DSS2_EN: u32 = 16;
const VL53LX_SEQUENCE_MM1_EN: u32 = 32;
const VL53LX_SEQUENCE_MM2_EN: u32 = 64;
const VL53LX_SEQUENCE_RANGE_EN: u32 = 128;
const VL53LX_DSS_CONTROL__ROI_SUBTRACT: u32 = 32;
const VL53LX_DSS_CONTROL__ROI_INTERSECT: u32 = 16;
const VL53LX_DSS_CONTROL__MODE_DISABLED: u32 = 0;
const VL53LX_DSS_CONTROL__MODE_TARGET_RATE: u32 = 1;
const VL53LX_DSS_CONTROL__MODE_EFFSPADS: u32 = 2;
const VL53LX_DSS_CONTROL__MODE_BLOCKSELECT: u32 = 3;
const VL53LX_RANGING_CORE__SPAD_READOUT__STANDARD: u32 = 69;
const VL53LX_RANGING_CORE__SPAD_READOUT__RETURN_ARRAY_ONLY: u32 = 5;
const VL53LX_RANGING_CORE__SPAD_READOUT__REFERENCE_ARRAY_ONLY: u32 = 85;
const VL53LX_RANGING_CORE__SPAD_READOUT__RETURN_SPLIT_ARRAY: u32 = 37;
const VL53LX_RANGING_CORE__SPAD_READOUT__CALIB_PULSES: u32 = 245;
const VL53LX_LASER_SAFETY__KEY_VALUE: u32 = 108;
const VL53LX_RANGE_STATUS__RANGE_STATUS_MASK: u32 = 31;
const VL53LX_RANGE_STATUS__MAX_THRESHOLD_HIT_MASK: u32 = 32;
const VL53LX_RANGE_STATUS__MIN_THRESHOLD_HIT_MASK: u32 = 64;
const VL53LX_RANGE_STATUS__GPH_ID_RANGE_STATUS_MASK: u32 = 128;
const VL53LX_INTERRUPT_STATUS__INT_STATUS_MASK: u32 = 7;
const VL53LX_INTERRUPT_STATUS__INT_ERROR_STATUS_MASK: u32 = 24;
const VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK: u32 = 32;
const VL53LX_NVM__IDENTIFICATION__MODEL_ID: u32 = 8;
const VL53LX_NVM__IDENTIFICATION__MODULE_TYPE: u32 = 12;
const VL53LX_NVM__IDENTIFICATION__REVISION_ID: u32 = 13;
const VL53LX_NVM__IDENTIFICATION__MODULE_ID: u32 = 14;
const VL53LX_NVM__I2C_VALID: u32 = 16;
const VL53LX_NVM__I2C_SLAVE__DEVICE_ADDRESS: u32 = 17;
const VL53LX_NVM__EWS__OSC_MEASURED__FAST_OSC_FREQUENCY: u32 = 20;
const VL53LX_NVM__EWS__FAST_OSC_TRIM_MAX: u32 = 22;
const VL53LX_NVM__EWS__FAST_OSC_FREQ_SET: u32 = 23;
const VL53LX_NVM__EWS__SLOW_OSC_CALIBRATION: u32 = 24;
const VL53LX_NVM__FMT__OSC_MEASURED__FAST_OSC_FREQUENCY: u32 = 28;
const VL53LX_NVM__FMT__FAST_OSC_TRIM_MAX: u32 = 30;
const VL53LX_NVM__FMT__FAST_OSC_FREQ_SET: u32 = 31;
const VL53LX_NVM__FMT__SLOW_OSC_CALIBRATION: u32 = 32;
const VL53LX_NVM__VHV_CONFIG_UNLOCK: u32 = 40;
const VL53LX_NVM__REF_SELVDDPIX: u32 = 41;
const VL53LX_NVM__REF_SELVQUENCH: u32 = 42;
const VL53LX_NVM__REGAVDD1V2_SEL_REGDVDD1V2_SEL: u32 = 43;
const VL53LX_NVM__VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND: u32 = 44;
const VL53LX_NVM__VHV_CONFIG__COUNT_THRESH: u32 = 45;
const VL53LX_NVM__VHV_CONFIG__OFFSET: u32 = 46;
const VL53LX_NVM__VHV_CONFIG__INIT: u32 = 47;
const VL53LX_NVM__LASER_SAFETY__VCSEL_TRIM_LL: u32 = 48;
const VL53LX_NVM__LASER_SAFETY__VCSEL_SELION_LL: u32 = 49;
const VL53LX_NVM__LASER_SAFETY__VCSEL_SELION_MAX_LL: u32 = 50;
const VL53LX_NVM__LASER_SAFETY__MULT_LL: u32 = 52;
const VL53LX_NVM__LASER_SAFETY__CLIP_LL: u32 = 53;
const VL53LX_NVM__LASER_SAFETY__VCSEL_TRIM_LD: u32 = 56;
const VL53LX_NVM__LASER_SAFETY__VCSEL_SELION_LD: u32 = 57;
const VL53LX_NVM__LASER_SAFETY__VCSEL_SELION_MAX_LD: u32 = 58;
const VL53LX_NVM__LASER_SAFETY__MULT_LD: u32 = 60;
const VL53LX_NVM__LASER_SAFETY__CLIP_LD: u32 = 61;
const VL53LX_NVM__LASER_SAFETY_LOCK_BYTE: u32 = 64;
const VL53LX_NVM__LASER_SAFETY_UNLOCK_BYTE: u32 = 68;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_0_: u32 = 72;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_1_: u32 = 73;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_2_: u32 = 74;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_3_: u32 = 75;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_4_: u32 = 76;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_5_: u32 = 77;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_6_: u32 = 78;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_7_: u32 = 79;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_8_: u32 = 80;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_9_: u32 = 81;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_10_: u32 = 82;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_11_: u32 = 83;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_12_: u32 = 84;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_13_: u32 = 85;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_14_: u32 = 86;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_15_: u32 = 87;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_16_: u32 = 88;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_17_: u32 = 89;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_18_: u32 = 90;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_19_: u32 = 91;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_20_: u32 = 92;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_21_: u32 = 93;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_22_: u32 = 94;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_23_: u32 = 95;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_24_: u32 = 96;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_25_: u32 = 97;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_26_: u32 = 98;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_27_: u32 = 99;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_28_: u32 = 100;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_29_: u32 = 101;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_30_: u32 = 102;
const VL53LX_NVM__EWS__SPAD_ENABLES_RTN_31_: u32 = 103;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC1_0_: u32 = 104;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC1_1_: u32 = 105;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC1_2_: u32 = 106;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC1_3_: u32 = 107;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC1_4_: u32 = 108;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC1_5_: u32 = 109;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC2_0_: u32 = 112;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC2_1_: u32 = 113;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC2_2_: u32 = 114;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC2_3_: u32 = 115;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC2_4_: u32 = 116;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC2_5_: u32 = 117;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC3_0_: u32 = 120;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC3_1_: u32 = 121;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC3_2_: u32 = 122;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC3_3_: u32 = 123;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC3_4_: u32 = 124;
const VL53LX_NVM__EWS__SPAD_ENABLES_REF__LOC3_5_: u32 = 125;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_0_: u32 = 128;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_1_: u32 = 129;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_2_: u32 = 130;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_3_: u32 = 131;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_4_: u32 = 132;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_5_: u32 = 133;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_6_: u32 = 134;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_7_: u32 = 135;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_8_: u32 = 136;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_9_: u32 = 137;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_10_: u32 = 138;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_11_: u32 = 139;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_12_: u32 = 140;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_13_: u32 = 141;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_14_: u32 = 142;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_15_: u32 = 143;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_16_: u32 = 144;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_17_: u32 = 145;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_18_: u32 = 146;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_19_: u32 = 147;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_20_: u32 = 148;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_21_: u32 = 149;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_22_: u32 = 150;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_23_: u32 = 151;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_24_: u32 = 152;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_25_: u32 = 153;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_26_: u32 = 154;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_27_: u32 = 155;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_28_: u32 = 156;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_29_: u32 = 157;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_30_: u32 = 158;
const VL53LX_NVM__FMT__SPAD_ENABLES_RTN_31_: u32 = 159;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC1_0_: u32 = 160;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC1_1_: u32 = 161;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC1_2_: u32 = 162;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC1_3_: u32 = 163;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC1_4_: u32 = 164;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC1_5_: u32 = 165;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC2_0_: u32 = 168;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC2_1_: u32 = 169;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC2_2_: u32 = 170;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC2_3_: u32 = 171;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC2_4_: u32 = 172;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC2_5_: u32 = 173;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC3_0_: u32 = 176;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC3_1_: u32 = 177;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC3_2_: u32 = 178;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC3_3_: u32 = 179;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC3_4_: u32 = 180;
const VL53LX_NVM__FMT__SPAD_ENABLES_REF__LOC3_5_: u32 = 181;
const VL53LX_NVM__FMT__ROI_CONFIG__MODE_ROI_CENTRE_SPAD: u32 = 184;
const VL53LX_NVM__FMT__ROI_CONFIG__MODE_ROI_XY_SIZE: u32 = 185;
const VL53LX_NVM__FMT__REF_SPAD_APPLY__NUM_REQUESTED_REF_SPAD: u32 = 188;
const VL53LX_NVM__FMT__REF_SPAD_MAN__REF_LOCATION: u32 = 189;
const VL53LX_NVM__FMT__MM_CONFIG__INNER_OFFSET_MM: u32 = 192;
const VL53LX_NVM__FMT__MM_CONFIG__OUTER_OFFSET_MM: u32 = 194;
const VL53LX_NVM__FMT__ALGO__PART_TO_PART_RANGE_OFFSET_MM: u32 = 196;
const VL53LX_NVM__FMT__ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS: u32 = 200;
const VL53LX_NVM__FMT__ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS: u32 = 202;
const VL53LX_NVM__FMT__ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS: u32 = 204;
const VL53LX_NVM__FMT__SPARE_HOST_CONFIG__NVM_CONFIG_SPARE_0: u32 = 206;
const VL53LX_NVM__FMT__SPARE_HOST_CONFIG__NVM_CONFIG_SPARE_1: u32 = 207;
const VL53LX_NVM__CUSTOMER_NVM_SPACE_PROGRAMMED: u32 = 224;
const VL53LX_NVM__CUST__I2C_SLAVE__DEVICE_ADDRESS: u32 = 228;
const VL53LX_NVM__CUST__REF_SPAD_APPLY__NUM_REQUESTED_REF_SPAD: u32 = 232;
const VL53LX_NVM__CUST__REF_SPAD_MAN__REF_LOCATION: u32 = 233;
const VL53LX_NVM__CUST__MM_CONFIG__INNER_OFFSET_MM: u32 = 236;
const VL53LX_NVM__CUST__MM_CONFIG__OUTER_OFFSET_MM: u32 = 238;
const VL53LX_NVM__CUST__ALGO__PART_TO_PART_RANGE_OFFSET_MM: u32 = 240;
const VL53LX_NVM__CUST__ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS: u32 = 244;
const VL53LX_NVM__CUST__ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS: u32 = 246;
const VL53LX_NVM__CUST__ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS: u32 = 248;
const VL53LX_NVM__CUST__SPARE_HOST_CONFIG__NVM_CONFIG_SPARE_0: u32 = 250;
const VL53LX_NVM__CUST__SPARE_HOST_CONFIG__NVM_CONFIG_SPARE_1: u32 = 251;
const VL53LX_NVM__FMT__FGC__BYTE_0: u32 = 476;
const VL53LX_NVM__FMT__FGC__BYTE_1: u32 = 477;
const VL53LX_NVM__FMT__FGC__BYTE_2: u32 = 478;
const VL53LX_NVM__FMT__FGC__BYTE_3: u32 = 479;
const VL53LX_NVM__FMT__FGC__BYTE_4: u32 = 480;
const VL53LX_NVM__FMT__FGC__BYTE_5: u32 = 481;
const VL53LX_NVM__FMT__FGC__BYTE_6: u32 = 482;
const VL53LX_NVM__FMT__FGC__BYTE_7: u32 = 483;
const VL53LX_NVM__FMT__FGC__BYTE_8: u32 = 484;
const VL53LX_NVM__FMT__FGC__BYTE_9: u32 = 485;
const VL53LX_NVM__FMT__FGC__BYTE_10: u32 = 486;
const VL53LX_NVM__FMT__FGC__BYTE_11: u32 = 487;
const VL53LX_NVM__FMT__FGC__BYTE_12: u32 = 488;
const VL53LX_NVM__FMT__FGC__BYTE_13: u32 = 489;
const VL53LX_NVM__FMT__FGC__BYTE_14: u32 = 490;
const VL53LX_NVM__FMT__FGC__BYTE_15: u32 = 491;
const VL53LX_NVM__FMT__TEST_PROGRAM_MAJOR_MINOR: u32 = 492;
const VL53LX_NVM__FMT__MAP_MAJOR_MINOR: u32 = 493;
const VL53LX_NVM__FMT__YEAR_MONTH: u32 = 494;
const VL53LX_NVM__FMT__DAY_MODULE_DATE_PHASE: u32 = 495;
const VL53LX_NVM__FMT__TIME: u32 = 496;
const VL53LX_NVM__FMT__TESTER_ID: u32 = 498;
const VL53LX_NVM__FMT__SITE_ID: u32 = 499;
const VL53LX_NVM__EWS__TEST_PROGRAM_MAJOR_MINOR: u32 = 500;
const VL53LX_NVM__EWS__PROBE_CARD_MAJOR_MINOR: u32 = 501;
const VL53LX_NVM__EWS__TESTER_ID: u32 = 502;
const VL53LX_NVM__EWS__LOT__BYTE_0: u32 = 504;
const VL53LX_NVM__EWS__LOT__BYTE_1: u32 = 505;
const VL53LX_NVM__EWS__LOT__BYTE_2: u32 = 506;
const VL53LX_NVM__EWS__LOT__BYTE_3: u32 = 507;
const VL53LX_NVM__EWS__LOT__BYTE_4: u32 = 508;
const VL53LX_NVM__EWS__LOT__BYTE_5: u32 = 509;
const VL53LX_NVM__EWS__WAFER: u32 = 509;
const VL53LX_NVM__EWS__XCOORD: u32 = 510;
const VL53LX_NVM__EWS__YCOORD: u32 = 511;
const VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_INDEX: u32 = 184;
const VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE: u32 = 4;
const VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_INDEX: u32 = 348;
const VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE: u32 = 56;
const VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_INDEX: u32 = 404;
const VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE: u32 = 8;
const VL53LX_NVM__FMT__RANGE_RESULTS__140MM_MM_PRE_RANGE: u32 = 412;
const VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK: u32 = 428;
const VL53LX_NVM__FMT__RANGE_RESULTS__400MM_DARK: u32 = 444;
const VL53LX_NVM__FMT__RANGE_RESULTS__400MM_AMBIENT: u32 = 460;
const VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES: u32 = 16;
const TUNING_VERSION: u32 = 7;
const TUNING_PROXY_MIN: i32 = -30;
const TUNING_SINGLE_TARGET_XTALK_TARGET_DISTANCE_MM: u32 = 600;
const TUNING_SINGLE_TARGET_XTALK_SAMPLE_NUMBER: u32 = 50;
const TUNING_MIN_AMBIENT_DMAX_VALID: u32 = 8;
const TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER: u32 = 10;
const TUNING_XTALK_FULL_ROI_TARGET_DISTANCE_MM: u32 = 600;
const TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT: u32 = 3;
const TUNING_ZERO_DISTANCE_OFFSET_NON_LINEAR_FACTOR_DEFAULT: u32 = 9;
const TUNING_XTALK_FULL_ROI_BIN_SUM_MARGIN: u32 = 24;
const TUNING_XTALK_FULL_ROI_DEFAULT_OFFSET: u32 = 50;
const VL53LX_BYTES_PER_WORD: u32 = 2;
const VL53LX_BYTES_PER_DWORD: u32 = 4;
const VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS: u32 = 500;
const VL53LX_RANGE_COMPLETION_POLLING_TIMEOUT_MS: u32 = 2000;
const VL53LX_TEST_COMPLETION_POLLING_TIMEOUT_MS: u32 = 10000;
const VL53LX_POLLING_DELAY_MS: u32 = 1;
const VL53LX_TUNINGPARM_PUBLIC_PAGE_BASE_ADDRESS: u32 = 32768;
const VL53LX_TUNINGPARM_PRIVATE_PAGE_BASE_ADDRESS: u32 = 49152;
const VL53LX_OFFSET_CAL_MIN_MM1_EFFECTIVE_SPADS: u32 = 1280;
const VL53LX_GAIN_FACTOR__STANDARD_DEFAULT: u32 = 2048;
const VL53LX_GAIN_FACTOR__HISTOGRAM_DEFAULT: u32 = 2048;
const VL53LX_OFFSET_CAL_MIN_EFFECTIVE_SPADS: u32 = 1280;
const VL53LX_OFFSET_CAL_MAX_PRE_PEAK_RATE_MCPS: u32 = 6400;
const VL53LX_OFFSET_CAL_MAX_SIGMA_MM: u32 = 64;
const VL53LX_ZONE_CAL_MAX_PRE_PEAK_RATE_MCPS: u32 = 6400;
const VL53LX_ZONE_CAL_MAX_SIGMA_MM: u32 = 64;
const VL53LX_XTALK_EXTRACT_MAX_SIGMA_MM: u32 = 140;
const VL53LX_MAX_USER_ZONES: u32 = 16;
const VL53LX_MAX_RANGE_RESULTS: u32 = 4;
const VL53LX_BUFFER_SIZE: u32 = 5;
const VL53LX_MAX_STRING_LENGTH: u32 = 512;
const VL53LX_I2C: u32 = 1;
const VL53LX_SPI: u32 = 0;
const VL53LX_RETURN_ARRAY_ONLY: u32 = 1;
const VL53LX_REFERENCE_ARRAY_ONLY: u32 = 16;
const VL53LX_BOTH_RETURN_AND_REFERENCE_ARRAYS: u32 = 17;
const VL53LX_NEITHER_RETURN_AND_REFERENCE_ARRAYS: u32 = 0;
const VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH: u32 = 0;
const VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_LOW: u32 = 16;
const VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK: u32 = 16;
const VL53LX_POLLING_DELAY_US: u32 = 1000;
const VL53LX_SOFTWARE_RESET_DURATION_US: u32 = 100;
const VL53LX_FIRMWARE_BOOT_TIME_US: u32 = 1200;
const VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US: u32 = 250;
const VL53LX_SPAD_ARRAY_WIDTH: u32 = 16;
const VL53LX_SPAD_ARRAY_HEIGHT: u32 = 16;
const VL53LX_NVM_SIZE_IN_BYTES: u32 = 512;
const VL53LX_NO_OF_SPAD_ENABLES: u32 = 256;
const VL53LX_RTN_SPAD_BUFFER_SIZE: u32 = 32;
const VL53LX_REF_SPAD_BUFFER_SIZE: u32 = 6;
const VL53LX_AMBIENT_WINDOW_VCSEL_PERIODS: u32 = 256;
const VL53LX_RANGING_WINDOW_VCSEL_PERIODS: u32 = 2048;
const VL53LX_MACRO_PERIOD_VCSEL_PERIODS: u32 = 2304;
const VL53LX_MAX_ALLOWED_PHASE: u32 = 65535;
const VL53LX_RTN_SPAD_UNITY_TRANSMISSION: u32 = 256;
const VL53LX_RTN_SPAD_APERTURE_TRANSMISSION: u32 = 56;
const VL53LX_SPAD_TOTAL_COUNT_MAX: u32 = 536870911;
const VL53LX_SPAD_TOTAL_COUNT_RES_THRES: u32 = 16777216;
const VL53LX_COUNT_RATE_INTERNAL_MAX: u32 = 16777215;
const VL53LX_SPEED_OF_LIGHT_IN_AIR: u32 = 299704;
const VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8: u32 = 37463;
const VL53LX_TRACE_LEVEL_NONE: u32 = 0;
const VL53LX_TRACE_LEVEL_ERRORS: u32 = 1;
const VL53LX_TRACE_LEVEL_WARNING: u32 = 2;
const VL53LX_TRACE_LEVEL_INFO: u32 = 4;
const VL53LX_TRACE_LEVEL_DEBUG: u32 = 8;
const VL53LX_TRACE_LEVEL_ALL: u32 = 16;
const VL53LX_TRACE_LEVEL_IGNORE: u32 = 32;
const VL53LX_TRACE_FUNCTION_NONE: u32 = 0;
const VL53LX_TRACE_FUNCTION_I2C: u32 = 1;
const VL53LX_TRACE_FUNCTION_ALL: u32 = 2147483647;
const VL53LX_TRACE_MODULE_NONE: u32 = 0;
const VL53LX_TRACE_MODULE_API: u32 = 1;
const VL53LX_TRACE_MODULE_CORE: u32 = 2;
const VL53LX_TRACE_MODULE_PROTECTED: u32 = 4;
const VL53LX_TRACE_MODULE_HISTOGRAM: u32 = 8;
const VL53LX_TRACE_MODULE_REGISTERS: u32 = 16;
const VL53LX_TRACE_MODULE_PLATFORM: u32 = 32;
const VL53LX_TRACE_MODULE_NVM: u32 = 64;
const VL53LX_TRACE_MODULE_CALIBRATION_DATA: u32 = 128;
const VL53LX_TRACE_MODULE_NVM_DATA: u32 = 256;
const VL53LX_TRACE_MODULE_HISTOGRAM_DATA: u32 = 512;
const VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA: u32 = 1024;
const VL53LX_TRACE_MODULE_XTALK_DATA: u32 = 2048;
const VL53LX_TRACE_MODULE_OFFSET_DATA: u32 = 4096;
const VL53LX_TRACE_MODULE_DATA_INIT: u32 = 8192;
const VL53LX_TRACE_MODULE_REF_SPAD_CHAR: u32 = 16384;
const VL53LX_TRACE_MODULE_SPAD_RATE_MAP: u32 = 32768;
const VL53LX_STATIC_NVM_MANAGED_I2C_INDEX: u32 = 1;
const VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX: u32 = 13;
const VL53LX_STATIC_CONFIG_I2C_INDEX: u32 = 36;
const VL53LX_GENERAL_CONFIG_I2C_INDEX: u32 = 68;
const VL53LX_TIMING_CONFIG_I2C_INDEX: u32 = 90;
const VL53LX_DYNAMIC_CONFIG_I2C_INDEX: u32 = 113;
const VL53LX_SYSTEM_CONTROL_I2C_INDEX: u32 = 131;
const VL53LX_SYSTEM_RESULTS_I2C_INDEX: u32 = 136;
const VL53LX_CORE_RESULTS_I2C_INDEX: u32 = 180;
const VL53LX_DEBUG_RESULTS_I2C_INDEX: u32 = 214;
const VL53LX_NVM_COPY_DATA_I2C_INDEX: u32 = 271;
const VL53LX_PREV_SHADOW_SYSTEM_RESULTS_I2C_INDEX: u32 = 3792;
const VL53LX_PREV_SHADOW_CORE_RESULTS_I2C_INDEX: u32 = 3836;
const VL53LX_PATCH_DEBUG_I2C_INDEX: u32 = 3872;
const VL53LX_GPH_GENERAL_CONFIG_I2C_INDEX: u32 = 3876;
const VL53LX_GPH_STATIC_CONFIG_I2C_INDEX: u32 = 3887;
const VL53LX_GPH_TIMING_CONFIG_I2C_INDEX: u32 = 3894;
const VL53LX_FW_INTERNAL_I2C_INDEX: u32 = 3910;
const VL53LX_PATCH_RESULTS_I2C_INDEX: u32 = 3924;
const VL53LX_SHADOW_SYSTEM_RESULTS_I2C_INDEX: u32 = 4014;
const VL53LX_SHADOW_CORE_RESULTS_I2C_INDEX: u32 = 4060;
const VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES: u32 = 11;
const VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES: u32 = 23;
const VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES: u32 = 32;
const VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES: u32 = 22;
const VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES: u32 = 23;
const VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES: u32 = 18;
const VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES: u32 = 5;
const VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES: u32 = 44;
const VL53LX_CORE_RESULTS_I2C_SIZE_BYTES: u32 = 33;
const VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES: u32 = 56;
const VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES: u32 = 49;
const VL53LX_PREV_SHADOW_SYSTEM_RESULTS_I2C_SIZE_BYTES: u32 = 44;
const VL53LX_PREV_SHADOW_CORE_RESULTS_I2C_SIZE_BYTES: u32 = 33;
const VL53LX_PATCH_DEBUG_I2C_SIZE_BYTES: u32 = 2;
const VL53LX_GPH_GENERAL_CONFIG_I2C_SIZE_BYTES: u32 = 5;
const VL53LX_GPH_STATIC_CONFIG_I2C_SIZE_BYTES: u32 = 6;
const VL53LX_GPH_TIMING_CONFIG_I2C_SIZE_BYTES: u32 = 16;
const VL53LX_FW_INTERNAL_I2C_SIZE_BYTES: u32 = 2;
const VL53LX_PATCH_RESULTS_I2C_SIZE_BYTES: u32 = 90;
const VL53LX_SHADOW_SYSTEM_RESULTS_I2C_SIZE_BYTES: u32 = 82;
const VL53LX_SHADOW_CORE_RESULTS_I2C_SIZE_BYTES: u32 = 33;
const VL53LX_MAX_AMBIENT_DMAX_VALUES: u32 = 5;
const VL53LX_MAX_BIN_SEQUENCE_LENGTH: u32 = 6;
const VL53LX_MAX_BIN_SEQUENCE_CODE: u32 = 15;
const VL53LX_HISTOGRAM_BUFFER_SIZE: u32 = 24;
const VL53LX_XTALK_HISTO_BINS: u32 = 12;
const VL53LX_D_001: u32 = 8;
const VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR: u32 = 1;
const VL53LX_LL_API_IMPLEMENTATION_VER_MINOR: u32 = 1;
const VL53LX_LL_API_IMPLEMENTATION_VER_SUB: u32 = 1;
const VL53LX_LL_API_IMPLEMENTATION_VER_REVISION: u32 = 0;
const VL53LX_LL_API_IMPLEMENTATION_VER_STRING: &[u8; 6usize] = b"1.1.1\0";
const VL53LX_FIRMWARE_VER_MINIMUM: u32 = 398;
const VL53LX_FIRMWARE_VER_MAXIMUM: u32 = 400;
const VL53LX_LL_CALIBRATION_DATA_STRUCT_VERSION: u32 = 3970629890;
const VL53LX_LL_ZONE_CALIBRATION_DATA_STRUCT_VERSION: u32 = 3970826497;
const VL53LX_BIN_REC_SIZE: u32 = 6;
const VL53LX_TIMING_CONF_A_B_SIZE: u32 = 2;
const VL53LX_FRAME_WAIT_EVENT: u32 = 6;
const VL53LX_MAX_XTALK_RANGE_RESULTS: u32 = 5;
const VL53LX_MAX_OFFSET_RANGE_RESULTS: u32 = 3;
const VL53LX_NVM_MAX_FMT_RANGE_DATA: u32 = 4;
const VL53LX_NVM_PEAK_RATE_MAP_SAMPLES: u32 = 25;
const VL53LX_NVM_PEAK_RATE_MAP_WIDTH: u32 = 5;
const VL53LX_NVM_PEAK_RATE_MAP_HEIGHT: u32 = 5;
const VL53LX_IMPLEMENTATION_VER_MAJOR: u32 = 1;
const VL53LX_IMPLEMENTATION_VER_MINOR: u32 = 1;
const VL53LX_IMPLEMENTATION_VER_SUB: u32 = 4;
const VL53LX_IMPLEMENTATION_VER_REVISION: u32 = 2352;
const VL53LX_ADDITIONAL_CALIBRATION_DATA_STRUCT_VERSION: u32 = 32;
const VL53LX_CALIBRATION_DATA_STRUCT_VERSION: u32 = 3970629922;
const VL53LX_RANGESTATUS_RANGE_VALID: u32 = 0;
const VL53LX_RANGESTATUS_SIGMA_FAIL: u32 = 1;
const VL53LX_RANGESTATUS_SIGNAL_FAIL: u32 = 2;
const VL53LX_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED: u32 = 3;
const VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL: u32 = 4;
const VL53LX_RANGESTATUS_HARDWARE_FAIL: u32 = 5;
const VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL: u32 = 6;
const VL53LX_RANGESTATUS_WRAP_TARGET_FAIL: u32 = 7;
const VL53LX_RANGESTATUS_PROCESSING_FAIL: u32 = 8;
const VL53LX_RANGESTATUS_XTALK_SIGNAL_FAIL: u32 = 9;
const VL53LX_RANGESTATUS_SYNCRONISATION_INT: u32 = 10;
const VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE: u32 = 11;
const VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL: u32 = 12;
const VL53LX_RANGESTATUS_MIN_RANGE_FAIL: u32 = 13;
const VL53LX_RANGESTATUS_RANGE_INVALID: u32 = 14;
const VL53LX_RANGESTATUS_NONE: u32 = 255;
const VL53LX_D_012: u32 = 4;
const INPUT: u32 = 0;
const OUTPUT: u32 = 1;
const LOW: u32 = 0;
const HIGH: u32 = 1;
const VL53LX_HISTOGRAM_CONFIG__OPCODE_SEQUENCE_0: u32 = 54;
const VL53LX_HISTOGRAM_CONFIG__OPCODE_SEQUENCE_1: u32 = 55;
const VL53LX_HISTOGRAM_CONFIG__OPCODE_SEQUENCE_2: u32 = 56;
const VL53LX_HISTOGRAM_CONFIG__AMB_THRESH_HIGH: u32 = 60;
const VL53LX_RESULT__HISTOGRAM_BIN_0_2: u32 = 142;
const VL53LX_RESULT__HISTOGRAM_BIN_0_1: u32 = 143;
const VL53LX_RESULT__HISTOGRAM_BIN_0_0: u32 = 144;
const VL53LX_RESULT__HISTOGRAM_BIN_23_2: u32 = 211;
const VL53LX_RESULT__HISTOGRAM_BIN_23_1: u32 = 212;
const VL53LX_RESULT__HISTOGRAM_BIN_23_0: u32 = 213;
const VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB: u32 = 217;
const VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB: u32 = 218;
const VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX: u32 = 136;
const VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES: u32 = 83;
const VL53LX_DEFAULT_DEVICE_ADDRESS: u32 = 82;
const VL53LX_MAX_I2C_XFER_SIZE: u32 = 256;
const CONT_CONTINUE: u32 = 0;
const CONT_NEXT_LOOP: u32 = 1;
const CONT_RESET: u32 = 2;
const DMAX_REFLECTANCE_IDX: u32 = 2;
const LOWPOWER_AUTO_VHV_LOOP_DURATION_US: u32 = 245;
const LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING: u32 = 1448;
const LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING: u32 = 2100;
const FDA_MAX_TIMING_BUDGET_US: u32 = 550000;
const VL53LX_NVM_POWER_UP_DELAY_US: u32 = 50;
const VL53LX_NVM_READ_TRIGGER_DELAY_US: u32 = 5;
const VL53LX_D_002: u32 = 65535;
const VL53LX_D_008: u32 = 65535;
const VL53LX_D_003: u32 = 16777215;
const VL53LX_D_007: u32 = 4294967295;
const VL53LX_D_005: u64 = 549755813887;
const VL53LX_D_009: u64 = 1099511627775;
const VL53LX_D_010: u64 = 281474976710655;
const VL53LX_D_004: u64 = 72057594037927935;
const VL53LX_D_006: u64 = 9223372036854775807;
const VL53LX_D_011: i32 = -1;

type std_size_t = ::std::os::raw::c_ulong;
type std_nullptr_t = *const ::std::os::raw::c_void;
type size_t = ::std::os::raw::c_ulong;
type _Float32 = f32;
type _Float64 = f64;
type _Float32x = f64;
type _Float64x = u128;

#[repr(C)]
struct ComponentObject__bindgen_vtable(::std::os::raw::c_void);
#[doc = " An abstract class for Generic components."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct ComponentObject {
    vtable_: *const ComponentObject__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_ComponentObject() {
    assert_eq!(
        ::std::mem::size_of::<ComponentObject>(),
        8usize,
        concat!("Size of: ", stringify!(ComponentObject))
    );
    assert_eq!(
        ::std::mem::align_of::<ComponentObject>(),
        8usize,
        concat!("Alignment of ", stringify!(ComponentObject))
    );
}
#[doc = " An abstract class for range sensors"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct RangeSensor {
    _base: ComponentObject,
}
#[test]
fn bindgen_test_layout_RangeSensor() {
    assert_eq!(
        ::std::mem::size_of::<RangeSensor>(),
        8usize,
        concat!("Size of: ", stringify!(RangeSensor))
    );
    assert_eq!(
        ::std::mem::align_of::<RangeSensor>(),
        8usize,
        concat!("Alignment of ", stringify!(RangeSensor))
    );
}
const VL53LX_Tuning_t_VL53LX_TUNING_VERSION: VL53LX_Tuning_t = 0;
const VL53LX_Tuning_t_VL53LX_TUNING_PROXY_MIN: VL53LX_Tuning_t = 1;
const VL53LX_Tuning_t_VL53LX_TUNING_SINGLE_TARGET_XTALK_TARGET_DISTANCE_MM: VL53LX_Tuning_t = 2;
const VL53LX_Tuning_t_VL53LX_TUNING_SINGLE_TARGET_XTALK_SAMPLE_NUMBER: VL53LX_Tuning_t = 3;
const VL53LX_Tuning_t_VL53LX_TUNING_MIN_AMBIENT_DMAX_VALID: VL53LX_Tuning_t = 4;
const VL53LX_Tuning_t_VL53LX_TUNING_MAX_SIMPLE_OFFSET_CALIBRATION_SAMPLE_NUMBER:
    VL53LX_Tuning_t = 5;
const VL53LX_Tuning_t_VL53LX_TUNING_XTALK_FULL_ROI_TARGET_DISTANCE_MM: VL53LX_Tuning_t = 6;
const VL53LX_Tuning_t_VL53LX_TUNING_SIMPLE_OFFSET_CALIBRATION_REPEAT: VL53LX_Tuning_t = 7;
const VL53LX_Tuning_t_VL53LX_TUNING_XTALK_FULL_ROI_BIN_SUM_MARGIN: VL53LX_Tuning_t = 8;
const VL53LX_Tuning_t_VL53LX_TUNING_XTALK_FULL_ROI_DEFAULT_OFFSET: VL53LX_Tuning_t = 9;
const VL53LX_Tuning_t_VL53LX_TUNING_ZERO_DISTANCE_OFFSET_NON_LINEAR_FACTOR: VL53LX_Tuning_t =
    10;
const VL53LX_Tuning_t_VL53LX_TUNING_MAX_TUNABLE_KEY: VL53LX_Tuning_t = 11;
type VL53LX_Tuning_t = ::std::os::raw::c_uint;
type FixPoint1616_t = u32;
type VL53LX_Error = i8;
#[doc = " @} VL53LX_define_Error_group"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen3_dmax_private_data_t {
    VL53LX_p_037: u32,
    VL53LX_p_063: u8,
    VL53LX_p_064: u8,
    VL53LX_p_065: u16,
    VL53LX_p_066: u16,
    VL53LX_p_067: u16,
    VL53LX_p_038: u16,
    VL53LX_p_009: u32,
    VL53LX_p_033: u32,
    VL53LX_p_034: u16,
    VL53LX_p_004: u16,
    VL53LX_p_028: u32,
    VL53LX_p_035: u32,
    VL53LX_p_036: i16,
    VL53LX_p_022: i16,
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen3_dmax_private_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen3_dmax_private_data_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_hist_gen3_dmax_private_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen3_dmax_private_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_gen3_dmax_private_data_t)
        )
    );
    fn test_field_VL53LX_p_037() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_037) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_037)
            )
        );
    }
    test_field_VL53LX_p_037();
    fn test_field_VL53LX_p_063() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_063) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_063)
            )
        );
    }
    test_field_VL53LX_p_063();
    fn test_field_VL53LX_p_064() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_064) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_064)
            )
        );
    }
    test_field_VL53LX_p_064();
    fn test_field_VL53LX_p_065() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_065) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_065)
            )
        );
    }
    test_field_VL53LX_p_065();
    fn test_field_VL53LX_p_066() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_066) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_066)
            )
        );
    }
    test_field_VL53LX_p_066();
    fn test_field_VL53LX_p_067() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_067) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_067)
            )
        );
    }
    test_field_VL53LX_p_067();
    fn test_field_VL53LX_p_038() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_038) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_038)
            )
        );
    }
    test_field_VL53LX_p_038();
    fn test_field_VL53LX_p_009() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_009) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_009)
            )
        );
    }
    test_field_VL53LX_p_009();
    fn test_field_VL53LX_p_033() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_033) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_033)
            )
        );
    }
    test_field_VL53LX_p_033();
    fn test_field_VL53LX_p_034() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_034) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_034)
            )
        );
    }
    test_field_VL53LX_p_034();
    fn test_field_VL53LX_p_004() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_004) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_004)
            )
        );
    }
    test_field_VL53LX_p_004();
    fn test_field_VL53LX_p_028() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_028) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_028)
            )
        );
    }
    test_field_VL53LX_p_028();
    fn test_field_VL53LX_p_035() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_035) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_035)
            )
        );
    }
    test_field_VL53LX_p_035();
    fn test_field_VL53LX_p_036() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_036) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_036)
            )
        );
    }
    test_field_VL53LX_p_036();
    fn test_field_VL53LX_p_022() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_022) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_private_data_t),
                "::",
                stringify!(VL53LX_p_022)
            )
        );
    }
    test_field_VL53LX_p_022();
}
type VL53LX_WaitMethod = u8;
type VL53LX_DeviceState = u8;
type VL53LX_DeviceZonePreset = u8;
type VL53LX_DevicePresetModes = u8;
type VL53LX_DeviceMeasurementModes = u8;
type VL53LX_OffsetCalibrationMode = u8;
type VL53LX_OffsetCorrectionMode = u8;
type VL53LX_DeviceDmaxMode = u8;
type VL53LX_DeviceSequenceConfig = u8;
type VL53LX_DeviceInterruptPolarity = u8;
type VL53LX_DeviceGpioMode = u8;
type VL53LX_DeviceError = u8;
type VL53LX_DeviceReportStatus = u8;
type VL53LX_DeviceDssMode = u8;
type VL53LX_HistAlgoSelect = u8;
type VL53LX_HistTargetOrder = u8;
type VL53LX_HistAmbEstMethod = u8;
type VL53LX_HistXtalkCompEnable = u8;
type VL53LX_DeviceConfigLevel = u8;
type VL53LX_DeviceResultsLevel = u8;
type VL53LX_DeviceTestMode = u8;
type VL53LX_DeviceSscArray = u8;
type VL53LX_ZoneConfig_BinConfig_select = u8;
type VL53LX_GPIO_Interrupt_Mode = u8;
type VL53LX_TuningParms = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_static_nvm_managed_t {
    i2c_slave__device_address: u8,
    ana_config__vhv_ref_sel_vddpix: u8,
    ana_config__vhv_ref_sel_vquench: u8,
    ana_config__reg_avdd1v2_sel: u8,
    ana_config__fast_osc__trim: u8,
    osc_measured__fast_osc__frequency: u16,
    vhv_config__timeout_macrop_loop_bound: u8,
    vhv_config__count_thresh: u8,
    vhv_config__offset: u8,
    vhv_config__init: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_static_nvm_managed_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_static_nvm_managed_t>(),
        12usize,
        concat!("Size of: ", stringify!(VL53LX_static_nvm_managed_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_static_nvm_managed_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_static_nvm_managed_t))
    );
    fn test_field_i2c_slave__device_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i2c_slave__device_address) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(i2c_slave__device_address)
            )
        );
    }
    test_field_i2c_slave__device_address();
    fn test_field_ana_config__vhv_ref_sel_vddpix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__vhv_ref_sel_vddpix) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(ana_config__vhv_ref_sel_vddpix)
            )
        );
    }
    test_field_ana_config__vhv_ref_sel_vddpix();
    fn test_field_ana_config__vhv_ref_sel_vquench() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__vhv_ref_sel_vquench) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(ana_config__vhv_ref_sel_vquench)
            )
        );
    }
    test_field_ana_config__vhv_ref_sel_vquench();
    fn test_field_ana_config__reg_avdd1v2_sel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__reg_avdd1v2_sel) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(ana_config__reg_avdd1v2_sel)
            )
        );
    }
    test_field_ana_config__reg_avdd1v2_sel();
    fn test_field_ana_config__fast_osc__trim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__fast_osc__trim) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(ana_config__fast_osc__trim)
            )
        );
    }
    test_field_ana_config__fast_osc__trim();
    fn test_field_osc_measured__fast_osc__frequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).osc_measured__fast_osc__frequency) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(osc_measured__fast_osc__frequency)
            )
        );
    }
    test_field_osc_measured__fast_osc__frequency();
    fn test_field_vhv_config__timeout_macrop_loop_bound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_config__timeout_macrop_loop_bound) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(vhv_config__timeout_macrop_loop_bound)
            )
        );
    }
    test_field_vhv_config__timeout_macrop_loop_bound();
    fn test_field_vhv_config__count_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_config__count_thresh) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(vhv_config__count_thresh)
            )
        );
    }
    test_field_vhv_config__count_thresh();
    fn test_field_vhv_config__offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_config__offset) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(vhv_config__offset)
            )
        );
    }
    test_field_vhv_config__offset();
    fn test_field_vhv_config__init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_config__init) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_nvm_managed_t),
                "::",
                stringify!(vhv_config__init)
            )
        );
    }
    test_field_vhv_config__init();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_customer_nvm_managed_t {
    global_config__spad_enables_ref_0: u8,
    global_config__spad_enables_ref_1: u8,
    global_config__spad_enables_ref_2: u8,
    global_config__spad_enables_ref_3: u8,
    global_config__spad_enables_ref_4: u8,
    global_config__spad_enables_ref_5: u8,
    global_config__ref_en_start_select: u8,
    ref_spad_man__num_requested_ref_spads: u8,
    ref_spad_man__ref_location: u8,
    algo__crosstalk_compensation_plane_offset_kcps: u16,
    algo__crosstalk_compensation_x_plane_gradient_kcps: i16,
    algo__crosstalk_compensation_y_plane_gradient_kcps: i16,
    ref_spad_char__total_rate_target_mcps: u16,
    algo__part_to_part_range_offset_mm: i16,
    mm_config__inner_offset_mm: i16,
    mm_config__outer_offset_mm: i16,
}
#[test]
fn bindgen_test_layout_VL53LX_customer_nvm_managed_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_customer_nvm_managed_t>(),
        24usize,
        concat!("Size of: ", stringify!(VL53LX_customer_nvm_managed_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_customer_nvm_managed_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_customer_nvm_managed_t))
    );
    fn test_field_global_config__spad_enables_ref_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_0) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__spad_enables_ref_0)
            )
        );
    }
    test_field_global_config__spad_enables_ref_0();
    fn test_field_global_config__spad_enables_ref_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_1) as usize
                    - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__spad_enables_ref_1)
            )
        );
    }
    test_field_global_config__spad_enables_ref_1();
    fn test_field_global_config__spad_enables_ref_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_2) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__spad_enables_ref_2)
            )
        );
    }
    test_field_global_config__spad_enables_ref_2();
    fn test_field_global_config__spad_enables_ref_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_3) as usize
                    - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__spad_enables_ref_3)
            )
        );
    }
    test_field_global_config__spad_enables_ref_3();
    fn test_field_global_config__spad_enables_ref_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_4) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__spad_enables_ref_4)
            )
        );
    }
    test_field_global_config__spad_enables_ref_4();
    fn test_field_global_config__spad_enables_ref_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_5) as usize
                    - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__spad_enables_ref_5)
            )
        );
    }
    test_field_global_config__spad_enables_ref_5();
    fn test_field_global_config__ref_en_start_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__ref_en_start_select) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(global_config__ref_en_start_select)
            )
        );
    }
    test_field_global_config__ref_en_start_select();
    fn test_field_ref_spad_man__num_requested_ref_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_man__num_requested_ref_spads) as usize
                    - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(ref_spad_man__num_requested_ref_spads)
            )
        );
    }
    test_field_ref_spad_man__num_requested_ref_spads();
    fn test_field_ref_spad_man__ref_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_man__ref_location) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(ref_spad_man__ref_location)
            )
        );
    }
    test_field_ref_spad_man__ref_location();
    fn test_field_algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_plane_offset_kcps) as usize
                    - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_x_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_y_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_ref_spad_char__total_rate_target_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_char__total_rate_target_mcps) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(ref_spad_char__total_rate_target_mcps)
            )
        );
    }
    test_field_ref_spad_char__total_rate_target_mcps();
    fn test_field_algo__part_to_part_range_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__part_to_part_range_offset_mm) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(algo__part_to_part_range_offset_mm)
            )
        );
    }
    test_field_algo__part_to_part_range_offset_mm();
    fn test_field_mm_config__inner_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__inner_offset_mm) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(mm_config__inner_offset_mm)
            )
        );
    }
    test_field_mm_config__inner_offset_mm();
    fn test_field_mm_config__outer_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_customer_nvm_managed_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__outer_offset_mm) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_customer_nvm_managed_t),
                "::",
                stringify!(mm_config__outer_offset_mm)
            )
        );
    }
    test_field_mm_config__outer_offset_mm();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_static_config_t {
    dss_config__target_total_rate_mcps: u16,
    debug__ctrl: u8,
    test_mode__ctrl: u8,
    clk_gating__ctrl: u8,
    nvm_bist__ctrl: u8,
    nvm_bist__num_nvm_words: u8,
    nvm_bist__start_address: u8,
    host_if__status: u8,
    pad_i2c_hv__config: u8,
    pad_i2c_hv__extsup_config: u8,
    gpio_hv_pad__ctrl: u8,
    gpio_hv_mux__ctrl: u8,
    gpio__tio_hv_status: u8,
    gpio__fio_hv_status: u8,
    ana_config__spad_sel_pswidth: u8,
    ana_config__vcsel_pulse_width_offset: u8,
    ana_config__fast_osc__config_ctrl: u8,
    sigma_estimator__effective_pulse_width_ns: u8,
    sigma_estimator__effective_ambient_width_ns: u8,
    sigma_estimator__sigma_ref_mm: u8,
    algo__crosstalk_compensation_valid_height_mm: u8,
    spare_host_config__static_config_spare_0: u8,
    spare_host_config__static_config_spare_1: u8,
    algo__range_ignore_threshold_mcps: u16,
    algo__range_ignore_valid_height_mm: u8,
    algo__range_min_clip: u8,
    algo__consistency_check__tolerance: u8,
    spare_host_config__static_config_spare_2: u8,
    sd_config__reset_stages_msb: u8,
    sd_config__reset_stages_lsb: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_static_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_static_config_t>(),
        32usize,
        concat!("Size of: ", stringify!(VL53LX_static_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_static_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_static_config_t))
    );
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_debug__ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug__ctrl) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(debug__ctrl)
            )
        );
    }
    test_field_debug__ctrl();
    fn test_field_test_mode__ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).test_mode__ctrl) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(test_mode__ctrl)
            )
        );
    }
    test_field_test_mode__ctrl();
    fn test_field_clk_gating__ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clk_gating__ctrl) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(clk_gating__ctrl)
            )
        );
    }
    test_field_clk_gating__ctrl();
    fn test_field_nvm_bist__ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_bist__ctrl) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(nvm_bist__ctrl)
            )
        );
    }
    test_field_nvm_bist__ctrl();
    fn test_field_nvm_bist__num_nvm_words() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_bist__num_nvm_words) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(nvm_bist__num_nvm_words)
            )
        );
    }
    test_field_nvm_bist__num_nvm_words();
    fn test_field_nvm_bist__start_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_bist__start_address) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(nvm_bist__start_address)
            )
        );
    }
    test_field_nvm_bist__start_address();
    fn test_field_host_if__status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).host_if__status) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(host_if__status)
            )
        );
    }
    test_field_host_if__status();
    fn test_field_pad_i2c_hv__config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad_i2c_hv__config) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(pad_i2c_hv__config)
            )
        );
    }
    test_field_pad_i2c_hv__config();
    fn test_field_pad_i2c_hv__extsup_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad_i2c_hv__extsup_config) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(pad_i2c_hv__extsup_config)
            )
        );
    }
    test_field_pad_i2c_hv__extsup_config();
    fn test_field_gpio_hv_pad__ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpio_hv_pad__ctrl) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(gpio_hv_pad__ctrl)
            )
        );
    }
    test_field_gpio_hv_pad__ctrl();
    fn test_field_gpio_hv_mux__ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpio_hv_mux__ctrl) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(gpio_hv_mux__ctrl)
            )
        );
    }
    test_field_gpio_hv_mux__ctrl();
    fn test_field_gpio__tio_hv_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpio__tio_hv_status) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(gpio__tio_hv_status)
            )
        );
    }
    test_field_gpio__tio_hv_status();
    fn test_field_gpio__fio_hv_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpio__fio_hv_status) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(gpio__fio_hv_status)
            )
        );
    }
    test_field_gpio__fio_hv_status();
    fn test_field_ana_config__spad_sel_pswidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__spad_sel_pswidth) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(ana_config__spad_sel_pswidth)
            )
        );
    }
    test_field_ana_config__spad_sel_pswidth();
    fn test_field_ana_config__vcsel_pulse_width_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__vcsel_pulse_width_offset) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(ana_config__vcsel_pulse_width_offset)
            )
        );
    }
    test_field_ana_config__vcsel_pulse_width_offset();
    fn test_field_ana_config__fast_osc__config_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__fast_osc__config_ctrl) as usize
                    - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(ana_config__fast_osc__config_ctrl)
            )
        );
    }
    test_field_ana_config__fast_osc__config_ctrl();
    fn test_field_sigma_estimator__effective_pulse_width_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_estimator__effective_pulse_width_ns) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(sigma_estimator__effective_pulse_width_ns)
            )
        );
    }
    test_field_sigma_estimator__effective_pulse_width_ns();
    fn test_field_sigma_estimator__effective_ambient_width_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_estimator__effective_ambient_width_ns) as usize
                    - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(sigma_estimator__effective_ambient_width_ns)
            )
        );
    }
    test_field_sigma_estimator__effective_ambient_width_ns();
    fn test_field_sigma_estimator__sigma_ref_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_estimator__sigma_ref_mm) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(sigma_estimator__sigma_ref_mm)
            )
        );
    }
    test_field_sigma_estimator__sigma_ref_mm();
    fn test_field_algo__crosstalk_compensation_valid_height_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_valid_height_mm) as usize
                    - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_valid_height_mm)
            )
        );
    }
    test_field_algo__crosstalk_compensation_valid_height_mm();
    fn test_field_spare_host_config__static_config_spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spare_host_config__static_config_spare_0) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(spare_host_config__static_config_spare_0)
            )
        );
    }
    test_field_spare_host_config__static_config_spare_0();
    fn test_field_spare_host_config__static_config_spare_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spare_host_config__static_config_spare_1) as usize
                    - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(spare_host_config__static_config_spare_1)
            )
        );
    }
    test_field_spare_host_config__static_config_spare_1();
    fn test_field_algo__range_ignore_threshold_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__range_ignore_threshold_mcps) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(algo__range_ignore_threshold_mcps)
            )
        );
    }
    test_field_algo__range_ignore_threshold_mcps();
    fn test_field_algo__range_ignore_valid_height_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__range_ignore_valid_height_mm) as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(algo__range_ignore_valid_height_mm)
            )
        );
    }
    test_field_algo__range_ignore_valid_height_mm();
    fn test_field_algo__range_min_clip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__range_min_clip) as usize - ptr as usize
            },
            27usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(algo__range_min_clip)
            )
        );
    }
    test_field_algo__range_min_clip();
    fn test_field_algo__consistency_check__tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__consistency_check__tolerance) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(algo__consistency_check__tolerance)
            )
        );
    }
    test_field_algo__consistency_check__tolerance();
    fn test_field_spare_host_config__static_config_spare_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spare_host_config__static_config_spare_2) as usize
                    - ptr as usize
            },
            29usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(spare_host_config__static_config_spare_2)
            )
        );
    }
    test_field_spare_host_config__static_config_spare_2();
    fn test_field_sd_config__reset_stages_msb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__reset_stages_msb) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(sd_config__reset_stages_msb)
            )
        );
    }
    test_field_sd_config__reset_stages_msb();
    fn test_field_sd_config__reset_stages_lsb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__reset_stages_lsb) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_static_config_t),
                "::",
                stringify!(sd_config__reset_stages_lsb)
            )
        );
    }
    test_field_sd_config__reset_stages_lsb();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_general_config_t {
    gph_config__stream_count_update_value: u8,
    global_config__stream_divider: u8,
    system__interrupt_config_gpio: u8,
    cal_config__vcsel_start: u8,
    cal_config__repeat_rate: u16,
    global_config__vcsel_width: u8,
    phasecal_config__timeout_macrop: u8,
    phasecal_config__target: u8,
    phasecal_config__override: u8,
    dss_config__roi_mode_control: u8,
    system__thresh_rate_high: u16,
    system__thresh_rate_low: u16,
    dss_config__manual_effective_spads_select: u16,
    dss_config__manual_block_select: u8,
    dss_config__aperture_attenuation: u8,
    dss_config__max_spads_limit: u8,
    dss_config__min_spads_limit: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_general_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_general_config_t>(),
        22usize,
        concat!("Size of: ", stringify!(VL53LX_general_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_general_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_general_config_t))
    );
    fn test_field_gph_config__stream_count_update_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph_config__stream_count_update_value) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(gph_config__stream_count_update_value)
            )
        );
    }
    test_field_gph_config__stream_count_update_value();
    fn test_field_global_config__stream_divider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__stream_divider) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(global_config__stream_divider)
            )
        );
    }
    test_field_global_config__stream_divider();
    fn test_field_system__interrupt_config_gpio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__interrupt_config_gpio) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(system__interrupt_config_gpio)
            )
        );
    }
    test_field_system__interrupt_config_gpio();
    fn test_field_cal_config__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_config__vcsel_start) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(cal_config__vcsel_start)
            )
        );
    }
    test_field_cal_config__vcsel_start();
    fn test_field_cal_config__repeat_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_config__repeat_rate) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(cal_config__repeat_rate)
            )
        );
    }
    test_field_cal_config__repeat_rate();
    fn test_field_global_config__vcsel_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__vcsel_width) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(global_config__vcsel_width)
            )
        );
    }
    test_field_global_config__vcsel_width();
    fn test_field_phasecal_config__timeout_macrop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config__timeout_macrop) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(phasecal_config__timeout_macrop)
            )
        );
    }
    test_field_phasecal_config__timeout_macrop();
    fn test_field_phasecal_config__target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config__target) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(phasecal_config__target)
            )
        );
    }
    test_field_phasecal_config__target();
    fn test_field_phasecal_config__override() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config__override) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(phasecal_config__override)
            )
        );
    }
    test_field_phasecal_config__override();
    fn test_field_dss_config__roi_mode_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__roi_mode_control) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(dss_config__roi_mode_control)
            )
        );
    }
    test_field_dss_config__roi_mode_control();
    fn test_field_system__thresh_rate_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__thresh_rate_high) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(system__thresh_rate_high)
            )
        );
    }
    test_field_system__thresh_rate_high();
    fn test_field_system__thresh_rate_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__thresh_rate_low) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(system__thresh_rate_low)
            )
        );
    }
    test_field_system__thresh_rate_low();
    fn test_field_dss_config__manual_effective_spads_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__manual_effective_spads_select) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(dss_config__manual_effective_spads_select)
            )
        );
    }
    test_field_dss_config__manual_effective_spads_select();
    fn test_field_dss_config__manual_block_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__manual_block_select) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(dss_config__manual_block_select)
            )
        );
    }
    test_field_dss_config__manual_block_select();
    fn test_field_dss_config__aperture_attenuation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__aperture_attenuation) as usize
                    - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(dss_config__aperture_attenuation)
            )
        );
    }
    test_field_dss_config__aperture_attenuation();
    fn test_field_dss_config__max_spads_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__max_spads_limit) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(dss_config__max_spads_limit)
            )
        );
    }
    test_field_dss_config__max_spads_limit();
    fn test_field_dss_config__min_spads_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__min_spads_limit) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_general_config_t),
                "::",
                stringify!(dss_config__min_spads_limit)
            )
        );
    }
    test_field_dss_config__min_spads_limit();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_timing_config_t {
    mm_config__timeout_macrop_a_hi: u8,
    mm_config__timeout_macrop_a_lo: u8,
    mm_config__timeout_macrop_b_hi: u8,
    mm_config__timeout_macrop_b_lo: u8,
    range_config__timeout_macrop_a_hi: u8,
    range_config__timeout_macrop_a_lo: u8,
    range_config__vcsel_period_a: u8,
    range_config__timeout_macrop_b_hi: u8,
    range_config__timeout_macrop_b_lo: u8,
    range_config__vcsel_period_b: u8,
    range_config__sigma_thresh: u16,
    range_config__min_count_rate_rtn_limit_mcps: u16,
    range_config__valid_phase_low: u8,
    range_config__valid_phase_high: u8,
    system__intermeasurement_period: u32,
    system__fractional_enable: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_timing_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_timing_config_t>(),
        24usize,
        concat!("Size of: ", stringify!(VL53LX_timing_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_timing_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_timing_config_t))
    );
    fn test_field_mm_config__timeout_macrop_a_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__timeout_macrop_a_hi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(mm_config__timeout_macrop_a_hi)
            )
        );
    }
    test_field_mm_config__timeout_macrop_a_hi();
    fn test_field_mm_config__timeout_macrop_a_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__timeout_macrop_a_lo) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(mm_config__timeout_macrop_a_lo)
            )
        );
    }
    test_field_mm_config__timeout_macrop_a_lo();
    fn test_field_mm_config__timeout_macrop_b_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__timeout_macrop_b_hi) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(mm_config__timeout_macrop_b_hi)
            )
        );
    }
    test_field_mm_config__timeout_macrop_b_hi();
    fn test_field_mm_config__timeout_macrop_b_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__timeout_macrop_b_lo) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(mm_config__timeout_macrop_b_lo)
            )
        );
    }
    test_field_mm_config__timeout_macrop_b_lo();
    fn test_field_range_config__timeout_macrop_a_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__timeout_macrop_a_hi) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__timeout_macrop_a_hi)
            )
        );
    }
    test_field_range_config__timeout_macrop_a_hi();
    fn test_field_range_config__timeout_macrop_a_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__timeout_macrop_a_lo) as usize
                    - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__timeout_macrop_a_lo)
            )
        );
    }
    test_field_range_config__timeout_macrop_a_lo();
    fn test_field_range_config__vcsel_period_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__vcsel_period_a) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__vcsel_period_a)
            )
        );
    }
    test_field_range_config__vcsel_period_a();
    fn test_field_range_config__timeout_macrop_b_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__timeout_macrop_b_hi) as usize
                    - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__timeout_macrop_b_hi)
            )
        );
    }
    test_field_range_config__timeout_macrop_b_hi();
    fn test_field_range_config__timeout_macrop_b_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__timeout_macrop_b_lo) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__timeout_macrop_b_lo)
            )
        );
    }
    test_field_range_config__timeout_macrop_b_lo();
    fn test_field_range_config__vcsel_period_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__vcsel_period_b) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__vcsel_period_b)
            )
        );
    }
    test_field_range_config__vcsel_period_b();
    fn test_field_range_config__sigma_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__sigma_thresh) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__sigma_thresh)
            )
        );
    }
    test_field_range_config__sigma_thresh();
    fn test_field_range_config__min_count_rate_rtn_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__min_count_rate_rtn_limit_mcps) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__min_count_rate_rtn_limit_mcps)
            )
        );
    }
    test_field_range_config__min_count_rate_rtn_limit_mcps();
    fn test_field_range_config__valid_phase_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__valid_phase_low) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__valid_phase_low)
            )
        );
    }
    test_field_range_config__valid_phase_low();
    fn test_field_range_config__valid_phase_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config__valid_phase_high) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(range_config__valid_phase_high)
            )
        );
    }
    test_field_range_config__valid_phase_high();
    fn test_field_system__intermeasurement_period() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__intermeasurement_period) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(system__intermeasurement_period)
            )
        );
    }
    test_field_system__intermeasurement_period();
    fn test_field_system__fractional_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__fractional_enable) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_timing_config_t),
                "::",
                stringify!(system__fractional_enable)
            )
        );
    }
    test_field_system__fractional_enable();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_dynamic_config_t {
    system__grouped_parameter_hold_0: u8,
    system__thresh_high: u16,
    system__thresh_low: u16,
    system__enable_xtalk_per_quadrant: u8,
    system__seed_config: u8,
    sd_config__woi_sd0: u8,
    sd_config__woi_sd1: u8,
    sd_config__initial_phase_sd0: u8,
    sd_config__initial_phase_sd1: u8,
    system__grouped_parameter_hold_1: u8,
    sd_config__first_order_select: u8,
    sd_config__quantifier: u8,
    roi_config__user_roi_centre_spad: u8,
    roi_config__user_roi_requested_global_xy_size: u8,
    system__sequence_config: u8,
    system__grouped_parameter_hold: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_dynamic_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_dynamic_config_t>(),
        20usize,
        concat!("Size of: ", stringify!(VL53LX_dynamic_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_dynamic_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_dynamic_config_t))
    );
    fn test_field_system__grouped_parameter_hold_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__grouped_parameter_hold_0) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__grouped_parameter_hold_0)
            )
        );
    }
    test_field_system__grouped_parameter_hold_0();
    fn test_field_system__thresh_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__thresh_high) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__thresh_high)
            )
        );
    }
    test_field_system__thresh_high();
    fn test_field_system__thresh_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__thresh_low) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__thresh_low)
            )
        );
    }
    test_field_system__thresh_low();
    fn test_field_system__enable_xtalk_per_quadrant() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__enable_xtalk_per_quadrant) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__enable_xtalk_per_quadrant)
            )
        );
    }
    test_field_system__enable_xtalk_per_quadrant();
    fn test_field_system__seed_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__seed_config) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__seed_config)
            )
        );
    }
    test_field_system__seed_config();
    fn test_field_sd_config__woi_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__woi_sd0) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(sd_config__woi_sd0)
            )
        );
    }
    test_field_sd_config__woi_sd0();
    fn test_field_sd_config__woi_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__woi_sd1) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(sd_config__woi_sd1)
            )
        );
    }
    test_field_sd_config__woi_sd1();
    fn test_field_sd_config__initial_phase_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__initial_phase_sd0) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(sd_config__initial_phase_sd0)
            )
        );
    }
    test_field_sd_config__initial_phase_sd0();
    fn test_field_sd_config__initial_phase_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__initial_phase_sd1) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(sd_config__initial_phase_sd1)
            )
        );
    }
    test_field_sd_config__initial_phase_sd1();
    fn test_field_system__grouped_parameter_hold_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__grouped_parameter_hold_1) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__grouped_parameter_hold_1)
            )
        );
    }
    test_field_system__grouped_parameter_hold_1();
    fn test_field_sd_config__first_order_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__first_order_select) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(sd_config__first_order_select)
            )
        );
    }
    test_field_sd_config__first_order_select();
    fn test_field_sd_config__quantifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd_config__quantifier) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(sd_config__quantifier)
            )
        );
    }
    test_field_sd_config__quantifier();
    fn test_field_roi_config__user_roi_centre_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__user_roi_centre_spad) as usize
                    - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(roi_config__user_roi_centre_spad)
            )
        );
    }
    test_field_roi_config__user_roi_centre_spad();
    fn test_field_roi_config__user_roi_requested_global_xy_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__user_roi_requested_global_xy_size) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(roi_config__user_roi_requested_global_xy_size)
            )
        );
    }
    test_field_roi_config__user_roi_requested_global_xy_size();
    fn test_field_system__sequence_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__sequence_config) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__sequence_config)
            )
        );
    }
    test_field_system__sequence_config();
    fn test_field_system__grouped_parameter_hold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dynamic_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__grouped_parameter_hold) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dynamic_config_t),
                "::",
                stringify!(system__grouped_parameter_hold)
            )
        );
    }
    test_field_system__grouped_parameter_hold();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_system_control_t {
    power_management__go1_power_force: u8,
    system__stream_count_ctrl: u8,
    firmware__enable: u8,
    system__interrupt_clear: u8,
    system__mode_start: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_system_control_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_system_control_t>(),
        5usize,
        concat!("Size of: ", stringify!(VL53LX_system_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_system_control_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_system_control_t))
    );
    fn test_field_power_management__go1_power_force() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_control_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).power_management__go1_power_force) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_control_t),
                "::",
                stringify!(power_management__go1_power_force)
            )
        );
    }
    test_field_power_management__go1_power_force();
    fn test_field_system__stream_count_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_control_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__stream_count_ctrl) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_control_t),
                "::",
                stringify!(system__stream_count_ctrl)
            )
        );
    }
    test_field_system__stream_count_ctrl();
    fn test_field_firmware__enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_control_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__enable) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_control_t),
                "::",
                stringify!(firmware__enable)
            )
        );
    }
    test_field_firmware__enable();
    fn test_field_system__interrupt_clear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_control_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__interrupt_clear) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_control_t),
                "::",
                stringify!(system__interrupt_clear)
            )
        );
    }
    test_field_system__interrupt_clear();
    fn test_field_system__mode_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_control_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__mode_start) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_control_t),
                "::",
                stringify!(system__mode_start)
            )
        );
    }
    test_field_system__mode_start();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_system_results_t {
    result__interrupt_status: u8,
    result__range_status: u8,
    result__report_status: u8,
    result__stream_count: u8,
    result__dss_actual_effective_spads_sd0: u16,
    result__peak_signal_count_rate_mcps_sd0: u16,
    result__ambient_count_rate_mcps_sd0: u16,
    result__sigma_sd0: u16,
    result__phase_sd0: u16,
    result__final_crosstalk_corrected_range_mm_sd0: u16,
    result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0: u16,
    result__mm_inner_actual_effective_spads_sd0: u16,
    result__mm_outer_actual_effective_spads_sd0: u16,
    result__avg_signal_count_rate_mcps_sd0: u16,
    result__dss_actual_effective_spads_sd1: u16,
    result__peak_signal_count_rate_mcps_sd1: u16,
    result__ambient_count_rate_mcps_sd1: u16,
    result__sigma_sd1: u16,
    result__phase_sd1: u16,
    result__final_crosstalk_corrected_range_mm_sd1: u16,
    result__spare_0_sd1: u16,
    result__spare_1_sd1: u16,
    result__spare_2_sd1: u16,
    result__spare_3_sd1: u8,
    result__thresh_info: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_system_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_system_results_t>(),
        44usize,
        concat!("Size of: ", stringify!(VL53LX_system_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_system_results_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_system_results_t))
    );
    fn test_field_result__interrupt_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__interrupt_status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__interrupt_status)
            )
        );
    }
    test_field_result__interrupt_status();
    fn test_field_result__range_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__range_status) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__range_status)
            )
        );
    }
    test_field_result__range_status();
    fn test_field_result__report_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__report_status) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__report_status)
            )
        );
    }
    test_field_result__report_status();
    fn test_field_result__stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__stream_count) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__stream_count)
            )
        );
    }
    test_field_result__stream_count();
    fn test_field_result__dss_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__dss_actual_effective_spads_sd0) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__dss_actual_effective_spads_sd0)
            )
        );
    }
    test_field_result__dss_actual_effective_spads_sd0();
    fn test_field_result__peak_signal_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__peak_signal_count_rate_mcps_sd0) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__peak_signal_count_rate_mcps_sd0)
            )
        );
    }
    test_field_result__peak_signal_count_rate_mcps_sd0();
    fn test_field_result__ambient_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__ambient_count_rate_mcps_sd0) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__ambient_count_rate_mcps_sd0)
            )
        );
    }
    test_field_result__ambient_count_rate_mcps_sd0();
    fn test_field_result__sigma_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__sigma_sd0) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__sigma_sd0)
            )
        );
    }
    test_field_result__sigma_sd0();
    fn test_field_result__phase_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__phase_sd0) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__phase_sd0)
            )
        );
    }
    test_field_result__phase_sd0();
    fn test_field_result__final_crosstalk_corrected_range_mm_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__final_crosstalk_corrected_range_mm_sd0) as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__final_crosstalk_corrected_range_mm_sd0)
            )
        );
    }
    test_field_result__final_crosstalk_corrected_range_mm_sd0();
    fn test_field_result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
                ) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0)
            )
        );
    }
    test_field_result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0();
    fn test_field_result__mm_inner_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__mm_inner_actual_effective_spads_sd0) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__mm_inner_actual_effective_spads_sd0)
            )
        );
    }
    test_field_result__mm_inner_actual_effective_spads_sd0();
    fn test_field_result__mm_outer_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__mm_outer_actual_effective_spads_sd0) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__mm_outer_actual_effective_spads_sd0)
            )
        );
    }
    test_field_result__mm_outer_actual_effective_spads_sd0();
    fn test_field_result__avg_signal_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__avg_signal_count_rate_mcps_sd0) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__avg_signal_count_rate_mcps_sd0)
            )
        );
    }
    test_field_result__avg_signal_count_rate_mcps_sd0();
    fn test_field_result__dss_actual_effective_spads_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__dss_actual_effective_spads_sd1) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__dss_actual_effective_spads_sd1)
            )
        );
    }
    test_field_result__dss_actual_effective_spads_sd1();
    fn test_field_result__peak_signal_count_rate_mcps_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__peak_signal_count_rate_mcps_sd1) as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__peak_signal_count_rate_mcps_sd1)
            )
        );
    }
    test_field_result__peak_signal_count_rate_mcps_sd1();
    fn test_field_result__ambient_count_rate_mcps_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__ambient_count_rate_mcps_sd1) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__ambient_count_rate_mcps_sd1)
            )
        );
    }
    test_field_result__ambient_count_rate_mcps_sd1();
    fn test_field_result__sigma_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__sigma_sd1) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__sigma_sd1)
            )
        );
    }
    test_field_result__sigma_sd1();
    fn test_field_result__phase_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__phase_sd1) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__phase_sd1)
            )
        );
    }
    test_field_result__phase_sd1();
    fn test_field_result__final_crosstalk_corrected_range_mm_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__final_crosstalk_corrected_range_mm_sd1) as usize
                    - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__final_crosstalk_corrected_range_mm_sd1)
            )
        );
    }
    test_field_result__final_crosstalk_corrected_range_mm_sd1();
    fn test_field_result__spare_0_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__spare_0_sd1) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__spare_0_sd1)
            )
        );
    }
    test_field_result__spare_0_sd1();
    fn test_field_result__spare_1_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__spare_1_sd1) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__spare_1_sd1)
            )
        );
    }
    test_field_result__spare_1_sd1();
    fn test_field_result__spare_2_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__spare_2_sd1) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__spare_2_sd1)
            )
        );
    }
    test_field_result__spare_2_sd1();
    fn test_field_result__spare_3_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__spare_3_sd1) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__spare_3_sd1)
            )
        );
    }
    test_field_result__spare_3_sd1();
    fn test_field_result__thresh_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__thresh_info) as usize - ptr as usize
            },
            43usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_system_results_t),
                "::",
                stringify!(result__thresh_info)
            )
        );
    }
    test_field_result__thresh_info();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_core_results_t {
    result_core__ambient_window_events_sd0: u32,
    result_core__ranging_total_events_sd0: u32,
    result_core__signal_total_events_sd0: i32,
    result_core__total_periods_elapsed_sd0: u32,
    result_core__ambient_window_events_sd1: u32,
    result_core__ranging_total_events_sd1: u32,
    result_core__signal_total_events_sd1: i32,
    result_core__total_periods_elapsed_sd1: u32,
    result_core__spare_0: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_core_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_core_results_t>(),
        36usize,
        concat!("Size of: ", stringify!(VL53LX_core_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_core_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_core_results_t))
    );
    fn test_field_result_core__ambient_window_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__ambient_window_events_sd0) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__ambient_window_events_sd0)
            )
        );
    }
    test_field_result_core__ambient_window_events_sd0();
    fn test_field_result_core__ranging_total_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__ranging_total_events_sd0) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__ranging_total_events_sd0)
            )
        );
    }
    test_field_result_core__ranging_total_events_sd0();
    fn test_field_result_core__signal_total_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__signal_total_events_sd0) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__signal_total_events_sd0)
            )
        );
    }
    test_field_result_core__signal_total_events_sd0();
    fn test_field_result_core__total_periods_elapsed_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__total_periods_elapsed_sd0) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__total_periods_elapsed_sd0)
            )
        );
    }
    test_field_result_core__total_periods_elapsed_sd0();
    fn test_field_result_core__ambient_window_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__ambient_window_events_sd1) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__ambient_window_events_sd1)
            )
        );
    }
    test_field_result_core__ambient_window_events_sd1();
    fn test_field_result_core__ranging_total_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__ranging_total_events_sd1) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__ranging_total_events_sd1)
            )
        );
    }
    test_field_result_core__ranging_total_events_sd1();
    fn test_field_result_core__signal_total_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__signal_total_events_sd1) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__signal_total_events_sd1)
            )
        );
    }
    test_field_result_core__signal_total_events_sd1();
    fn test_field_result_core__total_periods_elapsed_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__total_periods_elapsed_sd1) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__total_periods_elapsed_sd1)
            )
        );
    }
    test_field_result_core__total_periods_elapsed_sd1();
    fn test_field_result_core__spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result_core__spare_0) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_core_results_t),
                "::",
                stringify!(result_core__spare_0)
            )
        );
    }
    test_field_result_core__spare_0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_debug_results_t {
    phasecal_result__reference_phase: u16,
    phasecal_result__vcsel_start: u8,
    ref_spad_char_result__num_actual_ref_spads: u8,
    ref_spad_char_result__ref_location: u8,
    vhv_result__coldboot_status: u8,
    vhv_result__search_result: u8,
    vhv_result__latest_setting: u8,
    result__osc_calibrate_val: u16,
    ana_config__powerdown_go1: u8,
    ana_config__ref_bg_ctrl: u8,
    ana_config__regdvdd1v2_ctrl: u8,
    ana_config__osc_slow_ctrl: u8,
    test_mode__status: u8,
    firmware__system_status: u8,
    firmware__mode_status: u8,
    firmware__secondary_mode_status: u8,
    firmware__cal_repeat_rate_counter: u16,
    gph__system__thresh_high: u16,
    gph__system__thresh_low: u16,
    gph__system__enable_xtalk_per_quadrant: u8,
    gph__spare_0: u8,
    gph__sd_config__woi_sd0: u8,
    gph__sd_config__woi_sd1: u8,
    gph__sd_config__initial_phase_sd0: u8,
    gph__sd_config__initial_phase_sd1: u8,
    gph__sd_config__first_order_select: u8,
    gph__sd_config__quantifier: u8,
    gph__roi_config__user_roi_centre_spad: u8,
    gph__roi_config__user_roi_requested_global_xy_size: u8,
    gph__system__sequence_config: u8,
    gph__gph_id: u8,
    system__interrupt_set: u8,
    interrupt_manager__enables: u8,
    interrupt_manager__clear: u8,
    interrupt_manager__status: u8,
    mcu_to_host_bank__wr_access_en: u8,
    power_management__go1_reset_status: u8,
    pad_startup_mode__value_ro: u8,
    pad_startup_mode__value_ctrl: u8,
    pll_period_us: u32,
    interrupt_scheduler__data_out: u32,
    nvm_bist__complete: u8,
    nvm_bist__status: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_debug_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_debug_results_t>(),
        56usize,
        concat!("Size of: ", stringify!(VL53LX_debug_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_debug_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_debug_results_t))
    );
    fn test_field_phasecal_result__reference_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__reference_phase) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(phasecal_result__reference_phase)
            )
        );
    }
    test_field_phasecal_result__reference_phase();
    fn test_field_phasecal_result__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__vcsel_start) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(phasecal_result__vcsel_start)
            )
        );
    }
    test_field_phasecal_result__vcsel_start();
    fn test_field_ref_spad_char_result__num_actual_ref_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_char_result__num_actual_ref_spads) as usize
                    - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(ref_spad_char_result__num_actual_ref_spads)
            )
        );
    }
    test_field_ref_spad_char_result__num_actual_ref_spads();
    fn test_field_ref_spad_char_result__ref_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_char_result__ref_location) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(ref_spad_char_result__ref_location)
            )
        );
    }
    test_field_ref_spad_char_result__ref_location();
    fn test_field_vhv_result__coldboot_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_result__coldboot_status) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(vhv_result__coldboot_status)
            )
        );
    }
    test_field_vhv_result__coldboot_status();
    fn test_field_vhv_result__search_result() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_result__search_result) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(vhv_result__search_result)
            )
        );
    }
    test_field_vhv_result__search_result();
    fn test_field_vhv_result__latest_setting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_result__latest_setting) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(vhv_result__latest_setting)
            )
        );
    }
    test_field_vhv_result__latest_setting();
    fn test_field_result__osc_calibrate_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__osc_calibrate_val) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(result__osc_calibrate_val)
            )
        );
    }
    test_field_result__osc_calibrate_val();
    fn test_field_ana_config__powerdown_go1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__powerdown_go1) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(ana_config__powerdown_go1)
            )
        );
    }
    test_field_ana_config__powerdown_go1();
    fn test_field_ana_config__ref_bg_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__ref_bg_ctrl) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(ana_config__ref_bg_ctrl)
            )
        );
    }
    test_field_ana_config__ref_bg_ctrl();
    fn test_field_ana_config__regdvdd1v2_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__regdvdd1v2_ctrl) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(ana_config__regdvdd1v2_ctrl)
            )
        );
    }
    test_field_ana_config__regdvdd1v2_ctrl();
    fn test_field_ana_config__osc_slow_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__osc_slow_ctrl) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(ana_config__osc_slow_ctrl)
            )
        );
    }
    test_field_ana_config__osc_slow_ctrl();
    fn test_field_test_mode__status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).test_mode__status) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(test_mode__status)
            )
        );
    }
    test_field_test_mode__status();
    fn test_field_firmware__system_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__system_status) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(firmware__system_status)
            )
        );
    }
    test_field_firmware__system_status();
    fn test_field_firmware__mode_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__mode_status) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(firmware__mode_status)
            )
        );
    }
    test_field_firmware__mode_status();
    fn test_field_firmware__secondary_mode_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__secondary_mode_status) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(firmware__secondary_mode_status)
            )
        );
    }
    test_field_firmware__secondary_mode_status();
    fn test_field_firmware__cal_repeat_rate_counter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__cal_repeat_rate_counter) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(firmware__cal_repeat_rate_counter)
            )
        );
    }
    test_field_firmware__cal_repeat_rate_counter();
    fn test_field_gph__system__thresh_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__thresh_high) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__system__thresh_high)
            )
        );
    }
    test_field_gph__system__thresh_high();
    fn test_field_gph__system__thresh_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__thresh_low) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__system__thresh_low)
            )
        );
    }
    test_field_gph__system__thresh_low();
    fn test_field_gph__system__enable_xtalk_per_quadrant() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__enable_xtalk_per_quadrant) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__system__enable_xtalk_per_quadrant)
            )
        );
    }
    test_field_gph__system__enable_xtalk_per_quadrant();
    fn test_field_gph__spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__spare_0) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__spare_0)
            )
        );
    }
    test_field_gph__spare_0();
    fn test_field_gph__sd_config__woi_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__sd_config__woi_sd0) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__sd_config__woi_sd0)
            )
        );
    }
    test_field_gph__sd_config__woi_sd0();
    fn test_field_gph__sd_config__woi_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__sd_config__woi_sd1) as usize - ptr as usize
            },
            27usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__sd_config__woi_sd1)
            )
        );
    }
    test_field_gph__sd_config__woi_sd1();
    fn test_field_gph__sd_config__initial_phase_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__sd_config__initial_phase_sd0) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__sd_config__initial_phase_sd0)
            )
        );
    }
    test_field_gph__sd_config__initial_phase_sd0();
    fn test_field_gph__sd_config__initial_phase_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__sd_config__initial_phase_sd1) as usize
                    - ptr as usize
            },
            29usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__sd_config__initial_phase_sd1)
            )
        );
    }
    test_field_gph__sd_config__initial_phase_sd1();
    fn test_field_gph__sd_config__first_order_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__sd_config__first_order_select) as usize
                    - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__sd_config__first_order_select)
            )
        );
    }
    test_field_gph__sd_config__first_order_select();
    fn test_field_gph__sd_config__quantifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__sd_config__quantifier) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__sd_config__quantifier)
            )
        );
    }
    test_field_gph__sd_config__quantifier();
    fn test_field_gph__roi_config__user_roi_centre_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__roi_config__user_roi_centre_spad) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__roi_config__user_roi_centre_spad)
            )
        );
    }
    test_field_gph__roi_config__user_roi_centre_spad();
    fn test_field_gph__roi_config__user_roi_requested_global_xy_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__roi_config__user_roi_requested_global_xy_size)
                    as usize
                    - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__roi_config__user_roi_requested_global_xy_size)
            )
        );
    }
    test_field_gph__roi_config__user_roi_requested_global_xy_size();
    fn test_field_gph__system__sequence_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__sequence_config) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__system__sequence_config)
            )
        );
    }
    test_field_gph__system__sequence_config();
    fn test_field_gph__gph_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__gph_id) as usize - ptr as usize
            },
            35usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(gph__gph_id)
            )
        );
    }
    test_field_gph__gph_id();
    fn test_field_system__interrupt_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).system__interrupt_set) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(system__interrupt_set)
            )
        );
    }
    test_field_system__interrupt_set();
    fn test_field_interrupt_manager__enables() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_manager__enables) as usize - ptr as usize
            },
            37usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(interrupt_manager__enables)
            )
        );
    }
    test_field_interrupt_manager__enables();
    fn test_field_interrupt_manager__clear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_manager__clear) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(interrupt_manager__clear)
            )
        );
    }
    test_field_interrupt_manager__clear();
    fn test_field_interrupt_manager__status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_manager__status) as usize - ptr as usize
            },
            39usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(interrupt_manager__status)
            )
        );
    }
    test_field_interrupt_manager__status();
    fn test_field_mcu_to_host_bank__wr_access_en() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mcu_to_host_bank__wr_access_en) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(mcu_to_host_bank__wr_access_en)
            )
        );
    }
    test_field_mcu_to_host_bank__wr_access_en();
    fn test_field_power_management__go1_reset_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).power_management__go1_reset_status) as usize
                    - ptr as usize
            },
            41usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(power_management__go1_reset_status)
            )
        );
    }
    test_field_power_management__go1_reset_status();
    fn test_field_pad_startup_mode__value_ro() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad_startup_mode__value_ro) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(pad_startup_mode__value_ro)
            )
        );
    }
    test_field_pad_startup_mode__value_ro();
    fn test_field_pad_startup_mode__value_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad_startup_mode__value_ctrl) as usize - ptr as usize
            },
            43usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(pad_startup_mode__value_ctrl)
            )
        );
    }
    test_field_pad_startup_mode__value_ctrl();
    fn test_field_pll_period_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pll_period_us) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(pll_period_us)
            )
        );
    }
    test_field_pll_period_us();
    fn test_field_interrupt_scheduler__data_out() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_scheduler__data_out) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(interrupt_scheduler__data_out)
            )
        );
    }
    test_field_interrupt_scheduler__data_out();
    fn test_field_nvm_bist__complete() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_bist__complete) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(nvm_bist__complete)
            )
        );
    }
    test_field_nvm_bist__complete();
    fn test_field_nvm_bist__status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_debug_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_bist__status) as usize - ptr as usize
            },
            53usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_debug_results_t),
                "::",
                stringify!(nvm_bist__status)
            )
        );
    }
    test_field_nvm_bist__status();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_nvm_copy_data_t {
    identification__model_id: u8,
    identification__module_type: u8,
    identification__revision_id: u8,
    identification__module_id: u16,
    ana_config__fast_osc__trim_max: u8,
    ana_config__fast_osc__freq_set: u8,
    ana_config__vcsel_trim: u8,
    ana_config__vcsel_selion: u8,
    ana_config__vcsel_selion_max: u8,
    protected_laser_safety__lock_bit: u8,
    laser_safety__key: u8,
    laser_safety__key_ro: u8,
    laser_safety__clip: u8,
    laser_safety__mult: u8,
    global_config__spad_enables_rtn_0: u8,
    global_config__spad_enables_rtn_1: u8,
    global_config__spad_enables_rtn_2: u8,
    global_config__spad_enables_rtn_3: u8,
    global_config__spad_enables_rtn_4: u8,
    global_config__spad_enables_rtn_5: u8,
    global_config__spad_enables_rtn_6: u8,
    global_config__spad_enables_rtn_7: u8,
    global_config__spad_enables_rtn_8: u8,
    global_config__spad_enables_rtn_9: u8,
    global_config__spad_enables_rtn_10: u8,
    global_config__spad_enables_rtn_11: u8,
    global_config__spad_enables_rtn_12: u8,
    global_config__spad_enables_rtn_13: u8,
    global_config__spad_enables_rtn_14: u8,
    global_config__spad_enables_rtn_15: u8,
    global_config__spad_enables_rtn_16: u8,
    global_config__spad_enables_rtn_17: u8,
    global_config__spad_enables_rtn_18: u8,
    global_config__spad_enables_rtn_19: u8,
    global_config__spad_enables_rtn_20: u8,
    global_config__spad_enables_rtn_21: u8,
    global_config__spad_enables_rtn_22: u8,
    global_config__spad_enables_rtn_23: u8,
    global_config__spad_enables_rtn_24: u8,
    global_config__spad_enables_rtn_25: u8,
    global_config__spad_enables_rtn_26: u8,
    global_config__spad_enables_rtn_27: u8,
    global_config__spad_enables_rtn_28: u8,
    global_config__spad_enables_rtn_29: u8,
    global_config__spad_enables_rtn_30: u8,
    global_config__spad_enables_rtn_31: u8,
    roi_config__mode_roi_centre_spad: u8,
    roi_config__mode_roi_xy_size: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_nvm_copy_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_nvm_copy_data_t>(),
        50usize,
        concat!("Size of: ", stringify!(VL53LX_nvm_copy_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_nvm_copy_data_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_nvm_copy_data_t))
    );
    fn test_field_identification__model_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identification__model_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(identification__model_id)
            )
        );
    }
    test_field_identification__model_id();
    fn test_field_identification__module_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identification__module_type) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(identification__module_type)
            )
        );
    }
    test_field_identification__module_type();
    fn test_field_identification__revision_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identification__revision_id) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(identification__revision_id)
            )
        );
    }
    test_field_identification__revision_id();
    fn test_field_identification__module_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).identification__module_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(identification__module_id)
            )
        );
    }
    test_field_identification__module_id();
    fn test_field_ana_config__fast_osc__trim_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__fast_osc__trim_max) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(ana_config__fast_osc__trim_max)
            )
        );
    }
    test_field_ana_config__fast_osc__trim_max();
    fn test_field_ana_config__fast_osc__freq_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__fast_osc__freq_set) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(ana_config__fast_osc__freq_set)
            )
        );
    }
    test_field_ana_config__fast_osc__freq_set();
    fn test_field_ana_config__vcsel_trim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__vcsel_trim) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(ana_config__vcsel_trim)
            )
        );
    }
    test_field_ana_config__vcsel_trim();
    fn test_field_ana_config__vcsel_selion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__vcsel_selion) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(ana_config__vcsel_selion)
            )
        );
    }
    test_field_ana_config__vcsel_selion();
    fn test_field_ana_config__vcsel_selion_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ana_config__vcsel_selion_max) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(ana_config__vcsel_selion_max)
            )
        );
    }
    test_field_ana_config__vcsel_selion_max();
    fn test_field_protected_laser_safety__lock_bit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).protected_laser_safety__lock_bit) as usize
                    - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(protected_laser_safety__lock_bit)
            )
        );
    }
    test_field_protected_laser_safety__lock_bit();
    fn test_field_laser_safety__key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).laser_safety__key) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(laser_safety__key)
            )
        );
    }
    test_field_laser_safety__key();
    fn test_field_laser_safety__key_ro() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).laser_safety__key_ro) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(laser_safety__key_ro)
            )
        );
    }
    test_field_laser_safety__key_ro();
    fn test_field_laser_safety__clip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).laser_safety__clip) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(laser_safety__clip)
            )
        );
    }
    test_field_laser_safety__clip();
    fn test_field_laser_safety__mult() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).laser_safety__mult) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(laser_safety__mult)
            )
        );
    }
    test_field_laser_safety__mult();
    fn test_field_global_config__spad_enables_rtn_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_0) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_0)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_0();
    fn test_field_global_config__spad_enables_rtn_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_1) as usize
                    - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_1)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_1();
    fn test_field_global_config__spad_enables_rtn_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_2) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_2)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_2();
    fn test_field_global_config__spad_enables_rtn_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_3) as usize
                    - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_3)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_3();
    fn test_field_global_config__spad_enables_rtn_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_4) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_4)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_4();
    fn test_field_global_config__spad_enables_rtn_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_5) as usize
                    - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_5)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_5();
    fn test_field_global_config__spad_enables_rtn_6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_6) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_6)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_6();
    fn test_field_global_config__spad_enables_rtn_7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_7) as usize
                    - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_7)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_7();
    fn test_field_global_config__spad_enables_rtn_8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_8) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_8)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_8();
    fn test_field_global_config__spad_enables_rtn_9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_9) as usize
                    - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_9)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_9();
    fn test_field_global_config__spad_enables_rtn_10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_10) as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_10)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_10();
    fn test_field_global_config__spad_enables_rtn_11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_11) as usize
                    - ptr as usize
            },
            27usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_11)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_11();
    fn test_field_global_config__spad_enables_rtn_12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_12) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_12)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_12();
    fn test_field_global_config__spad_enables_rtn_13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_13) as usize
                    - ptr as usize
            },
            29usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_13)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_13();
    fn test_field_global_config__spad_enables_rtn_14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_14) as usize
                    - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_14)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_14();
    fn test_field_global_config__spad_enables_rtn_15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_15) as usize
                    - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_15)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_15();
    fn test_field_global_config__spad_enables_rtn_16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_16) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_16)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_16();
    fn test_field_global_config__spad_enables_rtn_17() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_17) as usize
                    - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_17)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_17();
    fn test_field_global_config__spad_enables_rtn_18() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_18) as usize
                    - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_18)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_18();
    fn test_field_global_config__spad_enables_rtn_19() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_19) as usize
                    - ptr as usize
            },
            35usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_19)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_19();
    fn test_field_global_config__spad_enables_rtn_20() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_20) as usize
                    - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_20)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_20();
    fn test_field_global_config__spad_enables_rtn_21() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_21) as usize
                    - ptr as usize
            },
            37usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_21)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_21();
    fn test_field_global_config__spad_enables_rtn_22() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_22) as usize
                    - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_22)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_22();
    fn test_field_global_config__spad_enables_rtn_23() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_23) as usize
                    - ptr as usize
            },
            39usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_23)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_23();
    fn test_field_global_config__spad_enables_rtn_24() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_24) as usize
                    - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_24)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_24();
    fn test_field_global_config__spad_enables_rtn_25() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_25) as usize
                    - ptr as usize
            },
            41usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_25)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_25();
    fn test_field_global_config__spad_enables_rtn_26() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_26) as usize
                    - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_26)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_26();
    fn test_field_global_config__spad_enables_rtn_27() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_27) as usize
                    - ptr as usize
            },
            43usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_27)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_27();
    fn test_field_global_config__spad_enables_rtn_28() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_28) as usize
                    - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_28)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_28();
    fn test_field_global_config__spad_enables_rtn_29() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_29) as usize
                    - ptr as usize
            },
            45usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_29)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_29();
    fn test_field_global_config__spad_enables_rtn_30() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_30) as usize
                    - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_30)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_30();
    fn test_field_global_config__spad_enables_rtn_31() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_rtn_31) as usize
                    - ptr as usize
            },
            47usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(global_config__spad_enables_rtn_31)
            )
        );
    }
    test_field_global_config__spad_enables_rtn_31();
    fn test_field_roi_config__mode_roi_centre_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__mode_roi_centre_spad) as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(roi_config__mode_roi_centre_spad)
            )
        );
    }
    test_field_roi_config__mode_roi_centre_spad();
    fn test_field_roi_config__mode_roi_xy_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_nvm_copy_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__mode_roi_xy_size) as usize - ptr as usize
            },
            49usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_nvm_copy_data_t),
                "::",
                stringify!(roi_config__mode_roi_xy_size)
            )
        );
    }
    test_field_roi_config__mode_roi_xy_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_prev_shadow_system_results_t {
    prev_shadow_result__interrupt_status: u8,
    prev_shadow_result__range_status: u8,
    prev_shadow_result__report_status: u8,
    prev_shadow_result__stream_count: u8,
    prev_shadow_result__dss_actual_effective_spads_sd0: u16,
    prev_shadow_result__peak_signal_count_rate_mcps_sd0: u16,
    prev_shadow_result__ambient_count_rate_mcps_sd0: u16,
    prev_shadow_result__sigma_sd0: u16,
    prev_shadow_result__phase_sd0: u16,
    prev_shadow_result__final_crosstalk_corrected_range_mm_sd0: u16,
    psr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0: u16,
    prev_shadow_result__mm_inner_actual_effective_spads_sd0: u16,
    prev_shadow_result__mm_outer_actual_effective_spads_sd0: u16,
    prev_shadow_result__avg_signal_count_rate_mcps_sd0: u16,
    prev_shadow_result__dss_actual_effective_spads_sd1: u16,
    prev_shadow_result__peak_signal_count_rate_mcps_sd1: u16,
    prev_shadow_result__ambient_count_rate_mcps_sd1: u16,
    prev_shadow_result__sigma_sd1: u16,
    prev_shadow_result__phase_sd1: u16,
    prev_shadow_result__final_crosstalk_corrected_range_mm_sd1: u16,
    prev_shadow_result__spare_0_sd1: u16,
    prev_shadow_result__spare_1_sd1: u16,
    prev_shadow_result__spare_2_sd1: u16,
    prev_shadow_result__spare_3_sd1: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_prev_shadow_system_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_prev_shadow_system_results_t>(),
        44usize,
        concat!("Size of: ", stringify!(VL53LX_prev_shadow_system_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_prev_shadow_system_results_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_prev_shadow_system_results_t)
        )
    );
    fn test_field_prev_shadow_result__interrupt_status() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__interrupt_status) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__interrupt_status)
            )
        );
    }
    test_field_prev_shadow_result__interrupt_status();
    fn test_field_prev_shadow_result__range_status() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__range_status) as usize
                    - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__range_status)
            )
        );
    }
    test_field_prev_shadow_result__range_status();
    fn test_field_prev_shadow_result__report_status() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__report_status) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__report_status)
            )
        );
    }
    test_field_prev_shadow_result__report_status();
    fn test_field_prev_shadow_result__stream_count() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__stream_count) as usize
                    - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__stream_count)
            )
        );
    }
    test_field_prev_shadow_result__stream_count();
    fn test_field_prev_shadow_result__dss_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__dss_actual_effective_spads_sd0)
                    as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__dss_actual_effective_spads_sd0)
            )
        );
    }
    test_field_prev_shadow_result__dss_actual_effective_spads_sd0();
    fn test_field_prev_shadow_result__peak_signal_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__peak_signal_count_rate_mcps_sd0)
                    as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__peak_signal_count_rate_mcps_sd0)
            )
        );
    }
    test_field_prev_shadow_result__peak_signal_count_rate_mcps_sd0();
    fn test_field_prev_shadow_result__ambient_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__ambient_count_rate_mcps_sd0)
                    as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__ambient_count_rate_mcps_sd0)
            )
        );
    }
    test_field_prev_shadow_result__ambient_count_rate_mcps_sd0();
    fn test_field_prev_shadow_result__sigma_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__sigma_sd0) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__sigma_sd0)
            )
        );
    }
    test_field_prev_shadow_result__sigma_sd0();
    fn test_field_prev_shadow_result__phase_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__phase_sd0) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__phase_sd0)
            )
        );
    }
    test_field_prev_shadow_result__phase_sd0();
    fn test_field_prev_shadow_result__final_crosstalk_corrected_range_mm_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).prev_shadow_result__final_crosstalk_corrected_range_mm_sd0
                ) as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__final_crosstalk_corrected_range_mm_sd0)
            )
        );
    }
    test_field_prev_shadow_result__final_crosstalk_corrected_range_mm_sd0();
    fn test_field_psr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).psr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
                ) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(psr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0)
            )
        );
    }
    test_field_psr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0();
    fn test_field_prev_shadow_result__mm_inner_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__mm_inner_actual_effective_spads_sd0)
                    as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__mm_inner_actual_effective_spads_sd0)
            )
        );
    }
    test_field_prev_shadow_result__mm_inner_actual_effective_spads_sd0();
    fn test_field_prev_shadow_result__mm_outer_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__mm_outer_actual_effective_spads_sd0)
                    as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__mm_outer_actual_effective_spads_sd0)
            )
        );
    }
    test_field_prev_shadow_result__mm_outer_actual_effective_spads_sd0();
    fn test_field_prev_shadow_result__avg_signal_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__avg_signal_count_rate_mcps_sd0)
                    as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__avg_signal_count_rate_mcps_sd0)
            )
        );
    }
    test_field_prev_shadow_result__avg_signal_count_rate_mcps_sd0();
    fn test_field_prev_shadow_result__dss_actual_effective_spads_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__dss_actual_effective_spads_sd1)
                    as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__dss_actual_effective_spads_sd1)
            )
        );
    }
    test_field_prev_shadow_result__dss_actual_effective_spads_sd1();
    fn test_field_prev_shadow_result__peak_signal_count_rate_mcps_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__peak_signal_count_rate_mcps_sd1)
                    as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__peak_signal_count_rate_mcps_sd1)
            )
        );
    }
    test_field_prev_shadow_result__peak_signal_count_rate_mcps_sd1();
    fn test_field_prev_shadow_result__ambient_count_rate_mcps_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__ambient_count_rate_mcps_sd1)
                    as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__ambient_count_rate_mcps_sd1)
            )
        );
    }
    test_field_prev_shadow_result__ambient_count_rate_mcps_sd1();
    fn test_field_prev_shadow_result__sigma_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__sigma_sd1) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__sigma_sd1)
            )
        );
    }
    test_field_prev_shadow_result__sigma_sd1();
    fn test_field_prev_shadow_result__phase_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__phase_sd1) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__phase_sd1)
            )
        );
    }
    test_field_prev_shadow_result__phase_sd1();
    fn test_field_prev_shadow_result__final_crosstalk_corrected_range_mm_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).prev_shadow_result__final_crosstalk_corrected_range_mm_sd1
                ) as usize
                    - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__final_crosstalk_corrected_range_mm_sd1)
            )
        );
    }
    test_field_prev_shadow_result__final_crosstalk_corrected_range_mm_sd1();
    fn test_field_prev_shadow_result__spare_0_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__spare_0_sd1) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__spare_0_sd1)
            )
        );
    }
    test_field_prev_shadow_result__spare_0_sd1();
    fn test_field_prev_shadow_result__spare_1_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__spare_1_sd1) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__spare_1_sd1)
            )
        );
    }
    test_field_prev_shadow_result__spare_1_sd1();
    fn test_field_prev_shadow_result__spare_2_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__spare_2_sd1) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__spare_2_sd1)
            )
        );
    }
    test_field_prev_shadow_result__spare_2_sd1();
    fn test_field_prev_shadow_result__spare_3_sd1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_prev_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result__spare_3_sd1) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_system_results_t),
                "::",
                stringify!(prev_shadow_result__spare_3_sd1)
            )
        );
    }
    test_field_prev_shadow_result__spare_3_sd1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_prev_shadow_core_results_t {
    prev_shadow_result_core__ambient_window_events_sd0: u32,
    prev_shadow_result_core__ranging_total_events_sd0: u32,
    prev_shadow_result_core__signal_total_events_sd0: i32,
    prev_shadow_result_core__total_periods_elapsed_sd0: u32,
    prev_shadow_result_core__ambient_window_events_sd1: u32,
    prev_shadow_result_core__ranging_total_events_sd1: u32,
    prev_shadow_result_core__signal_total_events_sd1: i32,
    prev_shadow_result_core__total_periods_elapsed_sd1: u32,
    prev_shadow_result_core__spare_0: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_prev_shadow_core_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_prev_shadow_core_results_t>(),
        36usize,
        concat!("Size of: ", stringify!(VL53LX_prev_shadow_core_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_prev_shadow_core_results_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_prev_shadow_core_results_t)
        )
    );
    fn test_field_prev_shadow_result_core__ambient_window_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__ambient_window_events_sd0)
                    as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__ambient_window_events_sd0)
            )
        );
    }
    test_field_prev_shadow_result_core__ambient_window_events_sd0();
    fn test_field_prev_shadow_result_core__ranging_total_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__ranging_total_events_sd0)
                    as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__ranging_total_events_sd0)
            )
        );
    }
    test_field_prev_shadow_result_core__ranging_total_events_sd0();
    fn test_field_prev_shadow_result_core__signal_total_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__signal_total_events_sd0)
                    as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__signal_total_events_sd0)
            )
        );
    }
    test_field_prev_shadow_result_core__signal_total_events_sd0();
    fn test_field_prev_shadow_result_core__total_periods_elapsed_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__total_periods_elapsed_sd0)
                    as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__total_periods_elapsed_sd0)
            )
        );
    }
    test_field_prev_shadow_result_core__total_periods_elapsed_sd0();
    fn test_field_prev_shadow_result_core__ambient_window_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__ambient_window_events_sd1)
                    as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__ambient_window_events_sd1)
            )
        );
    }
    test_field_prev_shadow_result_core__ambient_window_events_sd1();
    fn test_field_prev_shadow_result_core__ranging_total_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__ranging_total_events_sd1)
                    as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__ranging_total_events_sd1)
            )
        );
    }
    test_field_prev_shadow_result_core__ranging_total_events_sd1();
    fn test_field_prev_shadow_result_core__signal_total_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__signal_total_events_sd1)
                    as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__signal_total_events_sd1)
            )
        );
    }
    test_field_prev_shadow_result_core__signal_total_events_sd1();
    fn test_field_prev_shadow_result_core__total_periods_elapsed_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__total_periods_elapsed_sd1)
                    as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__total_periods_elapsed_sd1)
            )
        );
    }
    test_field_prev_shadow_result_core__total_periods_elapsed_sd1();
    fn test_field_prev_shadow_result_core__spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_prev_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_shadow_result_core__spare_0) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_prev_shadow_core_results_t),
                "::",
                stringify!(prev_shadow_result_core__spare_0)
            )
        );
    }
    test_field_prev_shadow_result_core__spare_0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_patch_debug_t {
    result__debug_status: u8,
    result__debug_stage: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_patch_debug_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_patch_debug_t>(),
        2usize,
        concat!("Size of: ", stringify!(VL53LX_patch_debug_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_patch_debug_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_patch_debug_t))
    );
    fn test_field_result__debug_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_debug_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__debug_status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_debug_t),
                "::",
                stringify!(result__debug_status)
            )
        );
    }
    test_field_result__debug_status();
    fn test_field_result__debug_stage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_debug_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__debug_stage) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_debug_t),
                "::",
                stringify!(result__debug_stage)
            )
        );
    }
    test_field_result__debug_stage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_gph_general_config_t {
    gph__system__thresh_rate_high: u16,
    gph__system__thresh_rate_low: u16,
    gph__system__interrupt_config_gpio: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_gph_general_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_gph_general_config_t>(),
        6usize,
        concat!("Size of: ", stringify!(VL53LX_gph_general_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_gph_general_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_gph_general_config_t))
    );
    fn test_field_gph__system__thresh_rate_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__thresh_rate_high) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_general_config_t),
                "::",
                stringify!(gph__system__thresh_rate_high)
            )
        );
    }
    test_field_gph__system__thresh_rate_high();
    fn test_field_gph__system__thresh_rate_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__thresh_rate_low) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_general_config_t),
                "::",
                stringify!(gph__system__thresh_rate_low)
            )
        );
    }
    test_field_gph__system__thresh_rate_low();
    fn test_field_gph__system__interrupt_config_gpio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_general_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__system__interrupt_config_gpio) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_general_config_t),
                "::",
                stringify!(gph__system__interrupt_config_gpio)
            )
        );
    }
    test_field_gph__system__interrupt_config_gpio();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_gph_static_config_t {
    gph__dss_config__roi_mode_control: u8,
    gph__dss_config__manual_effective_spads_select: u16,
    gph__dss_config__manual_block_select: u8,
    gph__dss_config__max_spads_limit: u8,
    gph__dss_config__min_spads_limit: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_gph_static_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_gph_static_config_t>(),
        8usize,
        concat!("Size of: ", stringify!(VL53LX_gph_static_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_gph_static_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_gph_static_config_t))
    );
    fn test_field_gph__dss_config__roi_mode_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__dss_config__roi_mode_control) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_static_config_t),
                "::",
                stringify!(gph__dss_config__roi_mode_control)
            )
        );
    }
    test_field_gph__dss_config__roi_mode_control();
    fn test_field_gph__dss_config__manual_effective_spads_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__dss_config__manual_effective_spads_select) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_static_config_t),
                "::",
                stringify!(gph__dss_config__manual_effective_spads_select)
            )
        );
    }
    test_field_gph__dss_config__manual_effective_spads_select();
    fn test_field_gph__dss_config__manual_block_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__dss_config__manual_block_select) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_static_config_t),
                "::",
                stringify!(gph__dss_config__manual_block_select)
            )
        );
    }
    test_field_gph__dss_config__manual_block_select();
    fn test_field_gph__dss_config__max_spads_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__dss_config__max_spads_limit) as usize
                    - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_static_config_t),
                "::",
                stringify!(gph__dss_config__max_spads_limit)
            )
        );
    }
    test_field_gph__dss_config__max_spads_limit();
    fn test_field_gph__dss_config__min_spads_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_static_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__dss_config__min_spads_limit) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_static_config_t),
                "::",
                stringify!(gph__dss_config__min_spads_limit)
            )
        );
    }
    test_field_gph__dss_config__min_spads_limit();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_gph_timing_config_t {
    gph__mm_config__timeout_macrop_a_hi: u8,
    gph__mm_config__timeout_macrop_a_lo: u8,
    gph__mm_config__timeout_macrop_b_hi: u8,
    gph__mm_config__timeout_macrop_b_lo: u8,
    gph__range_config__timeout_macrop_a_hi: u8,
    gph__range_config__timeout_macrop_a_lo: u8,
    gph__range_config__vcsel_period_a: u8,
    gph__range_config__vcsel_period_b: u8,
    gph__range_config__timeout_macrop_b_hi: u8,
    gph__range_config__timeout_macrop_b_lo: u8,
    gph__range_config__sigma_thresh: u16,
    gph__range_config__min_count_rate_rtn_limit_mcps: u16,
    gph__range_config__valid_phase_low: u8,
    gph__range_config__valid_phase_high: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_gph_timing_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_gph_timing_config_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_gph_timing_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_gph_timing_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_gph_timing_config_t))
    );
    fn test_field_gph__mm_config__timeout_macrop_a_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__mm_config__timeout_macrop_a_hi) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__mm_config__timeout_macrop_a_hi)
            )
        );
    }
    test_field_gph__mm_config__timeout_macrop_a_hi();
    fn test_field_gph__mm_config__timeout_macrop_a_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__mm_config__timeout_macrop_a_lo) as usize
                    - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__mm_config__timeout_macrop_a_lo)
            )
        );
    }
    test_field_gph__mm_config__timeout_macrop_a_lo();
    fn test_field_gph__mm_config__timeout_macrop_b_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__mm_config__timeout_macrop_b_hi) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__mm_config__timeout_macrop_b_hi)
            )
        );
    }
    test_field_gph__mm_config__timeout_macrop_b_hi();
    fn test_field_gph__mm_config__timeout_macrop_b_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__mm_config__timeout_macrop_b_lo) as usize
                    - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__mm_config__timeout_macrop_b_lo)
            )
        );
    }
    test_field_gph__mm_config__timeout_macrop_b_lo();
    fn test_field_gph__range_config__timeout_macrop_a_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__timeout_macrop_a_hi) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__timeout_macrop_a_hi)
            )
        );
    }
    test_field_gph__range_config__timeout_macrop_a_hi();
    fn test_field_gph__range_config__timeout_macrop_a_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__timeout_macrop_a_lo) as usize
                    - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__timeout_macrop_a_lo)
            )
        );
    }
    test_field_gph__range_config__timeout_macrop_a_lo();
    fn test_field_gph__range_config__vcsel_period_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__vcsel_period_a) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__vcsel_period_a)
            )
        );
    }
    test_field_gph__range_config__vcsel_period_a();
    fn test_field_gph__range_config__vcsel_period_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__vcsel_period_b) as usize
                    - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__vcsel_period_b)
            )
        );
    }
    test_field_gph__range_config__vcsel_period_b();
    fn test_field_gph__range_config__timeout_macrop_b_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__timeout_macrop_b_hi) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__timeout_macrop_b_hi)
            )
        );
    }
    test_field_gph__range_config__timeout_macrop_b_hi();
    fn test_field_gph__range_config__timeout_macrop_b_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__timeout_macrop_b_lo) as usize
                    - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__timeout_macrop_b_lo)
            )
        );
    }
    test_field_gph__range_config__timeout_macrop_b_lo();
    fn test_field_gph__range_config__sigma_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__sigma_thresh) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__sigma_thresh)
            )
        );
    }
    test_field_gph__range_config__sigma_thresh();
    fn test_field_gph__range_config__min_count_rate_rtn_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__min_count_rate_rtn_limit_mcps)
                    as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__min_count_rate_rtn_limit_mcps)
            )
        );
    }
    test_field_gph__range_config__min_count_rate_rtn_limit_mcps();
    fn test_field_gph__range_config__valid_phase_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__valid_phase_low) as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__valid_phase_low)
            )
        );
    }
    test_field_gph__range_config__valid_phase_low();
    fn test_field_gph__range_config__valid_phase_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gph_timing_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gph__range_config__valid_phase_high) as usize
                    - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gph_timing_config_t),
                "::",
                stringify!(gph__range_config__valid_phase_high)
            )
        );
    }
    test_field_gph__range_config__valid_phase_high();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_fw_internal_t {
    firmware__internal_stream_count_div: u8,
    firmware__internal_stream_counter_val: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_fw_internal_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_fw_internal_t>(),
        2usize,
        concat!("Size of: ", stringify!(VL53LX_fw_internal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_fw_internal_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_fw_internal_t))
    );
    fn test_field_firmware__internal_stream_count_div() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_fw_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__internal_stream_count_div) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_fw_internal_t),
                "::",
                stringify!(firmware__internal_stream_count_div)
            )
        );
    }
    test_field_firmware__internal_stream_count_div();
    fn test_field_firmware__internal_stream_counter_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_fw_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).firmware__internal_stream_counter_val) as usize
                    - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_fw_internal_t),
                "::",
                stringify!(firmware__internal_stream_counter_val)
            )
        );
    }
    test_field_firmware__internal_stream_counter_val();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_patch_results_t {
    dss_calc__roi_ctrl: u8,
    dss_calc__spare_1: u8,
    dss_calc__spare_2: u8,
    dss_calc__spare_3: u8,
    dss_calc__spare_4: u8,
    dss_calc__spare_5: u8,
    dss_calc__spare_6: u8,
    dss_calc__spare_7: u8,
    dss_calc__user_roi_spad_en_0: u8,
    dss_calc__user_roi_spad_en_1: u8,
    dss_calc__user_roi_spad_en_2: u8,
    dss_calc__user_roi_spad_en_3: u8,
    dss_calc__user_roi_spad_en_4: u8,
    dss_calc__user_roi_spad_en_5: u8,
    dss_calc__user_roi_spad_en_6: u8,
    dss_calc__user_roi_spad_en_7: u8,
    dss_calc__user_roi_spad_en_8: u8,
    dss_calc__user_roi_spad_en_9: u8,
    dss_calc__user_roi_spad_en_10: u8,
    dss_calc__user_roi_spad_en_11: u8,
    dss_calc__user_roi_spad_en_12: u8,
    dss_calc__user_roi_spad_en_13: u8,
    dss_calc__user_roi_spad_en_14: u8,
    dss_calc__user_roi_spad_en_15: u8,
    dss_calc__user_roi_spad_en_16: u8,
    dss_calc__user_roi_spad_en_17: u8,
    dss_calc__user_roi_spad_en_18: u8,
    dss_calc__user_roi_spad_en_19: u8,
    dss_calc__user_roi_spad_en_20: u8,
    dss_calc__user_roi_spad_en_21: u8,
    dss_calc__user_roi_spad_en_22: u8,
    dss_calc__user_roi_spad_en_23: u8,
    dss_calc__user_roi_spad_en_24: u8,
    dss_calc__user_roi_spad_en_25: u8,
    dss_calc__user_roi_spad_en_26: u8,
    dss_calc__user_roi_spad_en_27: u8,
    dss_calc__user_roi_spad_en_28: u8,
    dss_calc__user_roi_spad_en_29: u8,
    dss_calc__user_roi_spad_en_30: u8,
    dss_calc__user_roi_spad_en_31: u8,
    dss_calc__user_roi_0: u8,
    dss_calc__user_roi_1: u8,
    dss_calc__mode_roi_0: u8,
    dss_calc__mode_roi_1: u8,
    sigma_estimator_calc__spare_0: u8,
    vhv_result__peak_signal_rate_mcps: u16,
    vhv_result__signal_total_events_ref: u32,
    phasecal_result__phase_output_ref: u16,
    dss_result__total_rate_per_spad: u16,
    dss_result__enabled_blocks: u8,
    dss_result__num_requested_spads: u16,
    mm_result__inner_intersection_rate: u16,
    mm_result__outer_complement_rate: u16,
    mm_result__total_offset: u16,
    xtalk_calc__xtalk_for_enabled_spads: u32,
    xtalk_result__avg_xtalk_user_roi_kcps: u32,
    xtalk_result__avg_xtalk_mm_inner_roi_kcps: u32,
    xtalk_result__avg_xtalk_mm_outer_roi_kcps: u32,
    range_result__accum_phase: u32,
    range_result__offset_corrected_range: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_patch_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_patch_results_t>(),
        92usize,
        concat!("Size of: ", stringify!(VL53LX_patch_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_patch_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_patch_results_t))
    );
    fn test_field_dss_calc__roi_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__roi_ctrl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__roi_ctrl)
            )
        );
    }
    test_field_dss_calc__roi_ctrl();
    fn test_field_dss_calc__spare_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_1)
            )
        );
    }
    test_field_dss_calc__spare_1();
    fn test_field_dss_calc__spare_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_2)
            )
        );
    }
    test_field_dss_calc__spare_2();
    fn test_field_dss_calc__spare_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_3)
            )
        );
    }
    test_field_dss_calc__spare_3();
    fn test_field_dss_calc__spare_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_4)
            )
        );
    }
    test_field_dss_calc__spare_4();
    fn test_field_dss_calc__spare_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_5)
            )
        );
    }
    test_field_dss_calc__spare_5();
    fn test_field_dss_calc__spare_6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_6)
            )
        );
    }
    test_field_dss_calc__spare_6();
    fn test_field_dss_calc__spare_7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__spare_7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__spare_7)
            )
        );
    }
    test_field_dss_calc__spare_7();
    fn test_field_dss_calc__user_roi_spad_en_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_0) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_0)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_0();
    fn test_field_dss_calc__user_roi_spad_en_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_1) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_1)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_1();
    fn test_field_dss_calc__user_roi_spad_en_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_2) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_2)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_2();
    fn test_field_dss_calc__user_roi_spad_en_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_3) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_3)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_3();
    fn test_field_dss_calc__user_roi_spad_en_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_4) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_4)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_4();
    fn test_field_dss_calc__user_roi_spad_en_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_5) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_5)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_5();
    fn test_field_dss_calc__user_roi_spad_en_6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_6) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_6)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_6();
    fn test_field_dss_calc__user_roi_spad_en_7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_7) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_7)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_7();
    fn test_field_dss_calc__user_roi_spad_en_8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_8)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_8();
    fn test_field_dss_calc__user_roi_spad_en_9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_9) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_9)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_9();
    fn test_field_dss_calc__user_roi_spad_en_10() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_10) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_10)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_10();
    fn test_field_dss_calc__user_roi_spad_en_11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_11) as usize - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_11)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_11();
    fn test_field_dss_calc__user_roi_spad_en_12() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_12) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_12)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_12();
    fn test_field_dss_calc__user_roi_spad_en_13() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_13) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_13)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_13();
    fn test_field_dss_calc__user_roi_spad_en_14() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_14) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_14)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_14();
    fn test_field_dss_calc__user_roi_spad_en_15() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_15) as usize - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_15)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_15();
    fn test_field_dss_calc__user_roi_spad_en_16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_16) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_16)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_16();
    fn test_field_dss_calc__user_roi_spad_en_17() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_17) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_17)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_17();
    fn test_field_dss_calc__user_roi_spad_en_18() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_18) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_18)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_18();
    fn test_field_dss_calc__user_roi_spad_en_19() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_19) as usize - ptr as usize
            },
            27usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_19)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_19();
    fn test_field_dss_calc__user_roi_spad_en_20() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_20) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_20)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_20();
    fn test_field_dss_calc__user_roi_spad_en_21() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_21) as usize - ptr as usize
            },
            29usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_21)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_21();
    fn test_field_dss_calc__user_roi_spad_en_22() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_22) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_22)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_22();
    fn test_field_dss_calc__user_roi_spad_en_23() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_23) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_23)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_23();
    fn test_field_dss_calc__user_roi_spad_en_24() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_24) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_24)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_24();
    fn test_field_dss_calc__user_roi_spad_en_25() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_25) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_25)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_25();
    fn test_field_dss_calc__user_roi_spad_en_26() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_26) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_26)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_26();
    fn test_field_dss_calc__user_roi_spad_en_27() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_27) as usize - ptr as usize
            },
            35usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_27)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_27();
    fn test_field_dss_calc__user_roi_spad_en_28() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_28) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_28)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_28();
    fn test_field_dss_calc__user_roi_spad_en_29() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_29) as usize - ptr as usize
            },
            37usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_29)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_29();
    fn test_field_dss_calc__user_roi_spad_en_30() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_30) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_30)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_30();
    fn test_field_dss_calc__user_roi_spad_en_31() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_spad_en_31) as usize - ptr as usize
            },
            39usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_spad_en_31)
            )
        );
    }
    test_field_dss_calc__user_roi_spad_en_31();
    fn test_field_dss_calc__user_roi_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_0) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_0)
            )
        );
    }
    test_field_dss_calc__user_roi_0();
    fn test_field_dss_calc__user_roi_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__user_roi_1) as usize - ptr as usize
            },
            41usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__user_roi_1)
            )
        );
    }
    test_field_dss_calc__user_roi_1();
    fn test_field_dss_calc__mode_roi_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__mode_roi_0) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__mode_roi_0)
            )
        );
    }
    test_field_dss_calc__mode_roi_0();
    fn test_field_dss_calc__mode_roi_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_calc__mode_roi_1) as usize - ptr as usize
            },
            43usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_calc__mode_roi_1)
            )
        );
    }
    test_field_dss_calc__mode_roi_1();
    fn test_field_sigma_estimator_calc__spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_estimator_calc__spare_0) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(sigma_estimator_calc__spare_0)
            )
        );
    }
    test_field_sigma_estimator_calc__spare_0();
    fn test_field_vhv_result__peak_signal_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_result__peak_signal_rate_mcps) as usize
                    - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(vhv_result__peak_signal_rate_mcps)
            )
        );
    }
    test_field_vhv_result__peak_signal_rate_mcps();
    fn test_field_vhv_result__signal_total_events_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_result__signal_total_events_ref) as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(vhv_result__signal_total_events_ref)
            )
        );
    }
    test_field_vhv_result__signal_total_events_ref();
    fn test_field_phasecal_result__phase_output_ref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__phase_output_ref) as usize
                    - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(phasecal_result__phase_output_ref)
            )
        );
    }
    test_field_phasecal_result__phase_output_ref();
    fn test_field_dss_result__total_rate_per_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_result__total_rate_per_spad) as usize - ptr as usize
            },
            54usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_result__total_rate_per_spad)
            )
        );
    }
    test_field_dss_result__total_rate_per_spad();
    fn test_field_dss_result__enabled_blocks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_result__enabled_blocks) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_result__enabled_blocks)
            )
        );
    }
    test_field_dss_result__enabled_blocks();
    fn test_field_dss_result__num_requested_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_result__num_requested_spads) as usize - ptr as usize
            },
            58usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(dss_result__num_requested_spads)
            )
        );
    }
    test_field_dss_result__num_requested_spads();
    fn test_field_mm_result__inner_intersection_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_result__inner_intersection_rate) as usize
                    - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(mm_result__inner_intersection_rate)
            )
        );
    }
    test_field_mm_result__inner_intersection_rate();
    fn test_field_mm_result__outer_complement_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_result__outer_complement_rate) as usize
                    - ptr as usize
            },
            62usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(mm_result__outer_complement_rate)
            )
        );
    }
    test_field_mm_result__outer_complement_rate();
    fn test_field_mm_result__total_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_result__total_offset) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(mm_result__total_offset)
            )
        );
    }
    test_field_mm_result__total_offset();
    fn test_field_xtalk_calc__xtalk_for_enabled_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_calc__xtalk_for_enabled_spads) as usize
                    - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(xtalk_calc__xtalk_for_enabled_spads)
            )
        );
    }
    test_field_xtalk_calc__xtalk_for_enabled_spads();
    fn test_field_xtalk_result__avg_xtalk_user_roi_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_result__avg_xtalk_user_roi_kcps) as usize
                    - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(xtalk_result__avg_xtalk_user_roi_kcps)
            )
        );
    }
    test_field_xtalk_result__avg_xtalk_user_roi_kcps();
    fn test_field_xtalk_result__avg_xtalk_mm_inner_roi_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_result__avg_xtalk_mm_inner_roi_kcps) as usize
                    - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(xtalk_result__avg_xtalk_mm_inner_roi_kcps)
            )
        );
    }
    test_field_xtalk_result__avg_xtalk_mm_inner_roi_kcps();
    fn test_field_xtalk_result__avg_xtalk_mm_outer_roi_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_result__avg_xtalk_mm_outer_roi_kcps) as usize
                    - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(xtalk_result__avg_xtalk_mm_outer_roi_kcps)
            )
        );
    }
    test_field_xtalk_result__avg_xtalk_mm_outer_roi_kcps();
    fn test_field_range_result__accum_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_result__accum_phase) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(range_result__accum_phase)
            )
        );
    }
    test_field_range_result__accum_phase();
    fn test_field_range_result__offset_corrected_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_patch_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_result__offset_corrected_range) as usize
                    - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_patch_results_t),
                "::",
                stringify!(range_result__offset_corrected_range)
            )
        );
    }
    test_field_range_result__offset_corrected_range();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_shadow_system_results_t {
    shadow_phasecal_result__vcsel_start: u8,
    shadow_result__interrupt_status: u8,
    shadow_result__range_status: u8,
    shadow_result__report_status: u8,
    shadow_result__stream_count: u8,
    shadow_result__dss_actual_effective_spads_sd0: u16,
    shadow_result__peak_signal_count_rate_mcps_sd0: u16,
    shadow_result__ambient_count_rate_mcps_sd0: u16,
    shadow_result__sigma_sd0: u16,
    shadow_result__phase_sd0: u16,
    shadow_result__final_crosstalk_corrected_range_mm_sd0: u16,
    shr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0: u16,
    shadow_result__mm_inner_actual_effective_spads_sd0: u16,
    shadow_result__mm_outer_actual_effective_spads_sd0: u16,
    shadow_result__avg_signal_count_rate_mcps_sd0: u16,
    shadow_result__dss_actual_effective_spads_sd1: u16,
    shadow_result__peak_signal_count_rate_mcps_sd1: u16,
    shadow_result__ambient_count_rate_mcps_sd1: u16,
    shadow_result__sigma_sd1: u16,
    shadow_result__phase_sd1: u16,
    shadow_result__final_crosstalk_corrected_range_mm_sd1: u16,
    shadow_result__spare_0_sd1: u16,
    shadow_result__spare_1_sd1: u16,
    shadow_result__spare_2_sd1: u16,
    shadow_result__spare_3_sd1: u8,
    shadow_result__thresh_info: u8,
    shadow_phasecal_result__reference_phase_hi: u8,
    shadow_phasecal_result__reference_phase_lo: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_shadow_system_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_shadow_system_results_t>(),
        48usize,
        concat!("Size of: ", stringify!(VL53LX_shadow_system_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_shadow_system_results_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_shadow_system_results_t))
    );
    fn test_field_shadow_phasecal_result__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_phasecal_result__vcsel_start) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_phasecal_result__vcsel_start)
            )
        );
    }
    test_field_shadow_phasecal_result__vcsel_start();
    fn test_field_shadow_result__interrupt_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__interrupt_status) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__interrupt_status)
            )
        );
    }
    test_field_shadow_result__interrupt_status();
    fn test_field_shadow_result__range_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__range_status) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__range_status)
            )
        );
    }
    test_field_shadow_result__range_status();
    fn test_field_shadow_result__report_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__report_status) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__report_status)
            )
        );
    }
    test_field_shadow_result__report_status();
    fn test_field_shadow_result__stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__stream_count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__stream_count)
            )
        );
    }
    test_field_shadow_result__stream_count();
    fn test_field_shadow_result__dss_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__dss_actual_effective_spads_sd0) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__dss_actual_effective_spads_sd0)
            )
        );
    }
    test_field_shadow_result__dss_actual_effective_spads_sd0();
    fn test_field_shadow_result__peak_signal_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__peak_signal_count_rate_mcps_sd0) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__peak_signal_count_rate_mcps_sd0)
            )
        );
    }
    test_field_shadow_result__peak_signal_count_rate_mcps_sd0();
    fn test_field_shadow_result__ambient_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__ambient_count_rate_mcps_sd0) as usize
                    - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__ambient_count_rate_mcps_sd0)
            )
        );
    }
    test_field_shadow_result__ambient_count_rate_mcps_sd0();
    fn test_field_shadow_result__sigma_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__sigma_sd0) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__sigma_sd0)
            )
        );
    }
    test_field_shadow_result__sigma_sd0();
    fn test_field_shadow_result__phase_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__phase_sd0) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__phase_sd0)
            )
        );
    }
    test_field_shadow_result__phase_sd0();
    fn test_field_shadow_result__final_crosstalk_corrected_range_mm_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__final_crosstalk_corrected_range_mm_sd0)
                    as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__final_crosstalk_corrected_range_mm_sd0)
            )
        );
    }
    test_field_shadow_result__final_crosstalk_corrected_range_mm_sd0();
    fn test_field_shr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).shr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
                ) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0)
            )
        );
    }
    test_field_shr__peak_signal_count_rate_crosstalk_corrected_mcps_sd0();
    fn test_field_shadow_result__mm_inner_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__mm_inner_actual_effective_spads_sd0)
                    as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__mm_inner_actual_effective_spads_sd0)
            )
        );
    }
    test_field_shadow_result__mm_inner_actual_effective_spads_sd0();
    fn test_field_shadow_result__mm_outer_actual_effective_spads_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__mm_outer_actual_effective_spads_sd0)
                    as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__mm_outer_actual_effective_spads_sd0)
            )
        );
    }
    test_field_shadow_result__mm_outer_actual_effective_spads_sd0();
    fn test_field_shadow_result__avg_signal_count_rate_mcps_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__avg_signal_count_rate_mcps_sd0) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__avg_signal_count_rate_mcps_sd0)
            )
        );
    }
    test_field_shadow_result__avg_signal_count_rate_mcps_sd0();
    fn test_field_shadow_result__dss_actual_effective_spads_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__dss_actual_effective_spads_sd1) as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__dss_actual_effective_spads_sd1)
            )
        );
    }
    test_field_shadow_result__dss_actual_effective_spads_sd1();
    fn test_field_shadow_result__peak_signal_count_rate_mcps_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__peak_signal_count_rate_mcps_sd1) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__peak_signal_count_rate_mcps_sd1)
            )
        );
    }
    test_field_shadow_result__peak_signal_count_rate_mcps_sd1();
    fn test_field_shadow_result__ambient_count_rate_mcps_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__ambient_count_rate_mcps_sd1) as usize
                    - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__ambient_count_rate_mcps_sd1)
            )
        );
    }
    test_field_shadow_result__ambient_count_rate_mcps_sd1();
    fn test_field_shadow_result__sigma_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__sigma_sd1) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__sigma_sd1)
            )
        );
    }
    test_field_shadow_result__sigma_sd1();
    fn test_field_shadow_result__phase_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__phase_sd1) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__phase_sd1)
            )
        );
    }
    test_field_shadow_result__phase_sd1();
    fn test_field_shadow_result__final_crosstalk_corrected_range_mm_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__final_crosstalk_corrected_range_mm_sd1)
                    as usize
                    - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__final_crosstalk_corrected_range_mm_sd1)
            )
        );
    }
    test_field_shadow_result__final_crosstalk_corrected_range_mm_sd1();
    fn test_field_shadow_result__spare_0_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__spare_0_sd1) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__spare_0_sd1)
            )
        );
    }
    test_field_shadow_result__spare_0_sd1();
    fn test_field_shadow_result__spare_1_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__spare_1_sd1) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__spare_1_sd1)
            )
        );
    }
    test_field_shadow_result__spare_1_sd1();
    fn test_field_shadow_result__spare_2_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__spare_2_sd1) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__spare_2_sd1)
            )
        );
    }
    test_field_shadow_result__spare_2_sd1();
    fn test_field_shadow_result__spare_3_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__spare_3_sd1) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__spare_3_sd1)
            )
        );
    }
    test_field_shadow_result__spare_3_sd1();
    fn test_field_shadow_result__thresh_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result__thresh_info) as usize - ptr as usize
            },
            45usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_result__thresh_info)
            )
        );
    }
    test_field_shadow_result__thresh_info();
    fn test_field_shadow_phasecal_result__reference_phase_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_phasecal_result__reference_phase_hi) as usize
                    - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_phasecal_result__reference_phase_hi)
            )
        );
    }
    test_field_shadow_phasecal_result__reference_phase_hi();
    fn test_field_shadow_phasecal_result__reference_phase_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_system_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_phasecal_result__reference_phase_lo) as usize
                    - ptr as usize
            },
            47usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_system_results_t),
                "::",
                stringify!(shadow_phasecal_result__reference_phase_lo)
            )
        );
    }
    test_field_shadow_phasecal_result__reference_phase_lo();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_shadow_core_results_t {
    shadow_result_core__ambient_window_events_sd0: u32,
    shadow_result_core__ranging_total_events_sd0: u32,
    shadow_result_core__signal_total_events_sd0: i32,
    shadow_result_core__total_periods_elapsed_sd0: u32,
    shadow_result_core__ambient_window_events_sd1: u32,
    shadow_result_core__ranging_total_events_sd1: u32,
    shadow_result_core__signal_total_events_sd1: i32,
    shadow_result_core__total_periods_elapsed_sd1: u32,
    shadow_result_core__spare_0: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_shadow_core_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_shadow_core_results_t>(),
        36usize,
        concat!("Size of: ", stringify!(VL53LX_shadow_core_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_shadow_core_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_shadow_core_results_t))
    );
    fn test_field_shadow_result_core__ambient_window_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__ambient_window_events_sd0) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__ambient_window_events_sd0)
            )
        );
    }
    test_field_shadow_result_core__ambient_window_events_sd0();
    fn test_field_shadow_result_core__ranging_total_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__ranging_total_events_sd0) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__ranging_total_events_sd0)
            )
        );
    }
    test_field_shadow_result_core__ranging_total_events_sd0();
    fn test_field_shadow_result_core__signal_total_events_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__signal_total_events_sd0) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__signal_total_events_sd0)
            )
        );
    }
    test_field_shadow_result_core__signal_total_events_sd0();
    fn test_field_shadow_result_core__total_periods_elapsed_sd0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__total_periods_elapsed_sd0) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__total_periods_elapsed_sd0)
            )
        );
    }
    test_field_shadow_result_core__total_periods_elapsed_sd0();
    fn test_field_shadow_result_core__ambient_window_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__ambient_window_events_sd1) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__ambient_window_events_sd1)
            )
        );
    }
    test_field_shadow_result_core__ambient_window_events_sd1();
    fn test_field_shadow_result_core__ranging_total_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__ranging_total_events_sd1) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__ranging_total_events_sd1)
            )
        );
    }
    test_field_shadow_result_core__ranging_total_events_sd1();
    fn test_field_shadow_result_core__signal_total_events_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__signal_total_events_sd1) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__signal_total_events_sd1)
            )
        );
    }
    test_field_shadow_result_core__signal_total_events_sd1();
    fn test_field_shadow_result_core__total_periods_elapsed_sd1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__total_periods_elapsed_sd1) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__total_periods_elapsed_sd1)
            )
        );
    }
    test_field_shadow_result_core__total_periods_elapsed_sd1();
    fn test_field_shadow_result_core__spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_shadow_core_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadow_result_core__spare_0) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_shadow_core_results_t),
                "::",
                stringify!(shadow_result_core__spare_0)
            )
        );
    }
    test_field_shadow_result_core__spare_0();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_dmax_calibration_data_t {
    ref__actual_effective_spads: u16,
    ref__peak_signal_count_rate_mcps: u16,
    ref__distance_mm: u16,
    ref_reflectance_pc: u16,
    coverglass_transmission: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_dmax_calibration_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_dmax_calibration_data_t>(),
        10usize,
        concat!("Size of: ", stringify!(VL53LX_dmax_calibration_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_dmax_calibration_data_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_dmax_calibration_data_t))
    );
    fn test_field_ref__actual_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dmax_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref__actual_effective_spads) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dmax_calibration_data_t),
                "::",
                stringify!(ref__actual_effective_spads)
            )
        );
    }
    test_field_ref__actual_effective_spads();
    fn test_field_ref__peak_signal_count_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dmax_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref__peak_signal_count_rate_mcps) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dmax_calibration_data_t),
                "::",
                stringify!(ref__peak_signal_count_rate_mcps)
            )
        );
    }
    test_field_ref__peak_signal_count_rate_mcps();
    fn test_field_ref__distance_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dmax_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref__distance_mm) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dmax_calibration_data_t),
                "::",
                stringify!(ref__distance_mm)
            )
        );
    }
    test_field_ref__distance_mm();
    fn test_field_ref_reflectance_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dmax_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_reflectance_pc) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dmax_calibration_data_t),
                "::",
                stringify!(ref_reflectance_pc)
            )
        );
    }
    test_field_ref_reflectance_pc();
    fn test_field_coverglass_transmission() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dmax_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coverglass_transmission) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dmax_calibration_data_t),
                "::",
                stringify!(coverglass_transmission)
            )
        );
    }
    test_field_coverglass_transmission();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen3_dmax_config_t {
    signal_thresh_sigma: u8,
    ambient_thresh_sigma: u8,
    min_ambient_thresh_events: i32,
    signal_total_events_limit: i32,
    target_reflectance_for_dmax_calc: [u16; 5usize],
    max_effective_spads: u16,
    dss_config__target_total_rate_mcps: u16,
    dss_config__aperture_attenuation: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen3_dmax_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen3_dmax_config_t>(),
        28usize,
        concat!("Size of: ", stringify!(VL53LX_hist_gen3_dmax_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen3_dmax_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_hist_gen3_dmax_config_t))
    );
    fn test_field_signal_thresh_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_thresh_sigma) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(signal_thresh_sigma)
            )
        );
    }
    test_field_signal_thresh_sigma();
    fn test_field_ambient_thresh_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_thresh_sigma) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(ambient_thresh_sigma)
            )
        );
    }
    test_field_ambient_thresh_sigma();
    fn test_field_min_ambient_thresh_events() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_ambient_thresh_events) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(min_ambient_thresh_events)
            )
        );
    }
    test_field_min_ambient_thresh_events();
    fn test_field_signal_total_events_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_total_events_limit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(signal_total_events_limit)
            )
        );
    }
    test_field_signal_total_events_limit();
    fn test_field_target_reflectance_for_dmax_calc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_reflectance_for_dmax_calc) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(target_reflectance_for_dmax_calc)
            )
        );
    }
    test_field_target_reflectance_for_dmax_calc();
    fn test_field_max_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_effective_spads) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(max_effective_spads)
            )
        );
    }
    test_field_max_effective_spads();
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_dss_config__aperture_attenuation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_gen3_dmax_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__aperture_attenuation) as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_dmax_config_t),
                "::",
                stringify!(dss_config__aperture_attenuation)
            )
        );
    }
    test_field_dss_config__aperture_attenuation();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_histogram_config_t {
    histogram_config__spad_array_selection: u8,
    histogram_config__low_amb_even_bin_0_1: u8,
    histogram_config__low_amb_even_bin_2_3: u8,
    histogram_config__low_amb_even_bin_4_5: u8,
    histogram_config__low_amb_odd_bin_0_1: u8,
    histogram_config__low_amb_odd_bin_2_3: u8,
    histogram_config__low_amb_odd_bin_4_5: u8,
    histogram_config__mid_amb_even_bin_0_1: u8,
    histogram_config__mid_amb_even_bin_2_3: u8,
    histogram_config__mid_amb_even_bin_4_5: u8,
    histogram_config__mid_amb_odd_bin_0_1: u8,
    histogram_config__mid_amb_odd_bin_2: u8,
    histogram_config__mid_amb_odd_bin_3_4: u8,
    histogram_config__mid_amb_odd_bin_5: u8,
    histogram_config__user_bin_offset: u8,
    histogram_config__high_amb_even_bin_0_1: u8,
    histogram_config__high_amb_even_bin_2_3: u8,
    histogram_config__high_amb_even_bin_4_5: u8,
    histogram_config__high_amb_odd_bin_0_1: u8,
    histogram_config__high_amb_odd_bin_2_3: u8,
    histogram_config__high_amb_odd_bin_4_5: u8,
    histogram_config__amb_thresh_low: u16,
    histogram_config__amb_thresh_high: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_histogram_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_histogram_config_t>(),
        26usize,
        concat!("Size of: ", stringify!(VL53LX_histogram_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_histogram_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_histogram_config_t))
    );
    fn test_field_histogram_config__spad_array_selection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__spad_array_selection) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__spad_array_selection)
            )
        );
    }
    test_field_histogram_config__spad_array_selection();
    fn test_field_histogram_config__low_amb_even_bin_0_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__low_amb_even_bin_0_1) as usize
                    - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__low_amb_even_bin_0_1)
            )
        );
    }
    test_field_histogram_config__low_amb_even_bin_0_1();
    fn test_field_histogram_config__low_amb_even_bin_2_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__low_amb_even_bin_2_3) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__low_amb_even_bin_2_3)
            )
        );
    }
    test_field_histogram_config__low_amb_even_bin_2_3();
    fn test_field_histogram_config__low_amb_even_bin_4_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__low_amb_even_bin_4_5) as usize
                    - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__low_amb_even_bin_4_5)
            )
        );
    }
    test_field_histogram_config__low_amb_even_bin_4_5();
    fn test_field_histogram_config__low_amb_odd_bin_0_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__low_amb_odd_bin_0_1) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__low_amb_odd_bin_0_1)
            )
        );
    }
    test_field_histogram_config__low_amb_odd_bin_0_1();
    fn test_field_histogram_config__low_amb_odd_bin_2_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__low_amb_odd_bin_2_3) as usize
                    - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__low_amb_odd_bin_2_3)
            )
        );
    }
    test_field_histogram_config__low_amb_odd_bin_2_3();
    fn test_field_histogram_config__low_amb_odd_bin_4_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__low_amb_odd_bin_4_5) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__low_amb_odd_bin_4_5)
            )
        );
    }
    test_field_histogram_config__low_amb_odd_bin_4_5();
    fn test_field_histogram_config__mid_amb_even_bin_0_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_even_bin_0_1) as usize
                    - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_even_bin_0_1)
            )
        );
    }
    test_field_histogram_config__mid_amb_even_bin_0_1();
    fn test_field_histogram_config__mid_amb_even_bin_2_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_even_bin_2_3) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_even_bin_2_3)
            )
        );
    }
    test_field_histogram_config__mid_amb_even_bin_2_3();
    fn test_field_histogram_config__mid_amb_even_bin_4_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_even_bin_4_5) as usize
                    - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_even_bin_4_5)
            )
        );
    }
    test_field_histogram_config__mid_amb_even_bin_4_5();
    fn test_field_histogram_config__mid_amb_odd_bin_0_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_odd_bin_0_1) as usize
                    - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_odd_bin_0_1)
            )
        );
    }
    test_field_histogram_config__mid_amb_odd_bin_0_1();
    fn test_field_histogram_config__mid_amb_odd_bin_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_odd_bin_2) as usize
                    - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_odd_bin_2)
            )
        );
    }
    test_field_histogram_config__mid_amb_odd_bin_2();
    fn test_field_histogram_config__mid_amb_odd_bin_3_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_odd_bin_3_4) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_odd_bin_3_4)
            )
        );
    }
    test_field_histogram_config__mid_amb_odd_bin_3_4();
    fn test_field_histogram_config__mid_amb_odd_bin_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__mid_amb_odd_bin_5) as usize
                    - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__mid_amb_odd_bin_5)
            )
        );
    }
    test_field_histogram_config__mid_amb_odd_bin_5();
    fn test_field_histogram_config__user_bin_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__user_bin_offset) as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__user_bin_offset)
            )
        );
    }
    test_field_histogram_config__user_bin_offset();
    fn test_field_histogram_config__high_amb_even_bin_0_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__high_amb_even_bin_0_1) as usize
                    - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__high_amb_even_bin_0_1)
            )
        );
    }
    test_field_histogram_config__high_amb_even_bin_0_1();
    fn test_field_histogram_config__high_amb_even_bin_2_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__high_amb_even_bin_2_3) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__high_amb_even_bin_2_3)
            )
        );
    }
    test_field_histogram_config__high_amb_even_bin_2_3();
    fn test_field_histogram_config__high_amb_even_bin_4_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__high_amb_even_bin_4_5) as usize
                    - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__high_amb_even_bin_4_5)
            )
        );
    }
    test_field_histogram_config__high_amb_even_bin_4_5();
    fn test_field_histogram_config__high_amb_odd_bin_0_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__high_amb_odd_bin_0_1) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__high_amb_odd_bin_0_1)
            )
        );
    }
    test_field_histogram_config__high_amb_odd_bin_0_1();
    fn test_field_histogram_config__high_amb_odd_bin_2_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__high_amb_odd_bin_2_3) as usize
                    - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__high_amb_odd_bin_2_3)
            )
        );
    }
    test_field_histogram_config__high_amb_odd_bin_2_3();
    fn test_field_histogram_config__high_amb_odd_bin_4_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__high_amb_odd_bin_4_5) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__high_amb_odd_bin_4_5)
            )
        );
    }
    test_field_histogram_config__high_amb_odd_bin_4_5();
    fn test_field_histogram_config__amb_thresh_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__amb_thresh_low) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__amb_thresh_low)
            )
        );
    }
    test_field_histogram_config__amb_thresh_low();
    fn test_field_histogram_config__amb_thresh_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_config__amb_thresh_high) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_config_t),
                "::",
                stringify!(histogram_config__amb_thresh_high)
            )
        );
    }
    test_field_histogram_config__amb_thresh_high();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_post_process_config_t {
    hist_algo_select: VL53LX_HistAlgoSelect,
    hist_target_order: VL53LX_HistTargetOrder,
    filter_woi0: u8,
    filter_woi1: u8,
    hist_amb_est_method: VL53LX_HistAmbEstMethod,
    ambient_thresh_sigma0: u8,
    ambient_thresh_sigma1: u8,
    ambient_thresh_events_scaler: u16,
    min_ambient_thresh_events: i32,
    noise_threshold: u16,
    signal_total_events_limit: i32,
    sigma_estimator__sigma_ref_mm: u8,
    sigma_thresh: u16,
    range_offset_mm: i16,
    gain_factor: u16,
    valid_phase_low: u8,
    valid_phase_high: u8,
    algo__consistency_check__phase_tolerance: u8,
    algo__consistency_check__event_sigma: u8,
    algo__consistency_check__event_min_spad_count: u16,
    algo__consistency_check__min_max_tolerance: u16,
    algo__crosstalk_compensation_enable: u8,
    algo__crosstalk_compensation_plane_offset_kcps: u32,
    algo__crosstalk_compensation_x_plane_gradient_kcps: i16,
    algo__crosstalk_compensation_y_plane_gradient_kcps: i16,
    algo__crosstalk_detect_min_valid_range_mm: i16,
    algo__crosstalk_detect_max_valid_range_mm: i16,
    algo__crosstalk_detect_max_valid_rate_kcps: u16,
    algo__crosstalk_detect_max_sigma_mm: u16,
    algo__crosstalk_detect_event_sigma: u8,
    algo__crosstalk_detect_min_max_tolerance: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_hist_post_process_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_post_process_config_t>(),
        64usize,
        concat!("Size of: ", stringify!(VL53LX_hist_post_process_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_post_process_config_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_post_process_config_t)
        )
    );
    fn test_field_hist_algo_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_algo_select) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(hist_algo_select)
            )
        );
    }
    test_field_hist_algo_select();
    fn test_field_hist_target_order() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_target_order) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(hist_target_order)
            )
        );
    }
    test_field_hist_target_order();
    fn test_field_filter_woi0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter_woi0) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(filter_woi0)
            )
        );
    }
    test_field_filter_woi0();
    fn test_field_filter_woi1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter_woi1) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(filter_woi1)
            )
        );
    }
    test_field_filter_woi1();
    fn test_field_hist_amb_est_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_amb_est_method) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(hist_amb_est_method)
            )
        );
    }
    test_field_hist_amb_est_method();
    fn test_field_ambient_thresh_sigma0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_thresh_sigma0) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(ambient_thresh_sigma0)
            )
        );
    }
    test_field_ambient_thresh_sigma0();
    fn test_field_ambient_thresh_sigma1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_thresh_sigma1) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(ambient_thresh_sigma1)
            )
        );
    }
    test_field_ambient_thresh_sigma1();
    fn test_field_ambient_thresh_events_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_thresh_events_scaler) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(ambient_thresh_events_scaler)
            )
        );
    }
    test_field_ambient_thresh_events_scaler();
    fn test_field_min_ambient_thresh_events() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_ambient_thresh_events) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(min_ambient_thresh_events)
            )
        );
    }
    test_field_min_ambient_thresh_events();
    fn test_field_noise_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).noise_threshold) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(noise_threshold)
            )
        );
    }
    test_field_noise_threshold();
    fn test_field_signal_total_events_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_total_events_limit) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(signal_total_events_limit)
            )
        );
    }
    test_field_signal_total_events_limit();
    fn test_field_sigma_estimator__sigma_ref_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_estimator__sigma_ref_mm) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(sigma_estimator__sigma_ref_mm)
            )
        );
    }
    test_field_sigma_estimator__sigma_ref_mm();
    fn test_field_sigma_thresh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_thresh) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(sigma_thresh)
            )
        );
    }
    test_field_sigma_thresh();
    fn test_field_range_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_offset_mm) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(range_offset_mm)
            )
        );
    }
    test_field_range_offset_mm();
    fn test_field_gain_factor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gain_factor) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(gain_factor)
            )
        );
    }
    test_field_gain_factor();
    fn test_field_valid_phase_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid_phase_low) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(valid_phase_low)
            )
        );
    }
    test_field_valid_phase_low();
    fn test_field_valid_phase_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid_phase_high) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(valid_phase_high)
            )
        );
    }
    test_field_valid_phase_high();
    fn test_field_algo__consistency_check__phase_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__consistency_check__phase_tolerance) as usize
                    - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__consistency_check__phase_tolerance)
            )
        );
    }
    test_field_algo__consistency_check__phase_tolerance();
    fn test_field_algo__consistency_check__event_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__consistency_check__event_sigma) as usize
                    - ptr as usize
            },
            35usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__consistency_check__event_sigma)
            )
        );
    }
    test_field_algo__consistency_check__event_sigma();
    fn test_field_algo__consistency_check__event_min_spad_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__consistency_check__event_min_spad_count) as usize
                    - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__consistency_check__event_min_spad_count)
            )
        );
    }
    test_field_algo__consistency_check__event_min_spad_count();
    fn test_field_algo__consistency_check__min_max_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__consistency_check__min_max_tolerance) as usize
                    - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__consistency_check__min_max_tolerance)
            )
        );
    }
    test_field_algo__consistency_check__min_max_tolerance();
    fn test_field_algo__crosstalk_compensation_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_enable) as usize
                    - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_enable)
            )
        );
    }
    test_field_algo__crosstalk_compensation_enable();
    fn test_field_algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_plane_offset_kcps) as usize
                    - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_x_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_y_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            50usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_algo__crosstalk_detect_min_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_min_valid_range_mm) as usize
                    - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_detect_min_valid_range_mm)
            )
        );
    }
    test_field_algo__crosstalk_detect_min_valid_range_mm();
    fn test_field_algo__crosstalk_detect_max_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_max_valid_range_mm) as usize
                    - ptr as usize
            },
            54usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_detect_max_valid_range_mm)
            )
        );
    }
    test_field_algo__crosstalk_detect_max_valid_range_mm();
    fn test_field_algo__crosstalk_detect_max_valid_rate_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_max_valid_rate_kcps) as usize
                    - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_detect_max_valid_rate_kcps)
            )
        );
    }
    test_field_algo__crosstalk_detect_max_valid_rate_kcps();
    fn test_field_algo__crosstalk_detect_max_sigma_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_max_sigma_mm) as usize
                    - ptr as usize
            },
            58usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_detect_max_sigma_mm)
            )
        );
    }
    test_field_algo__crosstalk_detect_max_sigma_mm();
    fn test_field_algo__crosstalk_detect_event_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_event_sigma) as usize
                    - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_detect_event_sigma)
            )
        );
    }
    test_field_algo__crosstalk_detect_event_sigma();
    fn test_field_algo__crosstalk_detect_min_max_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_post_process_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_min_max_tolerance) as usize
                    - ptr as usize
            },
            62usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_post_process_config_t),
                "::",
                stringify!(algo__crosstalk_detect_min_max_tolerance)
            )
        );
    }
    test_field_algo__crosstalk_detect_min_max_tolerance();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_histogram_bin_data_t {
    cfg_device_state: VL53LX_DeviceState,
    rd_device_state: VL53LX_DeviceState,
    zone_id: u8,
    time_stamp: u32,
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    number_of_ambient_bins: u8,
    bin_seq: [u8; 6usize],
    bin_rep: [u8; 6usize],
    bin_data: [i32; 24usize],
    result__interrupt_status: u8,
    result__range_status: u8,
    result__report_status: u8,
    result__stream_count: u8,
    result__dss_actual_effective_spads: u16,
    phasecal_result__reference_phase: u16,
    phasecal_result__vcsel_start: u8,
    cal_config__vcsel_start: u8,
    vcsel_width: u16,
    VL53LX_p_005: u8,
    VL53LX_p_015: u16,
    total_periods_elapsed: u32,
    peak_duration_us: u32,
    woi_duration_us: u32,
    min_bin_value: i32,
    max_bin_value: i32,
    zero_distance_phase: u16,
    number_of_ambient_samples: u8,
    ambient_events_sum: i32,
    VL53LX_p_028: i32,
    roi_config__user_roi_centre_spad: u8,
    roi_config__user_roi_requested_global_xy_size: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_histogram_bin_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_histogram_bin_data_t>(),
        172usize,
        concat!("Size of: ", stringify!(VL53LX_histogram_bin_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_histogram_bin_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_histogram_bin_data_t))
    );
    fn test_field_cfg_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_device_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(cfg_device_state)
            )
        );
    }
    test_field_cfg_device_state();
    fn test_field_rd_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_device_state) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(rd_device_state)
            )
        );
    }
    test_field_rd_device_state();
    fn test_field_zone_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_id) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(zone_id)
            )
        );
    }
    test_field_zone_id();
    fn test_field_time_stamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time_stamp) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(time_stamp)
            )
        );
    }
    test_field_time_stamp();
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_number_of_ambient_bins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).number_of_ambient_bins) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(number_of_ambient_bins)
            )
        );
    }
    test_field_number_of_ambient_bins();
    fn test_field_bin_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_seq) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(bin_seq)
            )
        );
    }
    test_field_bin_seq();
    fn test_field_bin_rep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_rep) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(bin_rep)
            )
        );
    }
    test_field_bin_rep();
    fn test_field_bin_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_data) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(bin_data)
            )
        );
    }
    test_field_bin_data();
    fn test_field_result__interrupt_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__interrupt_status) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(result__interrupt_status)
            )
        );
    }
    test_field_result__interrupt_status();
    fn test_field_result__range_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__range_status) as usize - ptr as usize
            },
            121usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(result__range_status)
            )
        );
    }
    test_field_result__range_status();
    fn test_field_result__report_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__report_status) as usize - ptr as usize
            },
            122usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(result__report_status)
            )
        );
    }
    test_field_result__report_status();
    fn test_field_result__stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__stream_count) as usize - ptr as usize
            },
            123usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(result__stream_count)
            )
        );
    }
    test_field_result__stream_count();
    fn test_field_result__dss_actual_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__dss_actual_effective_spads) as usize
                    - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(result__dss_actual_effective_spads)
            )
        );
    }
    test_field_result__dss_actual_effective_spads();
    fn test_field_phasecal_result__reference_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__reference_phase) as usize
                    - ptr as usize
            },
            126usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(phasecal_result__reference_phase)
            )
        );
    }
    test_field_phasecal_result__reference_phase();
    fn test_field_phasecal_result__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__vcsel_start) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(phasecal_result__vcsel_start)
            )
        );
    }
    test_field_phasecal_result__vcsel_start();
    fn test_field_cal_config__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_config__vcsel_start) as usize - ptr as usize
            },
            129usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(cal_config__vcsel_start)
            )
        );
    }
    test_field_cal_config__vcsel_start();
    fn test_field_vcsel_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcsel_width) as usize - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(vcsel_width)
            )
        );
    }
    test_field_vcsel_width();
    fn test_field_VL53LX_p_005() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_005) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(VL53LX_p_005)
            )
        );
    }
    test_field_VL53LX_p_005();
    fn test_field_VL53LX_p_015() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_015) as usize - ptr as usize
            },
            134usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(VL53LX_p_015)
            )
        );
    }
    test_field_VL53LX_p_015();
    fn test_field_total_periods_elapsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_periods_elapsed) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(total_periods_elapsed)
            )
        );
    }
    test_field_total_periods_elapsed();
    fn test_field_peak_duration_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_duration_us) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(peak_duration_us)
            )
        );
    }
    test_field_peak_duration_us();
    fn test_field_woi_duration_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).woi_duration_us) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(woi_duration_us)
            )
        );
    }
    test_field_woi_duration_us();
    fn test_field_min_bin_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_bin_value) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(min_bin_value)
            )
        );
    }
    test_field_min_bin_value();
    fn test_field_max_bin_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_bin_value) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(max_bin_value)
            )
        );
    }
    test_field_max_bin_value();
    fn test_field_zero_distance_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_distance_phase) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(zero_distance_phase)
            )
        );
    }
    test_field_zero_distance_phase();
    fn test_field_number_of_ambient_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).number_of_ambient_samples) as usize - ptr as usize
            },
            158usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(number_of_ambient_samples)
            )
        );
    }
    test_field_number_of_ambient_samples();
    fn test_field_ambient_events_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_events_sum) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(ambient_events_sum)
            )
        );
    }
    test_field_ambient_events_sum();
    fn test_field_VL53LX_p_028() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_028) as usize - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(VL53LX_p_028)
            )
        );
    }
    test_field_VL53LX_p_028();
    fn test_field_roi_config__user_roi_centre_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__user_roi_centre_spad) as usize
                    - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(roi_config__user_roi_centre_spad)
            )
        );
    }
    test_field_roi_config__user_roi_centre_spad();
    fn test_field_roi_config__user_roi_requested_global_xy_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_histogram_bin_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__user_roi_requested_global_xy_size) as usize
                    - ptr as usize
            },
            169usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_histogram_bin_data_t),
                "::",
                stringify!(roi_config__user_roi_requested_global_xy_size)
            )
        );
    }
    test_field_roi_config__user_roi_requested_global_xy_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_histogram_shape_t {
    zone_id: u8,
    time_stamp: u32,
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    bin_data: [u32; 12usize],
    phasecal_result__reference_phase: u16,
    phasecal_result__vcsel_start: u8,
    cal_config__vcsel_start: u8,
    vcsel_width: u16,
    VL53LX_p_015: u16,
    zero_distance_phase: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_histogram_shape_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_histogram_shape_t>(),
        72usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_histogram_shape_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_histogram_shape_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_histogram_shape_t))
    );
    fn test_field_zone_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(zone_id)
            )
        );
    }
    test_field_zone_id();
    fn test_field_time_stamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time_stamp) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(time_stamp)
            )
        );
    }
    test_field_time_stamp();
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_bin_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_data) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(bin_data)
            )
        );
    }
    test_field_bin_data();
    fn test_field_phasecal_result__reference_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__reference_phase) as usize
                    - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(phasecal_result__reference_phase)
            )
        );
    }
    test_field_phasecal_result__reference_phase();
    fn test_field_phasecal_result__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__vcsel_start) as usize - ptr as usize
            },
            62usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(phasecal_result__vcsel_start)
            )
        );
    }
    test_field_phasecal_result__vcsel_start();
    fn test_field_cal_config__vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_config__vcsel_start) as usize - ptr as usize
            },
            63usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(cal_config__vcsel_start)
            )
        );
    }
    test_field_cal_config__vcsel_start();
    fn test_field_vcsel_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcsel_width) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(vcsel_width)
            )
        );
    }
    test_field_vcsel_width();
    fn test_field_VL53LX_p_015() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_015) as usize - ptr as usize
            },
            66usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(VL53LX_p_015)
            )
        );
    }
    test_field_VL53LX_p_015();
    fn test_field_zero_distance_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_shape_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_distance_phase) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_shape_t),
                "::",
                stringify!(zero_distance_phase)
            )
        );
    }
    test_field_zero_distance_phase();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_histogram_data_t {
    xtalk_shape: VL53LX_xtalk_histogram_shape_t,
    xtalk_hist_removed: VL53LX_histogram_bin_data_t,
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_histogram_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_histogram_data_t>(),
        244usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_histogram_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_histogram_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_histogram_data_t))
    );
    fn test_field_xtalk_shape() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_shape) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_data_t),
                "::",
                stringify!(xtalk_shape)
            )
        );
    }
    test_field_xtalk_shape();
    fn test_field_xtalk_hist_removed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_histogram_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_hist_removed) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_histogram_data_t),
                "::",
                stringify!(xtalk_hist_removed)
            )
        );
    }
    test_field_xtalk_hist_removed();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen1_algo_private_data_t {
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    VL53LX_p_029: u8,
    VL53LX_p_016: i32,
    VL53LX_p_043: [i32; 24usize],
    VL53LX_p_068: [i32; 24usize],
    VL53LX_p_040: [u8; 24usize],
    VL53LX_p_018: [i32; 24usize],
    VL53LX_p_014: [u16; 24usize],
    VL53LX_p_008: [u16; 24usize],
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen1_algo_private_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen1_algo_private_data_t>(),
        416usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_hist_gen1_algo_private_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen1_algo_private_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_gen1_algo_private_data_t)
        )
    );
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_VL53LX_p_029() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_029) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_029)
            )
        );
    }
    test_field_VL53LX_p_029();
    fn test_field_VL53LX_p_016() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_016) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_016)
            )
        );
    }
    test_field_VL53LX_p_016();
    fn test_field_VL53LX_p_043() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_043) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_043)
            )
        );
    }
    test_field_VL53LX_p_043();
    fn test_field_VL53LX_p_068() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_068) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_068)
            )
        );
    }
    test_field_VL53LX_p_068();
    fn test_field_VL53LX_p_040() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_040) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_040)
            )
        );
    }
    test_field_VL53LX_p_040();
    fn test_field_VL53LX_p_018() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_018) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_018)
            )
        );
    }
    test_field_VL53LX_p_018();
    fn test_field_VL53LX_p_014() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_014) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_014)
            )
        );
    }
    test_field_VL53LX_p_014();
    fn test_field_VL53LX_p_008() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen1_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_008) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen1_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_008)
            )
        );
    }
    test_field_VL53LX_p_008();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen2_algo_filtered_data_t {
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    VL53LX_p_015: u16,
    VL53LX_p_005: u8,
    VL53LX_p_029: u8,
    VL53LX_p_028: i32,
    VL53LX_p_016: i32,
    VL53LX_p_007: [i32; 24usize],
    VL53LX_p_032: [i32; 24usize],
    VL53LX_p_001: [i32; 24usize],
    VL53LX_p_018: [i32; 24usize],
    VL53LX_p_055: [i32; 24usize],
    VL53LX_p_053: [i32; 24usize],
    VL53LX_p_054: [i32; 24usize],
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen2_algo_filtered_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen2_algo_filtered_data_t>(),
        688usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_hist_gen2_algo_filtered_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen2_algo_filtered_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_gen2_algo_filtered_data_t)
        )
    );
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_VL53LX_p_015() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_015) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_015)
            )
        );
    }
    test_field_VL53LX_p_015();
    fn test_field_VL53LX_p_005() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_005) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_005)
            )
        );
    }
    test_field_VL53LX_p_005();
    fn test_field_VL53LX_p_029() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_029) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_029)
            )
        );
    }
    test_field_VL53LX_p_029();
    fn test_field_VL53LX_p_028() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_028) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_028)
            )
        );
    }
    test_field_VL53LX_p_028();
    fn test_field_VL53LX_p_016() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_016) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_016)
            )
        );
    }
    test_field_VL53LX_p_016();
    fn test_field_VL53LX_p_007() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_007) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_007)
            )
        );
    }
    test_field_VL53LX_p_007();
    fn test_field_VL53LX_p_032() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_032) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_032)
            )
        );
    }
    test_field_VL53LX_p_032();
    fn test_field_VL53LX_p_001() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_001) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_001)
            )
        );
    }
    test_field_VL53LX_p_001();
    fn test_field_VL53LX_p_018() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_018) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_018)
            )
        );
    }
    test_field_VL53LX_p_018();
    fn test_field_VL53LX_p_055() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_055) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_055)
            )
        );
    }
    test_field_VL53LX_p_055();
    fn test_field_VL53LX_p_053() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_053) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_053)
            )
        );
    }
    test_field_VL53LX_p_053();
    fn test_field_VL53LX_p_054() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_054) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_054)
            )
        );
    }
    test_field_VL53LX_p_054();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen2_algo_detection_data_t {
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    VL53LX_p_031: i32,
    VL53LX_p_069: [u8; 24usize],
    VL53LX_p_070: [u8; 24usize],
    VL53LX_p_014: [u32; 24usize],
    VL53LX_p_008: [u16; 24usize],
    VL53LX_p_040: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen2_algo_detection_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen2_algo_detection_data_t>(),
        224usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_hist_gen2_algo_detection_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen2_algo_detection_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_gen2_algo_detection_data_t)
        )
    );
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_VL53LX_p_031() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_031) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_031)
            )
        );
    }
    test_field_VL53LX_p_031();
    fn test_field_VL53LX_p_069() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_069) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_069)
            )
        );
    }
    test_field_VL53LX_p_069();
    fn test_field_VL53LX_p_070() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_070) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_070)
            )
        );
    }
    test_field_VL53LX_p_070();
    fn test_field_VL53LX_p_014() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_014) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_014)
            )
        );
    }
    test_field_VL53LX_p_014();
    fn test_field_VL53LX_p_008() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_008) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_008)
            )
        );
    }
    test_field_VL53LX_p_008();
    fn test_field_VL53LX_p_040() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen2_algo_detection_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_040) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen2_algo_detection_data_t),
                "::",
                stringify!(VL53LX_p_040)
            )
        );
    }
    test_field_VL53LX_p_040();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_pulse_data_t {
    VL53LX_p_012: u8,
    VL53LX_p_019: u8,
    VL53LX_p_023: u8,
    VL53LX_p_024: u8,
    VL53LX_p_013: u8,
    VL53LX_p_025: u8,
    VL53LX_p_051: u8,
    VL53LX_p_016: i32,
    VL53LX_p_017: i32,
    VL53LX_p_010: i32,
    VL53LX_p_026: u32,
    VL53LX_p_011: u32,
    VL53LX_p_027: u32,
    VL53LX_p_002: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_hist_pulse_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_pulse_data_t>(),
        36usize,
        concat!("Size of: ", stringify!(VL53LX_hist_pulse_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_pulse_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_hist_pulse_data_t))
    );
    fn test_field_VL53LX_p_012() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_012) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_012)
            )
        );
    }
    test_field_VL53LX_p_012();
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_023() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_023) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_023)
            )
        );
    }
    test_field_VL53LX_p_023();
    fn test_field_VL53LX_p_024() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_024) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_024)
            )
        );
    }
    test_field_VL53LX_p_024();
    fn test_field_VL53LX_p_013() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_013) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_013)
            )
        );
    }
    test_field_VL53LX_p_013();
    fn test_field_VL53LX_p_025() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_025) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_025)
            )
        );
    }
    test_field_VL53LX_p_025();
    fn test_field_VL53LX_p_051() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_051) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_051)
            )
        );
    }
    test_field_VL53LX_p_051();
    fn test_field_VL53LX_p_016() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_016) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_016)
            )
        );
    }
    test_field_VL53LX_p_016();
    fn test_field_VL53LX_p_017() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_017) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_017)
            )
        );
    }
    test_field_VL53LX_p_017();
    fn test_field_VL53LX_p_010() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_010) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_010)
            )
        );
    }
    test_field_VL53LX_p_010();
    fn test_field_VL53LX_p_026() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_026) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_026)
            )
        );
    }
    test_field_VL53LX_p_026();
    fn test_field_VL53LX_p_011() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_011) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_011)
            )
        );
    }
    test_field_VL53LX_p_011();
    fn test_field_VL53LX_p_027() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_027) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_027)
            )
        );
    }
    test_field_VL53LX_p_027();
    fn test_field_VL53LX_p_002() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_pulse_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_002) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_pulse_data_t),
                "::",
                stringify!(VL53LX_p_002)
            )
        );
    }
    test_field_VL53LX_p_002();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen3_algo_private_data_t {
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    VL53LX_p_030: u8,
    VL53LX_p_039: u8,
    VL53LX_p_028: i32,
    VL53LX_p_031: i32,
    VL53LX_p_040: [u8; 24usize],
    VL53LX_p_041: [u8; 24usize],
    VL53LX_p_042: [u8; 24usize],
    VL53LX_p_052: [i32; 24usize],
    VL53LX_p_043: [i32; 24usize],
    VL53LX_p_018: [i32; 24usize],
    VL53LX_p_044: u8,
    VL53LX_p_045: u8,
    VL53LX_p_046: u8,
    VL53LX_p_003: [VL53LX_hist_pulse_data_t; 8usize],
    VL53LX_p_006: VL53LX_histogram_bin_data_t,
    VL53LX_p_047: VL53LX_histogram_bin_data_t,
    VL53LX_p_048: VL53LX_histogram_bin_data_t,
    VL53LX_p_049: VL53LX_histogram_bin_data_t,
    VL53LX_p_050: VL53LX_histogram_bin_data_t,
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen3_algo_private_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen3_algo_private_data_t>(),
        1528usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_hist_gen3_algo_private_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen3_algo_private_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_gen3_algo_private_data_t)
        )
    );
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_VL53LX_p_030() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_030) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_030)
            )
        );
    }
    test_field_VL53LX_p_030();
    fn test_field_VL53LX_p_039() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_039) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_039)
            )
        );
    }
    test_field_VL53LX_p_039();
    fn test_field_VL53LX_p_028() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_028) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_028)
            )
        );
    }
    test_field_VL53LX_p_028();
    fn test_field_VL53LX_p_031() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_031) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_031)
            )
        );
    }
    test_field_VL53LX_p_031();
    fn test_field_VL53LX_p_040() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_040) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_040)
            )
        );
    }
    test_field_VL53LX_p_040();
    fn test_field_VL53LX_p_041() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_041) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_041)
            )
        );
    }
    test_field_VL53LX_p_041();
    fn test_field_VL53LX_p_042() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_042) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_042)
            )
        );
    }
    test_field_VL53LX_p_042();
    fn test_field_VL53LX_p_052() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_052) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_052)
            )
        );
    }
    test_field_VL53LX_p_052();
    fn test_field_VL53LX_p_043() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_043) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_043)
            )
        );
    }
    test_field_VL53LX_p_043();
    fn test_field_VL53LX_p_018() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_018) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_018)
            )
        );
    }
    test_field_VL53LX_p_018();
    fn test_field_VL53LX_p_044() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_044) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_044)
            )
        );
    }
    test_field_VL53LX_p_044();
    fn test_field_VL53LX_p_045() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_045) as usize - ptr as usize
            },
            377usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_045)
            )
        );
    }
    test_field_VL53LX_p_045();
    fn test_field_VL53LX_p_046() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_046) as usize - ptr as usize
            },
            378usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_046)
            )
        );
    }
    test_field_VL53LX_p_046();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            380usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
    fn test_field_VL53LX_p_006() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_006) as usize - ptr as usize
            },
            668usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_006)
            )
        );
    }
    test_field_VL53LX_p_006();
    fn test_field_VL53LX_p_047() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_047) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_047)
            )
        );
    }
    test_field_VL53LX_p_047();
    fn test_field_VL53LX_p_048() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_048) as usize - ptr as usize
            },
            1012usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_048)
            )
        );
    }
    test_field_VL53LX_p_048();
    fn test_field_VL53LX_p_049() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_049) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_049)
            )
        );
    }
    test_field_VL53LX_p_049();
    fn test_field_VL53LX_p_050() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen3_algo_private_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_050) as usize - ptr as usize
            },
            1356usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen3_algo_private_data_t),
                "::",
                stringify!(VL53LX_p_050)
            )
        );
    }
    test_field_VL53LX_p_050();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_gen4_algo_filtered_data_t {
    VL53LX_p_019: u8,
    VL53LX_p_020: u8,
    VL53LX_p_021: u8,
    VL53LX_p_007: [i32; 24usize],
    VL53LX_p_032: [i32; 24usize],
    VL53LX_p_001: [i32; 24usize],
    VL53LX_p_053: [i32; 24usize],
    VL53LX_p_054: [i32; 24usize],
    VL53LX_p_040: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_VL53LX_hist_gen4_algo_filtered_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_gen4_algo_filtered_data_t>(),
        508usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_hist_gen4_algo_filtered_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_gen4_algo_filtered_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_gen4_algo_filtered_data_t)
        )
    );
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_VL53LX_p_021() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_021) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_021)
            )
        );
    }
    test_field_VL53LX_p_021();
    fn test_field_VL53LX_p_007() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_007) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_007)
            )
        );
    }
    test_field_VL53LX_p_007();
    fn test_field_VL53LX_p_032() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_032) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_032)
            )
        );
    }
    test_field_VL53LX_p_032();
    fn test_field_VL53LX_p_001() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_001) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_001)
            )
        );
    }
    test_field_VL53LX_p_001();
    fn test_field_VL53LX_p_053() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_053) as usize - ptr as usize
            },
            292usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_053)
            )
        );
    }
    test_field_VL53LX_p_053();
    fn test_field_VL53LX_p_054() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_054) as usize - ptr as usize
            },
            388usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_054)
            )
        );
    }
    test_field_VL53LX_p_054();
    fn test_field_VL53LX_p_040() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_hist_gen4_algo_filtered_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_040) as usize - ptr as usize
            },
            484usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_gen4_algo_filtered_data_t),
                "::",
                stringify!(VL53LX_p_040)
            )
        );
    }
    test_field_VL53LX_p_040();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_ll_version_t {
    ll_revision: u32,
    ll_major: u8,
    ll_minor: u8,
    ll_build: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_ll_version_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_ll_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(VL53LX_ll_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_ll_version_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_ll_version_t))
    );
    fn test_field_ll_revision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ll_revision) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_version_t),
                "::",
                stringify!(ll_revision)
            )
        );
    }
    test_field_ll_revision();
    fn test_field_ll_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ll_major) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_version_t),
                "::",
                stringify!(ll_major)
            )
        );
    }
    test_field_ll_major();
    fn test_field_ll_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ll_minor) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_version_t),
                "::",
                stringify!(ll_minor)
            )
        );
    }
    test_field_ll_minor();
    fn test_field_ll_build() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ll_build) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_version_t),
                "::",
                stringify!(ll_build)
            )
        );
    }
    test_field_ll_build();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_refspadchar_config_t {
    device_test_mode: u8,
    VL53LX_p_005: u8,
    timeout_us: u32,
    target_count_rate_mcps: u16,
    min_count_rate_limit_mcps: u16,
    max_count_rate_limit_mcps: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_refspadchar_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_refspadchar_config_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_refspadchar_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_refspadchar_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_refspadchar_config_t))
    );
    fn test_field_device_test_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_refspadchar_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_test_mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_refspadchar_config_t),
                "::",
                stringify!(device_test_mode)
            )
        );
    }
    test_field_device_test_mode();
    fn test_field_VL53LX_p_005() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_refspadchar_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_005) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_refspadchar_config_t),
                "::",
                stringify!(VL53LX_p_005)
            )
        );
    }
    test_field_VL53LX_p_005();
    fn test_field_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_refspadchar_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout_us) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_refspadchar_config_t),
                "::",
                stringify!(timeout_us)
            )
        );
    }
    test_field_timeout_us();
    fn test_field_target_count_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_refspadchar_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_count_rate_mcps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_refspadchar_config_t),
                "::",
                stringify!(target_count_rate_mcps)
            )
        );
    }
    test_field_target_count_rate_mcps();
    fn test_field_min_count_rate_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_refspadchar_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_count_rate_limit_mcps) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_refspadchar_config_t),
                "::",
                stringify!(min_count_rate_limit_mcps)
            )
        );
    }
    test_field_min_count_rate_limit_mcps();
    fn test_field_max_count_rate_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_refspadchar_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_count_rate_limit_mcps) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_refspadchar_config_t),
                "::",
                stringify!(max_count_rate_limit_mcps)
            )
        );
    }
    test_field_max_count_rate_limit_mcps();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalkextract_config_t {
    dss_config__target_total_rate_mcps: u16,
    phasecal_config_timeout_us: u32,
    mm_config_timeout_us: u32,
    range_config_timeout_us: u32,
    num_of_samples: u8,
    algo__crosstalk_extract_min_valid_range_mm: i16,
    algo__crosstalk_extract_max_valid_range_mm: i16,
    algo__crosstalk_extract_max_valid_rate_kcps: u16,
    algo__crosstalk_extract_max_sigma_mm: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_xtalkextract_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalkextract_config_t>(),
        28usize,
        concat!("Size of: ", stringify!(VL53LX_xtalkextract_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalkextract_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalkextract_config_t))
    );
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config_timeout_us) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(phasecal_config_timeout_us)
            )
        );
    }
    test_field_phasecal_config_timeout_us();
    fn test_field_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config_timeout_us) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(mm_config_timeout_us)
            )
        );
    }
    test_field_mm_config_timeout_us();
    fn test_field_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config_timeout_us) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(range_config_timeout_us)
            )
        );
    }
    test_field_range_config_timeout_us();
    fn test_field_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_of_samples) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(num_of_samples)
            )
        );
    }
    test_field_num_of_samples();
    fn test_field_algo__crosstalk_extract_min_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_extract_min_valid_range_mm) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(algo__crosstalk_extract_min_valid_range_mm)
            )
        );
    }
    test_field_algo__crosstalk_extract_min_valid_range_mm();
    fn test_field_algo__crosstalk_extract_max_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_extract_max_valid_range_mm) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(algo__crosstalk_extract_max_valid_range_mm)
            )
        );
    }
    test_field_algo__crosstalk_extract_max_valid_range_mm();
    fn test_field_algo__crosstalk_extract_max_valid_rate_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_extract_max_valid_rate_kcps) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(algo__crosstalk_extract_max_valid_rate_kcps)
            )
        );
    }
    test_field_algo__crosstalk_extract_max_valid_rate_kcps();
    fn test_field_algo__crosstalk_extract_max_sigma_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalkextract_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_extract_max_sigma_mm) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalkextract_config_t),
                "::",
                stringify!(algo__crosstalk_extract_max_sigma_mm)
            )
        );
    }
    test_field_algo__crosstalk_extract_max_sigma_mm();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_offsetcal_config_t {
    dss_config__target_total_rate_mcps: u16,
    phasecal_config_timeout_us: u32,
    range_config_timeout_us: u32,
    mm_config_timeout_us: u32,
    pre_num_of_samples: u8,
    mm1_num_of_samples: u8,
    mm2_num_of_samples: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_offsetcal_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_offsetcal_config_t>(),
        20usize,
        concat!("Size of: ", stringify!(VL53LX_offsetcal_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_offsetcal_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_offsetcal_config_t))
    );
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config_timeout_us) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(phasecal_config_timeout_us)
            )
        );
    }
    test_field_phasecal_config_timeout_us();
    fn test_field_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config_timeout_us) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(range_config_timeout_us)
            )
        );
    }
    test_field_range_config_timeout_us();
    fn test_field_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config_timeout_us) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(mm_config_timeout_us)
            )
        );
    }
    test_field_mm_config_timeout_us();
    fn test_field_pre_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pre_num_of_samples) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(pre_num_of_samples)
            )
        );
    }
    test_field_pre_num_of_samples();
    fn test_field_mm1_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm1_num_of_samples) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(mm1_num_of_samples)
            )
        );
    }
    test_field_mm1_num_of_samples();
    fn test_field_mm2_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offsetcal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm2_num_of_samples) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offsetcal_config_t),
                "::",
                stringify!(mm2_num_of_samples)
            )
        );
    }
    test_field_mm2_num_of_samples();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zonecal_config_t {
    dss_config__target_total_rate_mcps: u16,
    phasecal_config_timeout_us: u32,
    mm_config_timeout_us: u32,
    range_config_timeout_us: u32,
    phasecal_num_of_samples: u16,
    zone_num_of_samples: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_zonecal_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zonecal_config_t>(),
        20usize,
        concat!("Size of: ", stringify!(VL53LX_zonecal_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zonecal_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_zonecal_config_t))
    );
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zonecal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zonecal_config_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zonecal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config_timeout_us) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zonecal_config_t),
                "::",
                stringify!(phasecal_config_timeout_us)
            )
        );
    }
    test_field_phasecal_config_timeout_us();
    fn test_field_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zonecal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config_timeout_us) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zonecal_config_t),
                "::",
                stringify!(mm_config_timeout_us)
            )
        );
    }
    test_field_mm_config_timeout_us();
    fn test_field_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zonecal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config_timeout_us) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zonecal_config_t),
                "::",
                stringify!(range_config_timeout_us)
            )
        );
    }
    test_field_range_config_timeout_us();
    fn test_field_phasecal_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zonecal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_num_of_samples) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zonecal_config_t),
                "::",
                stringify!(phasecal_num_of_samples)
            )
        );
    }
    test_field_phasecal_num_of_samples();
    fn test_field_zone_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zonecal_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_num_of_samples) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zonecal_config_t),
                "::",
                stringify!(zone_num_of_samples)
            )
        );
    }
    test_field_zone_num_of_samples();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_ssc_config_t {
    array_select: VL53LX_DeviceSscArray,
    VL53LX_p_005: u8,
    vcsel_start: u8,
    vcsel_width: u8,
    timeout_us: u32,
    rate_limit_mcps: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_ssc_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_ssc_config_t>(),
        12usize,
        concat!("Size of: ", stringify!(VL53LX_ssc_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_ssc_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_ssc_config_t))
    );
    fn test_field_array_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ssc_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).array_select) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ssc_config_t),
                "::",
                stringify!(array_select)
            )
        );
    }
    test_field_array_select();
    fn test_field_VL53LX_p_005() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ssc_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_005) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ssc_config_t),
                "::",
                stringify!(VL53LX_p_005)
            )
        );
    }
    test_field_VL53LX_p_005();
    fn test_field_vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ssc_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcsel_start) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ssc_config_t),
                "::",
                stringify!(vcsel_start)
            )
        );
    }
    test_field_vcsel_start();
    fn test_field_vcsel_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ssc_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vcsel_width) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ssc_config_t),
                "::",
                stringify!(vcsel_width)
            )
        );
    }
    test_field_vcsel_width();
    fn test_field_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ssc_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeout_us) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ssc_config_t),
                "::",
                stringify!(timeout_us)
            )
        );
    }
    test_field_timeout_us();
    fn test_field_rate_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ssc_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate_limit_mcps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ssc_config_t),
                "::",
                stringify!(rate_limit_mcps)
            )
        );
    }
    test_field_rate_limit_mcps();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_config_t {
    algo__crosstalk_compensation_plane_offset_kcps: u32,
    algo__crosstalk_compensation_x_plane_gradient_kcps: i16,
    algo__crosstalk_compensation_y_plane_gradient_kcps: i16,
    nvm_default__crosstalk_compensation_plane_offset_kcps: u32,
    nvm_default__crosstalk_compensation_x_plane_gradient_kcps: i16,
    nvm_default__crosstalk_compensation_y_plane_gradient_kcps: i16,
    global_crosstalk_compensation_enable: u8,
    histogram_mode_crosstalk_margin_kcps: i16,
    lite_mode_crosstalk_margin_kcps: i16,
    crosstalk_range_ignore_threshold_mult: u8,
    crosstalk_range_ignore_threshold_rate_mcps: u16,
    algo__crosstalk_detect_min_valid_range_mm: i16,
    algo__crosstalk_detect_max_valid_range_mm: i16,
    algo__crosstalk_detect_max_valid_rate_kcps: u16,
    algo__crosstalk_detect_max_sigma_mm: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_config_t>(),
        36usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_config_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_config_t))
    );
    fn test_field_algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_plane_offset_kcps) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_x_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_y_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_nvm_default__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_default__crosstalk_compensation_plane_offset_kcps)
                    as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(nvm_default__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_nvm_default__crosstalk_compensation_plane_offset_kcps();
    fn test_field_nvm_default__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm_default__crosstalk_compensation_x_plane_gradient_kcps
                ) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(nvm_default__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_nvm_default__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_nvm_default__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm_default__crosstalk_compensation_y_plane_gradient_kcps
                ) as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(nvm_default__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_nvm_default__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_global_crosstalk_compensation_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_crosstalk_compensation_enable) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(global_crosstalk_compensation_enable)
            )
        );
    }
    test_field_global_crosstalk_compensation_enable();
    fn test_field_histogram_mode_crosstalk_margin_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_mode_crosstalk_margin_kcps) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(histogram_mode_crosstalk_margin_kcps)
            )
        );
    }
    test_field_histogram_mode_crosstalk_margin_kcps();
    fn test_field_lite_mode_crosstalk_margin_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lite_mode_crosstalk_margin_kcps) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(lite_mode_crosstalk_margin_kcps)
            )
        );
    }
    test_field_lite_mode_crosstalk_margin_kcps();
    fn test_field_crosstalk_range_ignore_threshold_mult() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crosstalk_range_ignore_threshold_mult) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(crosstalk_range_ignore_threshold_mult)
            )
        );
    }
    test_field_crosstalk_range_ignore_threshold_mult();
    fn test_field_crosstalk_range_ignore_threshold_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crosstalk_range_ignore_threshold_rate_mcps) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(crosstalk_range_ignore_threshold_rate_mcps)
            )
        );
    }
    test_field_crosstalk_range_ignore_threshold_rate_mcps();
    fn test_field_algo__crosstalk_detect_min_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_min_valid_range_mm) as usize
                    - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_detect_min_valid_range_mm)
            )
        );
    }
    test_field_algo__crosstalk_detect_min_valid_range_mm();
    fn test_field_algo__crosstalk_detect_max_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_max_valid_range_mm) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_detect_max_valid_range_mm)
            )
        );
    }
    test_field_algo__crosstalk_detect_max_valid_range_mm();
    fn test_field_algo__crosstalk_detect_max_valid_rate_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_max_valid_rate_kcps) as usize
                    - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_detect_max_valid_rate_kcps)
            )
        );
    }
    test_field_algo__crosstalk_detect_max_valid_rate_kcps();
    fn test_field_algo__crosstalk_detect_max_sigma_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_detect_max_sigma_mm) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_config_t),
                "::",
                stringify!(algo__crosstalk_detect_max_sigma_mm)
            )
        );
    }
    test_field_algo__crosstalk_detect_max_sigma_mm();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_tuning_parm_storage_t {
    tp_tuning_parm_version: u16,
    tp_tuning_parm_key_table_version: u16,
    tp_tuning_parm_lld_version: u16,
    tp_init_phase_rtn_lite_long: u8,
    tp_init_phase_rtn_lite_med: u8,
    tp_init_phase_rtn_lite_short: u8,
    tp_init_phase_ref_lite_long: u8,
    tp_init_phase_ref_lite_med: u8,
    tp_init_phase_ref_lite_short: u8,
    tp_init_phase_rtn_hist_long: u8,
    tp_init_phase_rtn_hist_med: u8,
    tp_init_phase_rtn_hist_short: u8,
    tp_init_phase_ref_hist_long: u8,
    tp_init_phase_ref_hist_med: u8,
    tp_init_phase_ref_hist_short: u8,
    tp_consistency_lite_phase_tolerance: u8,
    tp_phasecal_target: u8,
    tp_cal_repeat_rate: u16,
    tp_lite_min_clip: u8,
    tp_lite_long_sigma_thresh_mm: u16,
    tp_lite_med_sigma_thresh_mm: u16,
    tp_lite_short_sigma_thresh_mm: u16,
    tp_lite_long_min_count_rate_rtn_mcps: u16,
    tp_lite_med_min_count_rate_rtn_mcps: u16,
    tp_lite_short_min_count_rate_rtn_mcps: u16,
    tp_lite_sigma_est_pulse_width_ns: u8,
    tp_lite_sigma_est_amb_width_ns: u8,
    tp_lite_sigma_ref_mm: u8,
    tp_lite_seed_cfg: u8,
    tp_timed_seed_cfg: u8,
    tp_lite_quantifier: u8,
    tp_lite_first_order_select: u8,
    tp_dss_target_lite_mcps: u16,
    tp_dss_target_histo_mcps: u16,
    tp_dss_target_histo_mz_mcps: u16,
    tp_dss_target_timed_mcps: u16,
    tp_dss_target_very_short_mcps: u16,
    tp_phasecal_timeout_lite_us: u32,
    tp_phasecal_timeout_hist_long_us: u32,
    tp_phasecal_timeout_hist_med_us: u32,
    tp_phasecal_timeout_hist_short_us: u32,
    tp_phasecal_timeout_mz_long_us: u32,
    tp_phasecal_timeout_mz_med_us: u32,
    tp_phasecal_timeout_mz_short_us: u32,
    tp_phasecal_timeout_timed_us: u32,
    tp_mm_timeout_lite_us: u32,
    tp_mm_timeout_histo_us: u32,
    tp_mm_timeout_mz_us: u32,
    tp_mm_timeout_timed_us: u32,
    tp_mm_timeout_lpa_us: u32,
    tp_range_timeout_lite_us: u32,
    tp_range_timeout_histo_us: u32,
    tp_range_timeout_mz_us: u32,
    tp_range_timeout_timed_us: u32,
    tp_range_timeout_lpa_us: u32,
    tp_phasecal_patch_power: u32,
    tp_hist_merge: u32,
    tp_reset_merge_threshold: u32,
    tp_hist_merge_max_size: u32,
}
#[test]
fn bindgen_test_layout_VL53LX_tuning_parm_storage_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_tuning_parm_storage_t>(),
        144usize,
        concat!("Size of: ", stringify!(VL53LX_tuning_parm_storage_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_tuning_parm_storage_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_tuning_parm_storage_t))
    );
    fn test_field_tp_tuning_parm_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_tuning_parm_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_tuning_parm_version)
            )
        );
    }
    test_field_tp_tuning_parm_version();
    fn test_field_tp_tuning_parm_key_table_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_tuning_parm_key_table_version) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_tuning_parm_key_table_version)
            )
        );
    }
    test_field_tp_tuning_parm_key_table_version();
    fn test_field_tp_tuning_parm_lld_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_tuning_parm_lld_version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_tuning_parm_lld_version)
            )
        );
    }
    test_field_tp_tuning_parm_lld_version();
    fn test_field_tp_init_phase_rtn_lite_long() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_rtn_lite_long) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_rtn_lite_long)
            )
        );
    }
    test_field_tp_init_phase_rtn_lite_long();
    fn test_field_tp_init_phase_rtn_lite_med() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_rtn_lite_med) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_rtn_lite_med)
            )
        );
    }
    test_field_tp_init_phase_rtn_lite_med();
    fn test_field_tp_init_phase_rtn_lite_short() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_rtn_lite_short) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_rtn_lite_short)
            )
        );
    }
    test_field_tp_init_phase_rtn_lite_short();
    fn test_field_tp_init_phase_ref_lite_long() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_ref_lite_long) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_ref_lite_long)
            )
        );
    }
    test_field_tp_init_phase_ref_lite_long();
    fn test_field_tp_init_phase_ref_lite_med() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_ref_lite_med) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_ref_lite_med)
            )
        );
    }
    test_field_tp_init_phase_ref_lite_med();
    fn test_field_tp_init_phase_ref_lite_short() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_ref_lite_short) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_ref_lite_short)
            )
        );
    }
    test_field_tp_init_phase_ref_lite_short();
    fn test_field_tp_init_phase_rtn_hist_long() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_rtn_hist_long) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_rtn_hist_long)
            )
        );
    }
    test_field_tp_init_phase_rtn_hist_long();
    fn test_field_tp_init_phase_rtn_hist_med() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_rtn_hist_med) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_rtn_hist_med)
            )
        );
    }
    test_field_tp_init_phase_rtn_hist_med();
    fn test_field_tp_init_phase_rtn_hist_short() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_rtn_hist_short) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_rtn_hist_short)
            )
        );
    }
    test_field_tp_init_phase_rtn_hist_short();
    fn test_field_tp_init_phase_ref_hist_long() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_ref_hist_long) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_ref_hist_long)
            )
        );
    }
    test_field_tp_init_phase_ref_hist_long();
    fn test_field_tp_init_phase_ref_hist_med() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_ref_hist_med) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_ref_hist_med)
            )
        );
    }
    test_field_tp_init_phase_ref_hist_med();
    fn test_field_tp_init_phase_ref_hist_short() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_init_phase_ref_hist_short) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_init_phase_ref_hist_short)
            )
        );
    }
    test_field_tp_init_phase_ref_hist_short();
    fn test_field_tp_consistency_lite_phase_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_consistency_lite_phase_tolerance) as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_consistency_lite_phase_tolerance)
            )
        );
    }
    test_field_tp_consistency_lite_phase_tolerance();
    fn test_field_tp_phasecal_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_target) as usize - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_target)
            )
        );
    }
    test_field_tp_phasecal_target();
    fn test_field_tp_cal_repeat_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_cal_repeat_rate) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_cal_repeat_rate)
            )
        );
    }
    test_field_tp_cal_repeat_rate();
    fn test_field_tp_lite_min_clip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_min_clip) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_min_clip)
            )
        );
    }
    test_field_tp_lite_min_clip();
    fn test_field_tp_lite_long_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_long_sigma_thresh_mm) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_long_sigma_thresh_mm)
            )
        );
    }
    test_field_tp_lite_long_sigma_thresh_mm();
    fn test_field_tp_lite_med_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_med_sigma_thresh_mm) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_med_sigma_thresh_mm)
            )
        );
    }
    test_field_tp_lite_med_sigma_thresh_mm();
    fn test_field_tp_lite_short_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_short_sigma_thresh_mm) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_short_sigma_thresh_mm)
            )
        );
    }
    test_field_tp_lite_short_sigma_thresh_mm();
    fn test_field_tp_lite_long_min_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_long_min_count_rate_rtn_mcps) as usize
                    - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_long_min_count_rate_rtn_mcps)
            )
        );
    }
    test_field_tp_lite_long_min_count_rate_rtn_mcps();
    fn test_field_tp_lite_med_min_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_med_min_count_rate_rtn_mcps) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_med_min_count_rate_rtn_mcps)
            )
        );
    }
    test_field_tp_lite_med_min_count_rate_rtn_mcps();
    fn test_field_tp_lite_short_min_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_short_min_count_rate_rtn_mcps) as usize
                    - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_short_min_count_rate_rtn_mcps)
            )
        );
    }
    test_field_tp_lite_short_min_count_rate_rtn_mcps();
    fn test_field_tp_lite_sigma_est_pulse_width_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_sigma_est_pulse_width_ns) as usize
                    - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_sigma_est_pulse_width_ns)
            )
        );
    }
    test_field_tp_lite_sigma_est_pulse_width_ns();
    fn test_field_tp_lite_sigma_est_amb_width_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_sigma_est_amb_width_ns) as usize - ptr as usize
            },
            37usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_sigma_est_amb_width_ns)
            )
        );
    }
    test_field_tp_lite_sigma_est_amb_width_ns();
    fn test_field_tp_lite_sigma_ref_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_sigma_ref_mm) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_sigma_ref_mm)
            )
        );
    }
    test_field_tp_lite_sigma_ref_mm();
    fn test_field_tp_lite_seed_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_seed_cfg) as usize - ptr as usize
            },
            39usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_seed_cfg)
            )
        );
    }
    test_field_tp_lite_seed_cfg();
    fn test_field_tp_timed_seed_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_timed_seed_cfg) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_timed_seed_cfg)
            )
        );
    }
    test_field_tp_timed_seed_cfg();
    fn test_field_tp_lite_quantifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_quantifier) as usize - ptr as usize
            },
            41usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_quantifier)
            )
        );
    }
    test_field_tp_lite_quantifier();
    fn test_field_tp_lite_first_order_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_lite_first_order_select) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_lite_first_order_select)
            )
        );
    }
    test_field_tp_lite_first_order_select();
    fn test_field_tp_dss_target_lite_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_dss_target_lite_mcps) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_dss_target_lite_mcps)
            )
        );
    }
    test_field_tp_dss_target_lite_mcps();
    fn test_field_tp_dss_target_histo_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_dss_target_histo_mcps) as usize - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_dss_target_histo_mcps)
            )
        );
    }
    test_field_tp_dss_target_histo_mcps();
    fn test_field_tp_dss_target_histo_mz_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_dss_target_histo_mz_mcps) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_dss_target_histo_mz_mcps)
            )
        );
    }
    test_field_tp_dss_target_histo_mz_mcps();
    fn test_field_tp_dss_target_timed_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_dss_target_timed_mcps) as usize - ptr as usize
            },
            50usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_dss_target_timed_mcps)
            )
        );
    }
    test_field_tp_dss_target_timed_mcps();
    fn test_field_tp_dss_target_very_short_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_dss_target_very_short_mcps) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_dss_target_very_short_mcps)
            )
        );
    }
    test_field_tp_dss_target_very_short_mcps();
    fn test_field_tp_phasecal_timeout_lite_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_lite_us) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_lite_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_lite_us();
    fn test_field_tp_phasecal_timeout_hist_long_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_hist_long_us) as usize
                    - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_hist_long_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_hist_long_us();
    fn test_field_tp_phasecal_timeout_hist_med_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_hist_med_us) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_hist_med_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_hist_med_us();
    fn test_field_tp_phasecal_timeout_hist_short_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_hist_short_us) as usize
                    - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_hist_short_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_hist_short_us();
    fn test_field_tp_phasecal_timeout_mz_long_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_mz_long_us) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_mz_long_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_mz_long_us();
    fn test_field_tp_phasecal_timeout_mz_med_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_mz_med_us) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_mz_med_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_mz_med_us();
    fn test_field_tp_phasecal_timeout_mz_short_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_mz_short_us) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_mz_short_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_mz_short_us();
    fn test_field_tp_phasecal_timeout_timed_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_timeout_timed_us) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_timeout_timed_us)
            )
        );
    }
    test_field_tp_phasecal_timeout_timed_us();
    fn test_field_tp_mm_timeout_lite_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_mm_timeout_lite_us) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_mm_timeout_lite_us)
            )
        );
    }
    test_field_tp_mm_timeout_lite_us();
    fn test_field_tp_mm_timeout_histo_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_mm_timeout_histo_us) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_mm_timeout_histo_us)
            )
        );
    }
    test_field_tp_mm_timeout_histo_us();
    fn test_field_tp_mm_timeout_mz_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_mm_timeout_mz_us) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_mm_timeout_mz_us)
            )
        );
    }
    test_field_tp_mm_timeout_mz_us();
    fn test_field_tp_mm_timeout_timed_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_mm_timeout_timed_us) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_mm_timeout_timed_us)
            )
        );
    }
    test_field_tp_mm_timeout_timed_us();
    fn test_field_tp_mm_timeout_lpa_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_mm_timeout_lpa_us) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_mm_timeout_lpa_us)
            )
        );
    }
    test_field_tp_mm_timeout_lpa_us();
    fn test_field_tp_range_timeout_lite_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_range_timeout_lite_us) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_range_timeout_lite_us)
            )
        );
    }
    test_field_tp_range_timeout_lite_us();
    fn test_field_tp_range_timeout_histo_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_range_timeout_histo_us) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_range_timeout_histo_us)
            )
        );
    }
    test_field_tp_range_timeout_histo_us();
    fn test_field_tp_range_timeout_mz_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_range_timeout_mz_us) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_range_timeout_mz_us)
            )
        );
    }
    test_field_tp_range_timeout_mz_us();
    fn test_field_tp_range_timeout_timed_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_range_timeout_timed_us) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_range_timeout_timed_us)
            )
        );
    }
    test_field_tp_range_timeout_timed_us();
    fn test_field_tp_range_timeout_lpa_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_range_timeout_lpa_us) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_range_timeout_lpa_us)
            )
        );
    }
    test_field_tp_range_timeout_lpa_us();
    fn test_field_tp_phasecal_patch_power() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_phasecal_patch_power) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_phasecal_patch_power)
            )
        );
    }
    test_field_tp_phasecal_patch_power();
    fn test_field_tp_hist_merge() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_hist_merge) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_hist_merge)
            )
        );
    }
    test_field_tp_hist_merge();
    fn test_field_tp_reset_merge_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_reset_merge_threshold) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_reset_merge_threshold)
            )
        );
    }
    test_field_tp_reset_merge_threshold();
    fn test_field_tp_hist_merge_max_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parm_storage_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tp_hist_merge_max_size) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parm_storage_t),
                "::",
                stringify!(tp_hist_merge_max_size)
            )
        );
    }
    test_field_tp_hist_merge_max_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_optical_centre_t {
    x_centre: u8,
    y_centre: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_optical_centre_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_optical_centre_t>(),
        2usize,
        concat!("Size of: ", stringify!(VL53LX_optical_centre_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_optical_centre_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_optical_centre_t))
    );
    fn test_field_x_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_optical_centre_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_centre) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_optical_centre_t),
                "::",
                stringify!(x_centre)
            )
        );
    }
    test_field_x_centre();
    fn test_field_y_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_optical_centre_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_centre) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_optical_centre_t),
                "::",
                stringify!(y_centre)
            )
        );
    }
    test_field_y_centre();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_user_zone_t {
    x_centre: u8,
    y_centre: u8,
    width: u8,
    height: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_user_zone_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_user_zone_t>(),
        4usize,
        concat!("Size of: ", stringify!(VL53LX_user_zone_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_user_zone_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_user_zone_t))
    );
    fn test_field_x_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_user_zone_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_centre) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_user_zone_t),
                "::",
                stringify!(x_centre)
            )
        );
    }
    test_field_x_centre();
    fn test_field_y_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_user_zone_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_centre) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_user_zone_t),
                "::",
                stringify!(y_centre)
            )
        );
    }
    test_field_y_centre();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_user_zone_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_user_zone_t),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_user_zone_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_user_zone_t),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_config_t {
    max_zones: u8,
    active_zones: u8,
    multizone_hist_cfg: VL53LX_histogram_config_t,
    user_zones: [VL53LX_user_zone_t; 16usize],
    bin_config: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_VL53LX_zone_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_config_t>(),
        108usize,
        concat!("Size of: ", stringify!(VL53LX_zone_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_config_t))
    );
    fn test_field_max_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_zones) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_config_t),
                "::",
                stringify!(max_zones)
            )
        );
    }
    test_field_max_zones();
    fn test_field_active_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_zones) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_config_t),
                "::",
                stringify!(active_zones)
            )
        );
    }
    test_field_active_zones();
    fn test_field_multizone_hist_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).multizone_hist_cfg) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_config_t),
                "::",
                stringify!(multizone_hist_cfg)
            )
        );
    }
    test_field_multizone_hist_cfg();
    fn test_field_user_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_zones) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_config_t),
                "::",
                stringify!(user_zones)
            )
        );
    }
    test_field_user_zones();
    fn test_field_bin_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_config) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_config_t),
                "::",
                stringify!(bin_config)
            )
        );
    }
    test_field_bin_config();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_GPIO_interrupt_config_t {
    intr_mode_distance: VL53LX_GPIO_Interrupt_Mode,
    intr_mode_rate: VL53LX_GPIO_Interrupt_Mode,
    intr_new_measure_ready: u8,
    intr_no_target: u8,
    intr_combined_mode: u8,
    threshold_distance_high: u16,
    threshold_distance_low: u16,
    threshold_rate_high: u16,
    threshold_rate_low: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_GPIO_interrupt_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_GPIO_interrupt_config_t>(),
        14usize,
        concat!("Size of: ", stringify!(VL53LX_GPIO_interrupt_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_GPIO_interrupt_config_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_GPIO_interrupt_config_t))
    );
    fn test_field_intr_mode_distance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intr_mode_distance) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(intr_mode_distance)
            )
        );
    }
    test_field_intr_mode_distance();
    fn test_field_intr_mode_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intr_mode_rate) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(intr_mode_rate)
            )
        );
    }
    test_field_intr_mode_rate();
    fn test_field_intr_new_measure_ready() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intr_new_measure_ready) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(intr_new_measure_ready)
            )
        );
    }
    test_field_intr_new_measure_ready();
    fn test_field_intr_no_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intr_no_target) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(intr_no_target)
            )
        );
    }
    test_field_intr_no_target();
    fn test_field_intr_combined_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intr_combined_mode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(intr_combined_mode)
            )
        );
    }
    test_field_intr_combined_mode();
    fn test_field_threshold_distance_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threshold_distance_high) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(threshold_distance_high)
            )
        );
    }
    test_field_threshold_distance_high();
    fn test_field_threshold_distance_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threshold_distance_low) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(threshold_distance_low)
            )
        );
    }
    test_field_threshold_distance_low();
    fn test_field_threshold_rate_high() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threshold_rate_high) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(threshold_rate_high)
            )
        );
    }
    test_field_threshold_rate_high();
    fn test_field_threshold_rate_low() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_GPIO_interrupt_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).threshold_rate_low) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_GPIO_interrupt_config_t),
                "::",
                stringify!(threshold_rate_low)
            )
        );
    }
    test_field_threshold_rate_low();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_low_power_auto_data_t {
    vhv_loop_bound: u8,
    is_low_power_auto_mode: u8,
    low_power_auto_range_count: u8,
    saved_interrupt_config: u8,
    saved_vhv_init: u8,
    saved_vhv_timeout: u8,
    first_run_phasecal_result: u8,
    dss__total_rate_per_spad_mcps: u32,
    dss__required_spads: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_low_power_auto_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_low_power_auto_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_low_power_auto_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_low_power_auto_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_low_power_auto_data_t))
    );
    fn test_field_vhv_loop_bound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vhv_loop_bound) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(vhv_loop_bound)
            )
        );
    }
    test_field_vhv_loop_bound();
    fn test_field_is_low_power_auto_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_low_power_auto_mode) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(is_low_power_auto_mode)
            )
        );
    }
    test_field_is_low_power_auto_mode();
    fn test_field_low_power_auto_range_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).low_power_auto_range_count) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(low_power_auto_range_count)
            )
        );
    }
    test_field_low_power_auto_range_count();
    fn test_field_saved_interrupt_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).saved_interrupt_config) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(saved_interrupt_config)
            )
        );
    }
    test_field_saved_interrupt_config();
    fn test_field_saved_vhv_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).saved_vhv_init) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(saved_vhv_init)
            )
        );
    }
    test_field_saved_vhv_init();
    fn test_field_saved_vhv_timeout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).saved_vhv_timeout) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(saved_vhv_timeout)
            )
        );
    }
    test_field_saved_vhv_timeout();
    fn test_field_first_run_phasecal_result() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_run_phasecal_result) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(first_run_phasecal_result)
            )
        );
    }
    test_field_first_run_phasecal_result();
    fn test_field_dss__total_rate_per_spad_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss__total_rate_per_spad_mcps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(dss__total_rate_per_spad_mcps)
            )
        );
    }
    test_field_dss__total_rate_per_spad_mcps();
    fn test_field_dss__required_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_low_power_auto_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss__required_spads) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_low_power_auto_data_t),
                "::",
                stringify!(dss__required_spads)
            )
        );
    }
    test_field_dss__required_spads();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_smudge_corrector_config_t {
    smudge_corr_enabled: u8,
    smudge_corr_apply_enabled: u8,
    smudge_corr_single_apply: u8,
    smudge_margin: u16,
    noise_margin: u32,
    user_xtalk_offset_limit: u32,
    user_xtalk_offset_limit_hi: u8,
    sample_limit: u32,
    single_xtalk_delta: u32,
    averaged_xtalk_delta: u32,
    smudge_corr_clip_limit: u32,
    smudge_corr_ambient_threshold: u32,
    scaler_calc_method: u8,
    x_gradient_scaler: i16,
    y_gradient_scaler: i16,
    user_scaler_set: u8,
    nodetect_ambient_threshold: u32,
    nodetect_sample_limit: u32,
    nodetect_xtalk_offset: u32,
    nodetect_min_range_mm: u16,
    max_smudge_factor: u32,
}
#[test]
fn bindgen_test_layout_VL53LX_smudge_corrector_config_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_smudge_corrector_config_t>(),
        68usize,
        concat!("Size of: ", stringify!(VL53LX_smudge_corrector_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_smudge_corrector_config_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_smudge_corrector_config_t)
        )
    );
    fn test_field_smudge_corr_enabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_enabled) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(smudge_corr_enabled)
            )
        );
    }
    test_field_smudge_corr_enabled();
    fn test_field_smudge_corr_apply_enabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_apply_enabled) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(smudge_corr_apply_enabled)
            )
        );
    }
    test_field_smudge_corr_apply_enabled();
    fn test_field_smudge_corr_single_apply() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_single_apply) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(smudge_corr_single_apply)
            )
        );
    }
    test_field_smudge_corr_single_apply();
    fn test_field_smudge_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_margin) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(smudge_margin)
            )
        );
    }
    test_field_smudge_margin();
    fn test_field_noise_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).noise_margin) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(noise_margin)
            )
        );
    }
    test_field_noise_margin();
    fn test_field_user_xtalk_offset_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_xtalk_offset_limit) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(user_xtalk_offset_limit)
            )
        );
    }
    test_field_user_xtalk_offset_limit();
    fn test_field_user_xtalk_offset_limit_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_xtalk_offset_limit_hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(user_xtalk_offset_limit_hi)
            )
        );
    }
    test_field_user_xtalk_offset_limit_hi();
    fn test_field_sample_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sample_limit) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(sample_limit)
            )
        );
    }
    test_field_sample_limit();
    fn test_field_single_xtalk_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).single_xtalk_delta) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(single_xtalk_delta)
            )
        );
    }
    test_field_single_xtalk_delta();
    fn test_field_averaged_xtalk_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).averaged_xtalk_delta) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(averaged_xtalk_delta)
            )
        );
    }
    test_field_averaged_xtalk_delta();
    fn test_field_smudge_corr_clip_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_clip_limit) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(smudge_corr_clip_limit)
            )
        );
    }
    test_field_smudge_corr_clip_limit();
    fn test_field_smudge_corr_ambient_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_ambient_threshold) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(smudge_corr_ambient_threshold)
            )
        );
    }
    test_field_smudge_corr_ambient_threshold();
    fn test_field_scaler_calc_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scaler_calc_method) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(scaler_calc_method)
            )
        );
    }
    test_field_scaler_calc_method();
    fn test_field_x_gradient_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x_gradient_scaler) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(x_gradient_scaler)
            )
        );
    }
    test_field_x_gradient_scaler();
    fn test_field_y_gradient_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y_gradient_scaler) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(y_gradient_scaler)
            )
        );
    }
    test_field_y_gradient_scaler();
    fn test_field_user_scaler_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_scaler_set) as usize - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(user_scaler_set)
            )
        );
    }
    test_field_user_scaler_set();
    fn test_field_nodetect_ambient_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodetect_ambient_threshold) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(nodetect_ambient_threshold)
            )
        );
    }
    test_field_nodetect_ambient_threshold();
    fn test_field_nodetect_sample_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodetect_sample_limit) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(nodetect_sample_limit)
            )
        );
    }
    test_field_nodetect_sample_limit();
    fn test_field_nodetect_xtalk_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodetect_xtalk_offset) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(nodetect_xtalk_offset)
            )
        );
    }
    test_field_nodetect_xtalk_offset();
    fn test_field_nodetect_min_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodetect_min_range_mm) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(nodetect_min_range_mm)
            )
        );
    }
    test_field_nodetect_min_range_mm();
    fn test_field_max_smudge_factor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_config_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_smudge_factor) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_config_t),
                "::",
                stringify!(max_smudge_factor)
            )
        );
    }
    test_field_max_smudge_factor();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_smudge_corrector_internals_t {
    current_samples: u32,
    required_samples: u32,
    accumulator: u64,
    nodetect_counter: u32,
}
#[test]
fn bindgen_test_layout_VL53LX_smudge_corrector_internals_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_smudge_corrector_internals_t>(),
        24usize,
        concat!("Size of: ", stringify!(VL53LX_smudge_corrector_internals_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_smudge_corrector_internals_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_smudge_corrector_internals_t)
        )
    );
    fn test_field_current_samples() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_internals_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_samples) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_internals_t),
                "::",
                stringify!(current_samples)
            )
        );
    }
    test_field_current_samples();
    fn test_field_required_samples() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_internals_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).required_samples) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_internals_t),
                "::",
                stringify!(required_samples)
            )
        );
    }
    test_field_required_samples();
    fn test_field_accumulator() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_internals_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accumulator) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_internals_t),
                "::",
                stringify!(accumulator)
            )
        );
    }
    test_field_accumulator();
    fn test_field_nodetect_counter() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_internals_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nodetect_counter) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_internals_t),
                "::",
                stringify!(nodetect_counter)
            )
        );
    }
    test_field_nodetect_counter();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_smudge_corrector_data_t {
    smudge_corr_valid: u8,
    smudge_corr_clipped: u8,
    single_xtalk_delta_flag: u8,
    averaged_xtalk_delta_flag: u8,
    sample_limit_exceeded_flag: u8,
    gradient_zero_flag: u8,
    new_xtalk_applied_flag: u8,
    algo__crosstalk_compensation_plane_offset_kcps: u32,
    algo__crosstalk_compensation_x_plane_gradient_kcps: i16,
    algo__crosstalk_compensation_y_plane_gradient_kcps: i16,
}
#[test]
fn bindgen_test_layout_VL53LX_smudge_corrector_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_smudge_corrector_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_smudge_corrector_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_smudge_corrector_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_smudge_corrector_data_t))
    );
    fn test_field_smudge_corr_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_valid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(smudge_corr_valid)
            )
        );
    }
    test_field_smudge_corr_valid();
    fn test_field_smudge_corr_clipped() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corr_clipped) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(smudge_corr_clipped)
            )
        );
    }
    test_field_smudge_corr_clipped();
    fn test_field_single_xtalk_delta_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).single_xtalk_delta_flag) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(single_xtalk_delta_flag)
            )
        );
    }
    test_field_single_xtalk_delta_flag();
    fn test_field_averaged_xtalk_delta_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).averaged_xtalk_delta_flag) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(averaged_xtalk_delta_flag)
            )
        );
    }
    test_field_averaged_xtalk_delta_flag();
    fn test_field_sample_limit_exceeded_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sample_limit_exceeded_flag) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(sample_limit_exceeded_flag)
            )
        );
    }
    test_field_sample_limit_exceeded_flag();
    fn test_field_gradient_zero_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gradient_zero_flag) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(gradient_zero_flag)
            )
        );
    }
    test_field_gradient_zero_flag();
    fn test_field_new_xtalk_applied_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).new_xtalk_applied_flag) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(new_xtalk_applied_flag)
            )
        );
    }
    test_field_new_xtalk_applied_flag();
    fn test_field_algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_plane_offset_kcps) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_x_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_smudge_corrector_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_y_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_smudge_corrector_data_t),
                "::",
                stringify!(algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_y_plane_gradient_kcps();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_range_data_t {
    range_id: u8,
    time_stamp: u32,
    VL53LX_p_012: u8,
    VL53LX_p_019: u8,
    VL53LX_p_023: u8,
    VL53LX_p_024: u8,
    VL53LX_p_013: u8,
    VL53LX_p_025: u8,
    width: u16,
    VL53LX_p_029: u8,
    fast_osc_frequency: u16,
    zero_distance_phase: u16,
    VL53LX_p_004: u16,
    total_periods_elapsed: u32,
    peak_duration_us: u32,
    woi_duration_us: u32,
    VL53LX_p_016: u32,
    VL53LX_p_017: u32,
    VL53LX_p_010: i32,
    peak_signal_count_rate_mcps: u16,
    avg_signal_count_rate_mcps: u16,
    ambient_count_rate_mcps: u16,
    total_rate_per_spad_mcps: u16,
    VL53LX_p_009: u32,
    VL53LX_p_002: u16,
    VL53LX_p_026: u16,
    VL53LX_p_011: u16,
    VL53LX_p_027: u16,
    min_range_mm: i16,
    median_range_mm: i16,
    max_range_mm: i16,
    range_status: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_range_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_range_data_t>(),
        76usize,
        concat!("Size of: ", stringify!(VL53LX_range_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_range_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_range_data_t))
    );
    fn test_field_range_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(range_id)
            )
        );
    }
    test_field_range_id();
    fn test_field_time_stamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time_stamp) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(time_stamp)
            )
        );
    }
    test_field_time_stamp();
    fn test_field_VL53LX_p_012() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_012) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_012)
            )
        );
    }
    test_field_VL53LX_p_012();
    fn test_field_VL53LX_p_019() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_019) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_019)
            )
        );
    }
    test_field_VL53LX_p_019();
    fn test_field_VL53LX_p_023() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_023) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_023)
            )
        );
    }
    test_field_VL53LX_p_023();
    fn test_field_VL53LX_p_024() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_024) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_024)
            )
        );
    }
    test_field_VL53LX_p_024();
    fn test_field_VL53LX_p_013() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_013) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_013)
            )
        );
    }
    test_field_VL53LX_p_013();
    fn test_field_VL53LX_p_025() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_025) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_025)
            )
        );
    }
    test_field_VL53LX_p_025();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_VL53LX_p_029() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_029) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_029)
            )
        );
    }
    test_field_VL53LX_p_029();
    fn test_field_fast_osc_frequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fast_osc_frequency) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(fast_osc_frequency)
            )
        );
    }
    test_field_fast_osc_frequency();
    fn test_field_zero_distance_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_distance_phase) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(zero_distance_phase)
            )
        );
    }
    test_field_zero_distance_phase();
    fn test_field_VL53LX_p_004() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_004) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_004)
            )
        );
    }
    test_field_VL53LX_p_004();
    fn test_field_total_periods_elapsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_periods_elapsed) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(total_periods_elapsed)
            )
        );
    }
    test_field_total_periods_elapsed();
    fn test_field_peak_duration_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_duration_us) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(peak_duration_us)
            )
        );
    }
    test_field_peak_duration_us();
    fn test_field_woi_duration_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).woi_duration_us) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(woi_duration_us)
            )
        );
    }
    test_field_woi_duration_us();
    fn test_field_VL53LX_p_016() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_016) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_016)
            )
        );
    }
    test_field_VL53LX_p_016();
    fn test_field_VL53LX_p_017() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_017) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_017)
            )
        );
    }
    test_field_VL53LX_p_017();
    fn test_field_VL53LX_p_010() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_010) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_010)
            )
        );
    }
    test_field_VL53LX_p_010();
    fn test_field_peak_signal_count_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_signal_count_rate_mcps) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(peak_signal_count_rate_mcps)
            )
        );
    }
    test_field_peak_signal_count_rate_mcps();
    fn test_field_avg_signal_count_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).avg_signal_count_rate_mcps) as usize - ptr as usize
            },
            50usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(avg_signal_count_rate_mcps)
            )
        );
    }
    test_field_avg_signal_count_rate_mcps();
    fn test_field_ambient_count_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_count_rate_mcps) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(ambient_count_rate_mcps)
            )
        );
    }
    test_field_ambient_count_rate_mcps();
    fn test_field_total_rate_per_spad_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_rate_per_spad_mcps) as usize - ptr as usize
            },
            54usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(total_rate_per_spad_mcps)
            )
        );
    }
    test_field_total_rate_per_spad_mcps();
    fn test_field_VL53LX_p_009() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_009) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_009)
            )
        );
    }
    test_field_VL53LX_p_009();
    fn test_field_VL53LX_p_002() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_002) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_002)
            )
        );
    }
    test_field_VL53LX_p_002();
    fn test_field_VL53LX_p_026() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_026) as usize - ptr as usize
            },
            62usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_026)
            )
        );
    }
    test_field_VL53LX_p_026();
    fn test_field_VL53LX_p_011() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_011) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_011)
            )
        );
    }
    test_field_VL53LX_p_011();
    fn test_field_VL53LX_p_027() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_027) as usize - ptr as usize
            },
            66usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(VL53LX_p_027)
            )
        );
    }
    test_field_VL53LX_p_027();
    fn test_field_min_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_range_mm) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(min_range_mm)
            )
        );
    }
    test_field_min_range_mm();
    fn test_field_median_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).median_range_mm) as usize - ptr as usize
            },
            70usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(median_range_mm)
            )
        );
    }
    test_field_median_range_mm();
    fn test_field_max_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_range_mm) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(max_range_mm)
            )
        );
    }
    test_field_max_range_mm();
    fn test_field_range_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_status) as usize - ptr as usize
            },
            74usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_data_t),
                "::",
                stringify!(range_status)
            )
        );
    }
    test_field_range_status();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_range_results_t {
    cfg_device_state: VL53LX_DeviceState,
    rd_device_state: VL53LX_DeviceState,
    zone_id: u8,
    stream_count: u8,
    VL53LX_p_022: [i16; 5usize],
    wrap_dmax_mm: i16,
    device_status: u8,
    max_results: u8,
    active_results: u8,
    VL53LX_p_003: [VL53LX_range_data_t; 4usize],
    xmonitor: VL53LX_range_data_t,
    smudge_corrector_data: VL53LX_smudge_corrector_data_t,
}
#[test]
fn bindgen_test_layout_VL53LX_range_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_range_results_t>(),
        416usize,
        concat!("Size of: ", stringify!(VL53LX_range_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_range_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_range_results_t))
    );
    fn test_field_cfg_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_device_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(cfg_device_state)
            )
        );
    }
    test_field_cfg_device_state();
    fn test_field_rd_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_device_state) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(rd_device_state)
            )
        );
    }
    test_field_rd_device_state();
    fn test_field_zone_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_id) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(zone_id)
            )
        );
    }
    test_field_zone_id();
    fn test_field_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stream_count) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(stream_count)
            )
        );
    }
    test_field_stream_count();
    fn test_field_VL53LX_p_022() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_022) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(VL53LX_p_022)
            )
        );
    }
    test_field_VL53LX_p_022();
    fn test_field_wrap_dmax_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrap_dmax_mm) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(wrap_dmax_mm)
            )
        );
    }
    test_field_wrap_dmax_mm();
    fn test_field_device_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_status) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(device_status)
            )
        );
    }
    test_field_device_status();
    fn test_field_max_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_results) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(max_results)
            )
        );
    }
    test_field_max_results();
    fn test_field_active_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_results) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(active_results)
            )
        );
    }
    test_field_active_results();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
    fn test_field_xmonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xmonitor) as usize - ptr as usize
            },
            324usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(xmonitor)
            )
        );
    }
    test_field_xmonitor();
    fn test_field_smudge_corrector_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corrector_data) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_range_results_t),
                "::",
                stringify!(smudge_corrector_data)
            )
        );
    }
    test_field_smudge_corrector_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_range_data_t {
    no_of_samples: u8,
    rate_per_spad_kcps_sum: u32,
    rate_per_spad_kcps_avg: u32,
    signal_total_events_sum: i32,
    signal_total_events_avg: i32,
    sigma_mm_sum: u32,
    sigma_mm_avg: u32,
    median_phase_sum: u32,
    median_phase_avg: u32,
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_range_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_range_data_t>(),
        36usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_range_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_range_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_range_data_t))
    );
    fn test_field_no_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).no_of_samples) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(no_of_samples)
            )
        );
    }
    test_field_no_of_samples();
    fn test_field_rate_per_spad_kcps_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate_per_spad_kcps_sum) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(rate_per_spad_kcps_sum)
            )
        );
    }
    test_field_rate_per_spad_kcps_sum();
    fn test_field_rate_per_spad_kcps_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate_per_spad_kcps_avg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(rate_per_spad_kcps_avg)
            )
        );
    }
    test_field_rate_per_spad_kcps_avg();
    fn test_field_signal_total_events_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_total_events_sum) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(signal_total_events_sum)
            )
        );
    }
    test_field_signal_total_events_sum();
    fn test_field_signal_total_events_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_total_events_avg) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(signal_total_events_avg)
            )
        );
    }
    test_field_signal_total_events_avg();
    fn test_field_sigma_mm_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_mm_sum) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(sigma_mm_sum)
            )
        );
    }
    test_field_sigma_mm_sum();
    fn test_field_sigma_mm_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sigma_mm_avg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(sigma_mm_avg)
            )
        );
    }
    test_field_sigma_mm_avg();
    fn test_field_median_phase_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).median_phase_sum) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(median_phase_sum)
            )
        );
    }
    test_field_median_phase_sum();
    fn test_field_median_phase_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).median_phase_avg) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_data_t),
                "::",
                stringify!(median_phase_avg)
            )
        );
    }
    test_field_median_phase_avg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_range_results_t {
    cal_status: VL53LX_Error,
    num_of_samples_status: u8,
    zero_samples_status: u8,
    max_sigma_status: u8,
    max_results: u8,
    active_results: u8,
    VL53LX_p_003: [VL53LX_xtalk_range_data_t; 5usize],
    central_histogram_sum: VL53LX_histogram_bin_data_t,
    central_histogram_avg: VL53LX_histogram_bin_data_t,
    central_histogram__window_start: u8,
    central_histogram__window_end: u8,
    histogram_avg_1: [VL53LX_histogram_bin_data_t; 5usize],
    histogram_avg_2: [VL53LX_histogram_bin_data_t; 5usize],
    xtalk_avg: [VL53LX_histogram_bin_data_t; 5usize],
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_range_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_range_results_t>(),
        3116usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_range_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_range_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_range_results_t))
    );
    fn test_field_cal_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(cal_status)
            )
        );
    }
    test_field_cal_status();
    fn test_field_num_of_samples_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_of_samples_status) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(num_of_samples_status)
            )
        );
    }
    test_field_num_of_samples_status();
    fn test_field_zero_samples_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_samples_status) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(zero_samples_status)
            )
        );
    }
    test_field_zero_samples_status();
    fn test_field_max_sigma_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_sigma_status) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(max_sigma_status)
            )
        );
    }
    test_field_max_sigma_status();
    fn test_field_max_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_results) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(max_results)
            )
        );
    }
    test_field_max_results();
    fn test_field_active_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_results) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(active_results)
            )
        );
    }
    test_field_active_results();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
    fn test_field_central_histogram_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).central_histogram_sum) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(central_histogram_sum)
            )
        );
    }
    test_field_central_histogram_sum();
    fn test_field_central_histogram_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).central_histogram_avg) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(central_histogram_avg)
            )
        );
    }
    test_field_central_histogram_avg();
    fn test_field_central_histogram__window_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).central_histogram__window_start) as usize - ptr as usize
            },
            532usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(central_histogram__window_start)
            )
        );
    }
    test_field_central_histogram__window_start();
    fn test_field_central_histogram__window_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).central_histogram__window_end) as usize - ptr as usize
            },
            533usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(central_histogram__window_end)
            )
        );
    }
    test_field_central_histogram__window_end();
    fn test_field_histogram_avg_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_avg_1) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(histogram_avg_1)
            )
        );
    }
    test_field_histogram_avg_1();
    fn test_field_histogram_avg_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_avg_2) as usize - ptr as usize
            },
            1396usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(histogram_avg_2)
            )
        );
    }
    test_field_histogram_avg_2();
    fn test_field_xtalk_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_avg) as usize - ptr as usize
            },
            2256usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_range_results_t),
                "::",
                stringify!(xtalk_avg)
            )
        );
    }
    test_field_xtalk_avg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_offset_range_data_t {
    preset_mode: u8,
    dss_config__roi_mode_control: u8,
    dss_config__manual_effective_spads_select: u16,
    no_of_samples: u8,
    effective_spads: u32,
    peak_rate_mcps: u32,
    VL53LX_p_002: u32,
    median_range_mm: i32,
    range_mm_offset: i32,
}
#[test]
fn bindgen_test_layout_VL53LX_offset_range_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_offset_range_data_t>(),
        28usize,
        concat!("Size of: ", stringify!(VL53LX_offset_range_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_offset_range_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_offset_range_data_t))
    );
    fn test_field_preset_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preset_mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(preset_mode)
            )
        );
    }
    test_field_preset_mode();
    fn test_field_dss_config__roi_mode_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__roi_mode_control) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(dss_config__roi_mode_control)
            )
        );
    }
    test_field_dss_config__roi_mode_control();
    fn test_field_dss_config__manual_effective_spads_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__manual_effective_spads_select) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(dss_config__manual_effective_spads_select)
            )
        );
    }
    test_field_dss_config__manual_effective_spads_select();
    fn test_field_no_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).no_of_samples) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(no_of_samples)
            )
        );
    }
    test_field_no_of_samples();
    fn test_field_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).effective_spads) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(effective_spads)
            )
        );
    }
    test_field_effective_spads();
    fn test_field_peak_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_rate_mcps) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(peak_rate_mcps)
            )
        );
    }
    test_field_peak_rate_mcps();
    fn test_field_VL53LX_p_002() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_002) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(VL53LX_p_002)
            )
        );
    }
    test_field_VL53LX_p_002();
    fn test_field_median_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).median_range_mm) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(median_range_mm)
            )
        );
    }
    test_field_median_range_mm();
    fn test_field_range_mm_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_mm_offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_data_t),
                "::",
                stringify!(range_mm_offset)
            )
        );
    }
    test_field_range_mm_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_offset_range_results_t {
    cal_distance_mm: i16,
    cal_reflectance_pc: u16,
    cal_status: VL53LX_Error,
    cal_report: u8,
    max_results: u8,
    active_results: u8,
    VL53LX_p_003: [VL53LX_offset_range_data_t; 3usize],
}
#[test]
fn bindgen_test_layout_VL53LX_offset_range_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_offset_range_results_t>(),
        92usize,
        concat!("Size of: ", stringify!(VL53LX_offset_range_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_offset_range_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_offset_range_results_t))
    );
    fn test_field_cal_distance_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_distance_mm) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(cal_distance_mm)
            )
        );
    }
    test_field_cal_distance_mm();
    fn test_field_cal_reflectance_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_reflectance_pc) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(cal_reflectance_pc)
            )
        );
    }
    test_field_cal_reflectance_pc();
    fn test_field_cal_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_status) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(cal_status)
            )
        );
    }
    test_field_cal_status();
    fn test_field_cal_report() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_report) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(cal_report)
            )
        );
    }
    test_field_cal_report();
    fn test_field_max_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_results) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(max_results)
            )
        );
    }
    test_field_max_results();
    fn test_field_active_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_results) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(active_results)
            )
        );
    }
    test_field_active_results();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_range_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_range_results_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_additional_offset_cal_data_t {
    result__mm_inner_actual_effective_spads: u16,
    result__mm_outer_actual_effective_spads: u16,
    result__mm_inner_peak_signal_count_rtn_mcps: u16,
    result__mm_outer_peak_signal_count_rtn_mcps: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_additional_offset_cal_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_additional_offset_cal_data_t>(),
        8usize,
        concat!("Size of: ", stringify!(VL53LX_additional_offset_cal_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_additional_offset_cal_data_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_additional_offset_cal_data_t)
        )
    );
    fn test_field_result__mm_inner_actual_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_additional_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__mm_inner_actual_effective_spads) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_offset_cal_data_t),
                "::",
                stringify!(result__mm_inner_actual_effective_spads)
            )
        );
    }
    test_field_result__mm_inner_actual_effective_spads();
    fn test_field_result__mm_outer_actual_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_additional_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__mm_outer_actual_effective_spads) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_offset_cal_data_t),
                "::",
                stringify!(result__mm_outer_actual_effective_spads)
            )
        );
    }
    test_field_result__mm_outer_actual_effective_spads();
    fn test_field_result__mm_inner_peak_signal_count_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_additional_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__mm_inner_peak_signal_count_rtn_mcps) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_offset_cal_data_t),
                "::",
                stringify!(result__mm_inner_peak_signal_count_rtn_mcps)
            )
        );
    }
    test_field_result__mm_inner_peak_signal_count_rtn_mcps();
    fn test_field_result__mm_outer_peak_signal_count_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_additional_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__mm_outer_peak_signal_count_rtn_mcps) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_offset_cal_data_t),
                "::",
                stringify!(result__mm_outer_peak_signal_count_rtn_mcps)
            )
        );
    }
    test_field_result__mm_outer_peak_signal_count_rtn_mcps();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_per_vcsel_period_offset_cal_data_t {
    short_a_offset_mm: i16,
    short_b_offset_mm: i16,
    medium_a_offset_mm: i16,
    medium_b_offset_mm: i16,
    long_a_offset_mm: i16,
    long_b_offset_mm: i16,
}
#[test]
fn bindgen_test_layout_VL53LX_per_vcsel_period_offset_cal_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_per_vcsel_period_offset_cal_data_t>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(VL53LX_per_vcsel_period_offset_cal_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_per_vcsel_period_offset_cal_data_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_per_vcsel_period_offset_cal_data_t)
        )
    );
    fn test_field_short_a_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_per_vcsel_period_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).short_a_offset_mm) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_per_vcsel_period_offset_cal_data_t),
                "::",
                stringify!(short_a_offset_mm)
            )
        );
    }
    test_field_short_a_offset_mm();
    fn test_field_short_b_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_per_vcsel_period_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).short_b_offset_mm) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_per_vcsel_period_offset_cal_data_t),
                "::",
                stringify!(short_b_offset_mm)
            )
        );
    }
    test_field_short_b_offset_mm();
    fn test_field_medium_a_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_per_vcsel_period_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).medium_a_offset_mm) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_per_vcsel_period_offset_cal_data_t),
                "::",
                stringify!(medium_a_offset_mm)
            )
        );
    }
    test_field_medium_a_offset_mm();
    fn test_field_medium_b_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_per_vcsel_period_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).medium_b_offset_mm) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_per_vcsel_period_offset_cal_data_t),
                "::",
                stringify!(medium_b_offset_mm)
            )
        );
    }
    test_field_medium_b_offset_mm();
    fn test_field_long_a_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_per_vcsel_period_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).long_a_offset_mm) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_per_vcsel_period_offset_cal_data_t),
                "::",
                stringify!(long_a_offset_mm)
            )
        );
    }
    test_field_long_a_offset_mm();
    fn test_field_long_b_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_per_vcsel_period_offset_cal_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).long_b_offset_mm) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_per_vcsel_period_offset_cal_data_t),
                "::",
                stringify!(long_b_offset_mm)
            )
        );
    }
    test_field_long_b_offset_mm();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_object_data_t {
    VL53LX_p_016: u32,
    VL53LX_p_017: u32,
    VL53LX_p_011: u16,
    range_status: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_object_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_object_data_t>(),
        12usize,
        concat!("Size of: ", stringify!(VL53LX_object_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_object_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_object_data_t))
    );
    fn test_field_VL53LX_p_016() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_object_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_016) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_object_data_t),
                "::",
                stringify!(VL53LX_p_016)
            )
        );
    }
    test_field_VL53LX_p_016();
    fn test_field_VL53LX_p_017() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_object_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_017) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_object_data_t),
                "::",
                stringify!(VL53LX_p_017)
            )
        );
    }
    test_field_VL53LX_p_017();
    fn test_field_VL53LX_p_011() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_object_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_011) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_object_data_t),
                "::",
                stringify!(VL53LX_p_011)
            )
        );
    }
    test_field_VL53LX_p_011();
    fn test_field_range_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_object_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_status) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_object_data_t),
                "::",
                stringify!(range_status)
            )
        );
    }
    test_field_range_status();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_objects_t {
    cfg_device_state: VL53LX_DeviceState,
    rd_device_state: VL53LX_DeviceState,
    zone_id: u8,
    stream_count: u8,
    max_objects: u8,
    active_objects: u8,
    VL53LX_p_003: [VL53LX_object_data_t; 4usize],
    xmonitor: VL53LX_object_data_t,
}
#[test]
fn bindgen_test_layout_VL53LX_zone_objects_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_objects_t>(),
        68usize,
        concat!("Size of: ", stringify!(VL53LX_zone_objects_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_objects_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_objects_t))
    );
    fn test_field_cfg_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_device_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(cfg_device_state)
            )
        );
    }
    test_field_cfg_device_state();
    fn test_field_rd_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_device_state) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(rd_device_state)
            )
        );
    }
    test_field_rd_device_state();
    fn test_field_zone_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_id) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(zone_id)
            )
        );
    }
    test_field_zone_id();
    fn test_field_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stream_count) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(stream_count)
            )
        );
    }
    test_field_stream_count();
    fn test_field_max_objects() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_objects) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(max_objects)
            )
        );
    }
    test_field_max_objects();
    fn test_field_active_objects() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_objects) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(active_objects)
            )
        );
    }
    test_field_active_objects();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
    fn test_field_xmonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_objects_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xmonitor) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_objects_t),
                "::",
                stringify!(xmonitor)
            )
        );
    }
    test_field_xmonitor();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_results_t {
    max_zones: u8,
    active_zones: u8,
    VL53LX_p_003: [VL53LX_zone_objects_t; 16usize],
}
#[test]
fn bindgen_test_layout_VL53LX_zone_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_results_t>(),
        1092usize,
        concat!("Size of: ", stringify!(VL53LX_zone_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_results_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_results_t))
    );
    fn test_field_max_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_zones) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_results_t),
                "::",
                stringify!(max_zones)
            )
        );
    }
    test_field_max_zones();
    fn test_field_active_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_zones) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_results_t),
                "::",
                stringify!(active_zones)
            )
        );
    }
    test_field_active_zones();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_results_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_hist_info_t {
    rd_device_state: VL53LX_DeviceState,
    number_of_ambient_bins: u8,
    result__dss_actual_effective_spads: u16,
    VL53LX_p_005: u8,
    total_periods_elapsed: u32,
    ambient_events_sum: i32,
}
#[test]
fn bindgen_test_layout_VL53LX_zone_hist_info_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_hist_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_zone_hist_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_hist_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_hist_info_t))
    );
    fn test_field_rd_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_hist_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_device_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_hist_info_t),
                "::",
                stringify!(rd_device_state)
            )
        );
    }
    test_field_rd_device_state();
    fn test_field_number_of_ambient_bins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_hist_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).number_of_ambient_bins) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_hist_info_t),
                "::",
                stringify!(number_of_ambient_bins)
            )
        );
    }
    test_field_number_of_ambient_bins();
    fn test_field_result__dss_actual_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_hist_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__dss_actual_effective_spads) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_hist_info_t),
                "::",
                stringify!(result__dss_actual_effective_spads)
            )
        );
    }
    test_field_result__dss_actual_effective_spads();
    fn test_field_VL53LX_p_005() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_hist_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_005) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_hist_info_t),
                "::",
                stringify!(VL53LX_p_005)
            )
        );
    }
    test_field_VL53LX_p_005();
    fn test_field_total_periods_elapsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_hist_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_periods_elapsed) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_hist_info_t),
                "::",
                stringify!(total_periods_elapsed)
            )
        );
    }
    test_field_total_periods_elapsed();
    fn test_field_ambient_events_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_hist_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient_events_sum) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_hist_info_t),
                "::",
                stringify!(ambient_events_sum)
            )
        );
    }
    test_field_ambient_events_sum();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_histograms_t {
    max_zones: u8,
    active_zones: u8,
    VL53LX_p_003: [VL53LX_zone_hist_info_t; 16usize],
}
#[test]
fn bindgen_test_layout_VL53LX_zone_histograms_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_histograms_t>(),
        260usize,
        concat!("Size of: ", stringify!(VL53LX_zone_histograms_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_histograms_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_histograms_t))
    );
    fn test_field_max_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_histograms_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_zones) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_histograms_t),
                "::",
                stringify!(max_zones)
            )
        );
    }
    test_field_max_zones();
    fn test_field_active_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_histograms_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_zones) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_histograms_t),
                "::",
                stringify!(active_zones)
            )
        );
    }
    test_field_active_zones();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_histograms_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_histograms_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_calibration_data_t {
    no_of_samples: u32,
    effective_spads: u32,
    peak_rate_mcps: u32,
    VL53LX_p_011: u32,
    VL53LX_p_002: u32,
    median_range_mm: i32,
    range_mm_offset: i32,
}
#[test]
fn bindgen_test_layout_VL53LX_zone_calibration_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_calibration_data_t>(),
        28usize,
        concat!("Size of: ", stringify!(VL53LX_zone_calibration_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_calibration_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_calibration_data_t))
    );
    fn test_field_no_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).no_of_samples) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(no_of_samples)
            )
        );
    }
    test_field_no_of_samples();
    fn test_field_effective_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).effective_spads) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(effective_spads)
            )
        );
    }
    test_field_effective_spads();
    fn test_field_peak_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_rate_mcps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(peak_rate_mcps)
            )
        );
    }
    test_field_peak_rate_mcps();
    fn test_field_VL53LX_p_011() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_011) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(VL53LX_p_011)
            )
        );
    }
    test_field_VL53LX_p_011();
    fn test_field_VL53LX_p_002() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_002) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(VL53LX_p_002)
            )
        );
    }
    test_field_VL53LX_p_002();
    fn test_field_median_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).median_range_mm) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(median_range_mm)
            )
        );
    }
    test_field_median_range_mm();
    fn test_field_range_mm_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_mm_offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_data_t),
                "::",
                stringify!(range_mm_offset)
            )
        );
    }
    test_field_range_mm_offset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_calibration_results_t {
    struct_version: u32,
    preset_mode: VL53LX_DevicePresetModes,
    zone_preset: VL53LX_DeviceZonePreset,
    cal_distance_mm: i16,
    cal_reflectance_pc: u16,
    phasecal_result__reference_phase: u16,
    zero_distance_phase: u16,
    cal_status: VL53LX_Error,
    max_zones: u8,
    active_zones: u8,
    VL53LX_p_003: [VL53LX_zone_calibration_data_t; 16usize],
}
#[test]
fn bindgen_test_layout_VL53LX_zone_calibration_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_calibration_results_t>(),
        468usize,
        concat!("Size of: ", stringify!(VL53LX_zone_calibration_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_calibration_results_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_zone_calibration_results_t)
        )
    );
    fn test_field_struct_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(struct_version)
            )
        );
    }
    test_field_struct_version();
    fn test_field_preset_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preset_mode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(preset_mode)
            )
        );
    }
    test_field_preset_mode();
    fn test_field_zone_preset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_preset) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(zone_preset)
            )
        );
    }
    test_field_zone_preset();
    fn test_field_cal_distance_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_distance_mm) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(cal_distance_mm)
            )
        );
    }
    test_field_cal_distance_mm();
    fn test_field_cal_reflectance_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_reflectance_pc) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(cal_reflectance_pc)
            )
        );
    }
    test_field_cal_reflectance_pc();
    fn test_field_phasecal_result__reference_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_result__reference_phase) as usize
                    - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(phasecal_result__reference_phase)
            )
        );
    }
    test_field_phasecal_result__reference_phase();
    fn test_field_zero_distance_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_distance_phase) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(zero_distance_phase)
            )
        );
    }
    test_field_zero_distance_phase();
    fn test_field_cal_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_status) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(cal_status)
            )
        );
    }
    test_field_cal_status();
    fn test_field_max_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_zones) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(max_zones)
            )
        );
    }
    test_field_max_zones();
    fn test_field_active_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_zones) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(active_zones)
            )
        );
    }
    test_field_active_zones();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_calibration_results_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_cal_peak_rate_map_t {
    cal_distance_mm: i16,
    cal_reflectance_pc: u16,
    max_samples: u16,
    width: u16,
    height: u16,
    peak_rate_mcps: [u16; 25usize],
}
#[test]
fn bindgen_test_layout_VL53LX_cal_peak_rate_map_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_cal_peak_rate_map_t>(),
        60usize,
        concat!("Size of: ", stringify!(VL53LX_cal_peak_rate_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_cal_peak_rate_map_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_cal_peak_rate_map_t))
    );
    fn test_field_cal_distance_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_cal_peak_rate_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_distance_mm) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_cal_peak_rate_map_t),
                "::",
                stringify!(cal_distance_mm)
            )
        );
    }
    test_field_cal_distance_mm();
    fn test_field_cal_reflectance_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_cal_peak_rate_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_reflectance_pc) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_cal_peak_rate_map_t),
                "::",
                stringify!(cal_reflectance_pc)
            )
        );
    }
    test_field_cal_reflectance_pc();
    fn test_field_max_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_cal_peak_rate_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_samples) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_cal_peak_rate_map_t),
                "::",
                stringify!(max_samples)
            )
        );
    }
    test_field_max_samples();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_cal_peak_rate_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_cal_peak_rate_map_t),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_cal_peak_rate_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_cal_peak_rate_map_t),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
    fn test_field_peak_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_cal_peak_rate_map_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_rate_mcps) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_cal_peak_rate_map_t),
                "::",
                stringify!(peak_rate_mcps)
            )
        );
    }
    test_field_peak_rate_mcps();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_private_dyn_cfg_t {
    expected_stream_count: u8,
    expected_gph_id: u8,
    dss_mode: u8,
    dss_requested_effective_spad_count: u16,
    seed_cfg: u8,
    initial_phase_seed: u8,
    roi_config__user_roi_centre_spad: u8,
    roi_config__user_roi_requested_global_xy_size: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_zone_private_dyn_cfg_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_private_dyn_cfg_t>(),
        10usize,
        concat!("Size of: ", stringify!(VL53LX_zone_private_dyn_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_private_dyn_cfg_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_private_dyn_cfg_t))
    );
    fn test_field_expected_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expected_stream_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(expected_stream_count)
            )
        );
    }
    test_field_expected_stream_count();
    fn test_field_expected_gph_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expected_gph_id) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(expected_gph_id)
            )
        );
    }
    test_field_expected_gph_id();
    fn test_field_dss_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_mode) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(dss_mode)
            )
        );
    }
    test_field_dss_mode();
    fn test_field_dss_requested_effective_spad_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_requested_effective_spad_count) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(dss_requested_effective_spad_count)
            )
        );
    }
    test_field_dss_requested_effective_spad_count();
    fn test_field_seed_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seed_cfg) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(seed_cfg)
            )
        );
    }
    test_field_seed_cfg();
    fn test_field_initial_phase_seed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).initial_phase_seed) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(initial_phase_seed)
            )
        );
    }
    test_field_initial_phase_seed();
    fn test_field_roi_config__user_roi_centre_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__user_roi_centre_spad) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(roi_config__user_roi_centre_spad)
            )
        );
    }
    test_field_roi_config__user_roi_centre_spad();
    fn test_field_roi_config__user_roi_requested_global_xy_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).roi_config__user_roi_requested_global_xy_size) as usize
                    - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfg_t),
                "::",
                stringify!(roi_config__user_roi_requested_global_xy_size)
            )
        );
    }
    test_field_roi_config__user_roi_requested_global_xy_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_zone_private_dyn_cfgs_t {
    max_zones: u8,
    active_zones: u8,
    VL53LX_p_003: [VL53LX_zone_private_dyn_cfg_t; 16usize],
}
#[test]
fn bindgen_test_layout_VL53LX_zone_private_dyn_cfgs_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_zone_private_dyn_cfgs_t>(),
        162usize,
        concat!("Size of: ", stringify!(VL53LX_zone_private_dyn_cfgs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_zone_private_dyn_cfgs_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_zone_private_dyn_cfgs_t))
    );
    fn test_field_max_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfgs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_zones) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfgs_t),
                "::",
                stringify!(max_zones)
            )
        );
    }
    test_field_max_zones();
    fn test_field_active_zones() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfgs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active_zones) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfgs_t),
                "::",
                stringify!(active_zones)
            )
        );
    }
    test_field_active_zones();
    fn test_field_VL53LX_p_003() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_zone_private_dyn_cfgs_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_003) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_zone_private_dyn_cfgs_t),
                "::",
                stringify!(VL53LX_p_003)
            )
        );
    }
    test_field_VL53LX_p_003();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_calibration_results_t {
    algo__crosstalk_compensation_plane_offset_kcps: u32,
    algo__crosstalk_compensation_x_plane_gradient_kcps: i16,
    algo__crosstalk_compensation_y_plane_gradient_kcps: i16,
    algo__xtalk_cpo_HistoMerge_kcps: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_calibration_results_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_calibration_results_t>(),
        32usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_calibration_results_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_calibration_results_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_xtalk_calibration_results_t)
        )
    );
    fn test_field_algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_xtalk_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_plane_offset_kcps) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_calibration_results_t),
                "::",
                stringify!(algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_xtalk_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_x_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_calibration_results_t),
                "::",
                stringify!(algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_xtalk_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_y_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_calibration_results_t),
                "::",
                stringify!(algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_algo__xtalk_cpo_HistoMerge_kcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_xtalk_calibration_results_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__xtalk_cpo_HistoMerge_kcps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_calibration_results_t),
                "::",
                stringify!(algo__xtalk_cpo_HistoMerge_kcps)
            )
        );
    }
    test_field_algo__xtalk_cpo_HistoMerge_kcps();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_hist_xtalk_extract_data_t {
    sample_count: u32,
    pll_period_mm: u32,
    peak_duration_us_sum: u32,
    effective_spad_count_sum: u32,
    zero_distance_phase_sum: u32,
    zero_distance_phase_avg: u32,
    event_scaler_sum: i32,
    event_scaler_avg: i32,
    signal_events_sum: i32,
    xtalk_rate_kcps_per_spad: u32,
    xtalk_start_phase: i32,
    xtalk_end_phase: i32,
    xtalk_width_phase: i32,
    target_start_phase: i32,
    target_end_phase: i32,
    target_width_phase: i32,
    effective_width: i32,
    event_scaler: i32,
    VL53LX_p_012: u8,
    VL53LX_p_013: u8,
    target_start: u8,
    max_shape_value: i32,
    bin_data_sums: [i32; 12usize],
}
#[test]
fn bindgen_test_layout_VL53LX_hist_xtalk_extract_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_hist_xtalk_extract_data_t>(),
        128usize,
        concat!("Size of: ", stringify!(VL53LX_hist_xtalk_extract_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_hist_xtalk_extract_data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_hist_xtalk_extract_data_t)
        )
    );
    fn test_field_sample_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sample_count) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(sample_count)
            )
        );
    }
    test_field_sample_count();
    fn test_field_pll_period_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pll_period_mm) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(pll_period_mm)
            )
        );
    }
    test_field_pll_period_mm();
    fn test_field_peak_duration_us_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peak_duration_us_sum) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(peak_duration_us_sum)
            )
        );
    }
    test_field_peak_duration_us_sum();
    fn test_field_effective_spad_count_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).effective_spad_count_sum) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(effective_spad_count_sum)
            )
        );
    }
    test_field_effective_spad_count_sum();
    fn test_field_zero_distance_phase_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_distance_phase_sum) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(zero_distance_phase_sum)
            )
        );
    }
    test_field_zero_distance_phase_sum();
    fn test_field_zero_distance_phase_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zero_distance_phase_avg) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(zero_distance_phase_avg)
            )
        );
    }
    test_field_zero_distance_phase_avg();
    fn test_field_event_scaler_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event_scaler_sum) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(event_scaler_sum)
            )
        );
    }
    test_field_event_scaler_sum();
    fn test_field_event_scaler_avg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event_scaler_avg) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(event_scaler_avg)
            )
        );
    }
    test_field_event_scaler_avg();
    fn test_field_signal_events_sum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_events_sum) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(signal_events_sum)
            )
        );
    }
    test_field_signal_events_sum();
    fn test_field_xtalk_rate_kcps_per_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_rate_kcps_per_spad) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(xtalk_rate_kcps_per_spad)
            )
        );
    }
    test_field_xtalk_rate_kcps_per_spad();
    fn test_field_xtalk_start_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_start_phase) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(xtalk_start_phase)
            )
        );
    }
    test_field_xtalk_start_phase();
    fn test_field_xtalk_end_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_end_phase) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(xtalk_end_phase)
            )
        );
    }
    test_field_xtalk_end_phase();
    fn test_field_xtalk_width_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_width_phase) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(xtalk_width_phase)
            )
        );
    }
    test_field_xtalk_width_phase();
    fn test_field_target_start_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_start_phase) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(target_start_phase)
            )
        );
    }
    test_field_target_start_phase();
    fn test_field_target_end_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_end_phase) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(target_end_phase)
            )
        );
    }
    test_field_target_end_phase();
    fn test_field_target_width_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_width_phase) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(target_width_phase)
            )
        );
    }
    test_field_target_width_phase();
    fn test_field_effective_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).effective_width) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(effective_width)
            )
        );
    }
    test_field_effective_width();
    fn test_field_event_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event_scaler) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(event_scaler)
            )
        );
    }
    test_field_event_scaler();
    fn test_field_VL53LX_p_012() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_012) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(VL53LX_p_012)
            )
        );
    }
    test_field_VL53LX_p_012();
    fn test_field_VL53LX_p_013() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_013) as usize - ptr as usize
            },
            73usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(VL53LX_p_013)
            )
        );
    }
    test_field_VL53LX_p_013();
    fn test_field_target_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_start) as usize - ptr as usize
            },
            74usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(target_start)
            )
        );
    }
    test_field_target_start();
    fn test_field_max_shape_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).max_shape_value) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(max_shape_value)
            )
        );
    }
    test_field_max_shape_value();
    fn test_field_bin_data_sums() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_hist_xtalk_extract_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_data_sums) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_hist_xtalk_extract_data_t),
                "::",
                stringify!(bin_data_sums)
            )
        );
    }
    test_field_bin_data_sums();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_gain_calibration_data_t {
    standard_ranging_gain_factor: u16,
    histogram_ranging_gain_factor: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_gain_calibration_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_gain_calibration_data_t>(),
        4usize,
        concat!("Size of: ", stringify!(VL53LX_gain_calibration_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_gain_calibration_data_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_gain_calibration_data_t))
    );
    fn test_field_standard_ranging_gain_factor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gain_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).standard_ranging_gain_factor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gain_calibration_data_t),
                "::",
                stringify!(standard_ranging_gain_factor)
            )
        );
    }
    test_field_standard_ranging_gain_factor();
    fn test_field_histogram_ranging_gain_factor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_gain_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histogram_ranging_gain_factor) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_gain_calibration_data_t),
                "::",
                stringify!(histogram_ranging_gain_factor)
            )
        );
    }
    test_field_histogram_ranging_gain_factor();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_ll_driver_state_t {
    cfg_device_state: VL53LX_DeviceState,
    cfg_stream_count: u8,
    cfg_internal_stream_count: u8,
    cfg_internal_stream_count_val: u8,
    cfg_gph_id: u8,
    cfg_timing_status: u8,
    cfg_zone_id: u8,
    rd_device_state: VL53LX_DeviceState,
    rd_stream_count: u8,
    rd_internal_stream_count: u8,
    rd_internal_stream_count_val: u8,
    rd_gph_id: u8,
    rd_timing_status: u8,
    rd_zone_id: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_ll_driver_state_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_ll_driver_state_t>(),
        14usize,
        concat!("Size of: ", stringify!(VL53LX_ll_driver_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_ll_driver_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_ll_driver_state_t))
    );
    fn test_field_cfg_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_device_state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_device_state)
            )
        );
    }
    test_field_cfg_device_state();
    fn test_field_cfg_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_stream_count) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_stream_count)
            )
        );
    }
    test_field_cfg_stream_count();
    fn test_field_cfg_internal_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_internal_stream_count) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_internal_stream_count)
            )
        );
    }
    test_field_cfg_internal_stream_count();
    fn test_field_cfg_internal_stream_count_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_internal_stream_count_val) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_internal_stream_count_val)
            )
        );
    }
    test_field_cfg_internal_stream_count_val();
    fn test_field_cfg_gph_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_gph_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_gph_id)
            )
        );
    }
    test_field_cfg_gph_id();
    fn test_field_cfg_timing_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_timing_status) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_timing_status)
            )
        );
    }
    test_field_cfg_timing_status();
    fn test_field_cfg_zone_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfg_zone_id) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(cfg_zone_id)
            )
        );
    }
    test_field_cfg_zone_id();
    fn test_field_rd_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_device_state) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_device_state)
            )
        );
    }
    test_field_rd_device_state();
    fn test_field_rd_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_stream_count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_stream_count)
            )
        );
    }
    test_field_rd_stream_count();
    fn test_field_rd_internal_stream_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_internal_stream_count) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_internal_stream_count)
            )
        );
    }
    test_field_rd_internal_stream_count();
    fn test_field_rd_internal_stream_count_val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_internal_stream_count_val) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_internal_stream_count_val)
            )
        );
    }
    test_field_rd_internal_stream_count_val();
    fn test_field_rd_gph_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_gph_id) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_gph_id)
            )
        );
    }
    test_field_rd_gph_id();
    fn test_field_rd_timing_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_timing_status) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_timing_status)
            )
        );
    }
    test_field_rd_timing_status();
    fn test_field_rd_zone_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_ll_driver_state_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rd_zone_id) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_ll_driver_state_t),
                "::",
                stringify!(rd_zone_id)
            )
        );
    }
    test_field_rd_zone_id();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_LLDriverData_t {
    wait_method: u8,
    preset_mode: VL53LX_DevicePresetModes,
    zone_preset: VL53LX_DeviceZonePreset,
    measurement_mode: VL53LX_DeviceMeasurementModes,
    offset_calibration_mode: VL53LX_OffsetCalibrationMode,
    offset_correction_mode: VL53LX_OffsetCorrectionMode,
    dmax_mode: VL53LX_DeviceDmaxMode,
    phasecal_config_timeout_us: u32,
    mm_config_timeout_us: u32,
    range_config_timeout_us: u32,
    inter_measurement_period_ms: u32,
    dss_config__target_total_rate_mcps: u16,
    fw_ready_poll_duration_ms: u32,
    fw_ready: u8,
    debug_mode: u8,
    version: VL53LX_ll_version_t,
    ll_state: VL53LX_ll_driver_state_t,
    gpio_interrupt_config: VL53LX_GPIO_interrupt_config_t,
    customer: VL53LX_customer_nvm_managed_t,
    cal_peak_rate_map: VL53LX_cal_peak_rate_map_t,
    add_off_cal_data: VL53LX_additional_offset_cal_data_t,
    fmt_dmax_cal: VL53LX_dmax_calibration_data_t,
    cust_dmax_cal: VL53LX_dmax_calibration_data_t,
    gain_cal: VL53LX_gain_calibration_data_t,
    mm_roi: VL53LX_user_zone_t,
    optical_centre: VL53LX_optical_centre_t,
    zone_cfg: VL53LX_zone_config_t,
    tuning_parms: VL53LX_tuning_parm_storage_t,
    rtn_good_spads: [u8; 32usize],
    refspadchar: VL53LX_refspadchar_config_t,
    ssc_cfg: VL53LX_ssc_config_t,
    histpostprocess: VL53LX_hist_post_process_config_t,
    dmax_cfg: VL53LX_hist_gen3_dmax_config_t,
    xtalk_extract_cfg: VL53LX_xtalkextract_config_t,
    xtalk_cfg: VL53LX_xtalk_config_t,
    offsetcal_cfg: VL53LX_offsetcal_config_t,
    zonecal_cfg: VL53LX_zonecal_config_t,
    stat_nvm: VL53LX_static_nvm_managed_t,
    hist_cfg: VL53LX_histogram_config_t,
    stat_cfg: VL53LX_static_config_t,
    gen_cfg: VL53LX_general_config_t,
    tim_cfg: VL53LX_timing_config_t,
    dyn_cfg: VL53LX_dynamic_config_t,
    sys_ctrl: VL53LX_system_control_t,
    sys_results: VL53LX_system_results_t,
    nvm_copy_data: VL53LX_nvm_copy_data_t,
    hist_data: VL53LX_histogram_bin_data_t,
    hist_xtalk: VL53LX_histogram_bin_data_t,
    xtalk_shapes: VL53LX_xtalk_histogram_data_t,
    xtalk_results: VL53LX_xtalk_range_results_t,
    xtalk_cal: VL53LX_xtalk_calibration_results_t,
    xtalk_extract: VL53LX_hist_xtalk_extract_data_t,
    offset_results: VL53LX_offset_range_results_t,
    core_results: VL53LX_core_results_t,
    dbg_results: VL53LX_debug_results_t,
    smudge_correct_config: VL53LX_smudge_corrector_config_t,
    smudge_corrector_internals: VL53LX_smudge_corrector_internals_t,
    low_power_auto_data: VL53LX_low_power_auto_data_t,
    wArea1: [u8; 1536usize],
    wArea2: [u8; 512usize],
    per_vcsel_cal_data: VL53LX_per_vcsel_period_offset_cal_data_t,
    bin_rec_pos: u8,
    pos_before_next_recom: u8,
    multi_bins_rec: [[[i32; 24usize]; 2usize]; 6usize],
}
#[test]
fn bindgen_test_layout_VL53LX_LLDriverData_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_LLDriverData_t>(),
        8312usize,
        concat!("Size of: ", stringify!(VL53LX_LLDriverData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_LLDriverData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VL53LX_LLDriverData_t))
    );
    fn test_field_wait_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wait_method) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(wait_method)
            )
        );
    }
    test_field_wait_method();
    fn test_field_preset_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preset_mode) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(preset_mode)
            )
        );
    }
    test_field_preset_mode();
    fn test_field_zone_preset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_preset) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(zone_preset)
            )
        );
    }
    test_field_zone_preset();
    fn test_field_measurement_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).measurement_mode) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(measurement_mode)
            )
        );
    }
    test_field_measurement_mode();
    fn test_field_offset_calibration_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_calibration_mode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(offset_calibration_mode)
            )
        );
    }
    test_field_offset_calibration_mode();
    fn test_field_offset_correction_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_correction_mode) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(offset_correction_mode)
            )
        );
    }
    test_field_offset_correction_mode();
    fn test_field_dmax_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dmax_mode) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(dmax_mode)
            )
        );
    }
    test_field_dmax_mode();
    fn test_field_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config_timeout_us) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(phasecal_config_timeout_us)
            )
        );
    }
    test_field_phasecal_config_timeout_us();
    fn test_field_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config_timeout_us) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(mm_config_timeout_us)
            )
        );
    }
    test_field_mm_config_timeout_us();
    fn test_field_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config_timeout_us) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(range_config_timeout_us)
            )
        );
    }
    test_field_range_config_timeout_us();
    fn test_field_inter_measurement_period_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inter_measurement_period_ms) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(inter_measurement_period_ms)
            )
        );
    }
    test_field_inter_measurement_period_ms();
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_fw_ready_poll_duration_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fw_ready_poll_duration_ms) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(fw_ready_poll_duration_ms)
            )
        );
    }
    test_field_fw_ready_poll_duration_ms();
    fn test_field_fw_ready() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fw_ready) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(fw_ready)
            )
        );
    }
    test_field_fw_ready();
    fn test_field_debug_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug_mode) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(debug_mode)
            )
        );
    }
    test_field_debug_mode();
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_ll_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ll_state) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(ll_state)
            )
        );
    }
    test_field_ll_state();
    fn test_field_gpio_interrupt_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpio_interrupt_config) as usize - ptr as usize
            },
            58usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(gpio_interrupt_config)
            )
        );
    }
    test_field_gpio_interrupt_config();
    fn test_field_customer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).customer) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(customer)
            )
        );
    }
    test_field_customer();
    fn test_field_cal_peak_rate_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_peak_rate_map) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(cal_peak_rate_map)
            )
        );
    }
    test_field_cal_peak_rate_map();
    fn test_field_add_off_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_off_cal_data) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(add_off_cal_data)
            )
        );
    }
    test_field_add_off_cal_data();
    fn test_field_fmt_dmax_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_dmax_cal) as usize - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(fmt_dmax_cal)
            )
        );
    }
    test_field_fmt_dmax_cal();
    fn test_field_cust_dmax_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cust_dmax_cal) as usize - ptr as usize
            },
            174usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(cust_dmax_cal)
            )
        );
    }
    test_field_cust_dmax_cal();
    fn test_field_gain_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gain_cal) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(gain_cal)
            )
        );
    }
    test_field_gain_cal();
    fn test_field_mm_roi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_roi) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(mm_roi)
            )
        );
    }
    test_field_mm_roi();
    fn test_field_optical_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).optical_centre) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(optical_centre)
            )
        );
    }
    test_field_optical_centre();
    fn test_field_zone_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_cfg) as usize - ptr as usize
            },
            194usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(zone_cfg)
            )
        );
    }
    test_field_zone_cfg();
    fn test_field_tuning_parms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuning_parms) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(tuning_parms)
            )
        );
    }
    test_field_tuning_parms();
    fn test_field_rtn_good_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rtn_good_spads) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(rtn_good_spads)
            )
        );
    }
    test_field_rtn_good_spads();
    fn test_field_refspadchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refspadchar) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(refspadchar)
            )
        );
    }
    test_field_refspadchar();
    fn test_field_ssc_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ssc_cfg) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(ssc_cfg)
            )
        );
    }
    test_field_ssc_cfg();
    fn test_field_histpostprocess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).histpostprocess) as usize - ptr as usize
            },
            508usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(histpostprocess)
            )
        );
    }
    test_field_histpostprocess();
    fn test_field_dmax_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dmax_cfg) as usize - ptr as usize
            },
            572usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(dmax_cfg)
            )
        );
    }
    test_field_dmax_cfg();
    fn test_field_xtalk_extract_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_extract_cfg) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(xtalk_extract_cfg)
            )
        );
    }
    test_field_xtalk_extract_cfg();
    fn test_field_xtalk_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_cfg) as usize - ptr as usize
            },
            628usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(xtalk_cfg)
            )
        );
    }
    test_field_xtalk_cfg();
    fn test_field_offsetcal_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offsetcal_cfg) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(offsetcal_cfg)
            )
        );
    }
    test_field_offsetcal_cfg();
    fn test_field_zonecal_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zonecal_cfg) as usize - ptr as usize
            },
            684usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(zonecal_cfg)
            )
        );
    }
    test_field_zonecal_cfg();
    fn test_field_stat_nvm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stat_nvm) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(stat_nvm)
            )
        );
    }
    test_field_stat_nvm();
    fn test_field_hist_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_cfg) as usize - ptr as usize
            },
            716usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(hist_cfg)
            )
        );
    }
    test_field_hist_cfg();
    fn test_field_stat_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stat_cfg) as usize - ptr as usize
            },
            742usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(stat_cfg)
            )
        );
    }
    test_field_stat_cfg();
    fn test_field_gen_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gen_cfg) as usize - ptr as usize
            },
            774usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(gen_cfg)
            )
        );
    }
    test_field_gen_cfg();
    fn test_field_tim_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tim_cfg) as usize - ptr as usize
            },
            796usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(tim_cfg)
            )
        );
    }
    test_field_tim_cfg();
    fn test_field_dyn_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dyn_cfg) as usize - ptr as usize
            },
            820usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(dyn_cfg)
            )
        );
    }
    test_field_dyn_cfg();
    fn test_field_sys_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sys_ctrl) as usize - ptr as usize
            },
            840usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(sys_ctrl)
            )
        );
    }
    test_field_sys_ctrl();
    fn test_field_sys_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sys_results) as usize - ptr as usize
            },
            846usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(sys_results)
            )
        );
    }
    test_field_sys_results();
    fn test_field_nvm_copy_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm_copy_data) as usize - ptr as usize
            },
            890usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(nvm_copy_data)
            )
        );
    }
    test_field_nvm_copy_data();
    fn test_field_hist_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_data) as usize - ptr as usize
            },
            940usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(hist_data)
            )
        );
    }
    test_field_hist_data();
    fn test_field_hist_xtalk() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_xtalk) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(hist_xtalk)
            )
        );
    }
    test_field_hist_xtalk();
    fn test_field_xtalk_shapes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_shapes) as usize - ptr as usize
            },
            1284usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(xtalk_shapes)
            )
        );
    }
    test_field_xtalk_shapes();
    fn test_field_xtalk_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_results) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(xtalk_results)
            )
        );
    }
    test_field_xtalk_results();
    fn test_field_xtalk_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_cal) as usize - ptr as usize
            },
            4644usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(xtalk_cal)
            )
        );
    }
    test_field_xtalk_cal();
    fn test_field_xtalk_extract() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_extract) as usize - ptr as usize
            },
            4676usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(xtalk_extract)
            )
        );
    }
    test_field_xtalk_extract();
    fn test_field_offset_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_results) as usize - ptr as usize
            },
            4804usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(offset_results)
            )
        );
    }
    test_field_offset_results();
    fn test_field_core_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).core_results) as usize - ptr as usize
            },
            4896usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(core_results)
            )
        );
    }
    test_field_core_results();
    fn test_field_dbg_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dbg_results) as usize - ptr as usize
            },
            4932usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(dbg_results)
            )
        );
    }
    test_field_dbg_results();
    fn test_field_smudge_correct_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_correct_config) as usize - ptr as usize
            },
            4988usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(smudge_correct_config)
            )
        );
    }
    test_field_smudge_correct_config();
    fn test_field_smudge_corrector_internals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smudge_corrector_internals) as usize - ptr as usize
            },
            5056usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(smudge_corrector_internals)
            )
        );
    }
    test_field_smudge_corrector_internals();
    fn test_field_low_power_auto_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).low_power_auto_data) as usize - ptr as usize
            },
            5080usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(low_power_auto_data)
            )
        );
    }
    test_field_low_power_auto_data();
    fn test_field_wArea1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wArea1) as usize - ptr as usize
            },
            5096usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(wArea1)
            )
        );
    }
    test_field_wArea1();
    fn test_field_wArea2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wArea2) as usize - ptr as usize
            },
            6632usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(wArea2)
            )
        );
    }
    test_field_wArea2();
    fn test_field_per_vcsel_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).per_vcsel_cal_data) as usize - ptr as usize
            },
            7144usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(per_vcsel_cal_data)
            )
        );
    }
    test_field_per_vcsel_cal_data();
    fn test_field_bin_rec_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bin_rec_pos) as usize - ptr as usize
            },
            7156usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(bin_rec_pos)
            )
        );
    }
    test_field_bin_rec_pos();
    fn test_field_pos_before_next_recom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos_before_next_recom) as usize - ptr as usize
            },
            7157usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(pos_before_next_recom)
            )
        );
    }
    test_field_pos_before_next_recom();
    fn test_field_multi_bins_rec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).multi_bins_rec) as usize - ptr as usize
            },
            7160usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverData_t),
                "::",
                stringify!(multi_bins_rec)
            )
        );
    }
    test_field_multi_bins_rec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_LLDriverResults_t {
    range_results: VL53LX_range_results_t,
    zone_dyn_cfgs: VL53LX_zone_private_dyn_cfgs_t,
    zone_results: VL53LX_zone_results_t,
    zone_hists: VL53LX_zone_histograms_t,
    zone_cal: VL53LX_zone_calibration_results_t,
}
#[test]
fn bindgen_test_layout_VL53LX_LLDriverResults_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_LLDriverResults_t>(),
        2400usize,
        concat!("Size of: ", stringify!(VL53LX_LLDriverResults_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_LLDriverResults_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_LLDriverResults_t))
    );
    fn test_field_range_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_results) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverResults_t),
                "::",
                stringify!(range_results)
            )
        );
    }
    test_field_range_results();
    fn test_field_zone_dyn_cfgs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_dyn_cfgs) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverResults_t),
                "::",
                stringify!(zone_dyn_cfgs)
            )
        );
    }
    test_field_zone_dyn_cfgs();
    fn test_field_zone_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_results) as usize - ptr as usize
            },
            580usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverResults_t),
                "::",
                stringify!(zone_results)
            )
        );
    }
    test_field_zone_results();
    fn test_field_zone_hists() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_hists) as usize - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverResults_t),
                "::",
                stringify!(zone_hists)
            )
        );
    }
    test_field_zone_hists();
    fn test_field_zone_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_LLDriverResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_cal) as usize - ptr as usize
            },
            1932usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_LLDriverResults_t),
                "::",
                stringify!(zone_cal)
            )
        );
    }
    test_field_zone_cal();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_calibration_data_t {
    struct_version: u32,
    customer: VL53LX_customer_nvm_managed_t,
    fmt_dmax_cal: VL53LX_dmax_calibration_data_t,
    cust_dmax_cal: VL53LX_dmax_calibration_data_t,
    add_off_cal_data: VL53LX_additional_offset_cal_data_t,
    optical_centre: VL53LX_optical_centre_t,
    xtalkhisto: VL53LX_xtalk_histogram_data_t,
    gain_cal: VL53LX_gain_calibration_data_t,
    cal_peak_rate_map: VL53LX_cal_peak_rate_map_t,
    per_vcsel_cal_data: VL53LX_per_vcsel_period_offset_cal_data_t,
}
#[test]
fn bindgen_test_layout_VL53LX_calibration_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_calibration_data_t>(),
        380usize,
        concat!("Size of: ", stringify!(VL53LX_calibration_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_calibration_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_calibration_data_t))
    );
    fn test_field_struct_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(struct_version)
            )
        );
    }
    test_field_struct_version();
    fn test_field_customer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).customer) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(customer)
            )
        );
    }
    test_field_customer();
    fn test_field_fmt_dmax_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_dmax_cal) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(fmt_dmax_cal)
            )
        );
    }
    test_field_fmt_dmax_cal();
    fn test_field_cust_dmax_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cust_dmax_cal) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(cust_dmax_cal)
            )
        );
    }
    test_field_cust_dmax_cal();
    fn test_field_add_off_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_off_cal_data) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(add_off_cal_data)
            )
        );
    }
    test_field_add_off_cal_data();
    fn test_field_optical_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).optical_centre) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(optical_centre)
            )
        );
    }
    test_field_optical_centre();
    fn test_field_xtalkhisto() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalkhisto) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(xtalkhisto)
            )
        );
    }
    test_field_xtalkhisto();
    fn test_field_gain_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gain_cal) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(gain_cal)
            )
        );
    }
    test_field_gain_cal();
    fn test_field_cal_peak_rate_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_peak_rate_map) as usize - ptr as usize
            },
            308usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(cal_peak_rate_map)
            )
        );
    }
    test_field_cal_peak_rate_map();
    fn test_field_per_vcsel_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_calibration_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).per_vcsel_cal_data) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_calibration_data_t),
                "::",
                stringify!(per_vcsel_cal_data)
            )
        );
    }
    test_field_per_vcsel_cal_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_debug_data_t {
    customer: VL53LX_customer_nvm_managed_t,
    xtalk_extract_cfg: VL53LX_xtalkextract_config_t,
    xtalk_cfg: VL53LX_xtalk_config_t,
    hist_data: VL53LX_histogram_bin_data_t,
    xtalk_shapes: VL53LX_xtalk_histogram_data_t,
    xtalk_results: VL53LX_xtalk_range_results_t,
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_debug_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_debug_data_t>(),
        3620usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_debug_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_debug_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_debug_data_t))
    );
    fn test_field_customer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).customer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_debug_data_t),
                "::",
                stringify!(customer)
            )
        );
    }
    test_field_customer();
    fn test_field_xtalk_extract_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_extract_cfg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_debug_data_t),
                "::",
                stringify!(xtalk_extract_cfg)
            )
        );
    }
    test_field_xtalk_extract_cfg();
    fn test_field_xtalk_cfg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_cfg) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_debug_data_t),
                "::",
                stringify!(xtalk_cfg)
            )
        );
    }
    test_field_xtalk_cfg();
    fn test_field_hist_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hist_data) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_debug_data_t),
                "::",
                stringify!(hist_data)
            )
        );
    }
    test_field_hist_data();
    fn test_field_xtalk_shapes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_shapes) as usize - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_debug_data_t),
                "::",
                stringify!(xtalk_shapes)
            )
        );
    }
    test_field_xtalk_shapes();
    fn test_field_xtalk_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalk_results) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_debug_data_t),
                "::",
                stringify!(xtalk_results)
            )
        );
    }
    test_field_xtalk_results();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_offset_debug_data_t {
    customer: VL53LX_customer_nvm_managed_t,
    fmt_dmax_cal: VL53LX_dmax_calibration_data_t,
    cust_dmax_cal: VL53LX_dmax_calibration_data_t,
    add_off_cal_data: VL53LX_additional_offset_cal_data_t,
    offset_results: VL53LX_offset_range_results_t,
}
#[test]
fn bindgen_test_layout_VL53LX_offset_debug_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_offset_debug_data_t>(),
        144usize,
        concat!("Size of: ", stringify!(VL53LX_offset_debug_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_offset_debug_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_offset_debug_data_t))
    );
    fn test_field_customer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).customer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_debug_data_t),
                "::",
                stringify!(customer)
            )
        );
    }
    test_field_customer();
    fn test_field_fmt_dmax_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_dmax_cal) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_debug_data_t),
                "::",
                stringify!(fmt_dmax_cal)
            )
        );
    }
    test_field_fmt_dmax_cal();
    fn test_field_cust_dmax_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cust_dmax_cal) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_debug_data_t),
                "::",
                stringify!(cust_dmax_cal)
            )
        );
    }
    test_field_cust_dmax_cal();
    fn test_field_add_off_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_off_cal_data) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_debug_data_t),
                "::",
                stringify!(add_off_cal_data)
            )
        );
    }
    test_field_add_off_cal_data();
    fn test_field_offset_results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_offset_debug_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_results) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_offset_debug_data_t),
                "::",
                stringify!(offset_results)
            )
        );
    }
    test_field_offset_results();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_tuning_parameters_t {
    vl53lx_tuningparm_version: u16,
    vl53lx_tuningparm_key_table_version: u16,
    vl53lx_tuningparm_lld_version: u16,
    vl53lx_tuningparm_hist_algo_select: u8,
    vl53lx_tuningparm_hist_target_order: u8,
    vl53lx_tuningparm_hist_filter_woi_0: u8,
    vl53lx_tuningparm_hist_filter_woi_1: u8,
    vl53lx_tuningparm_hist_amb_est_method: u8,
    vl53lx_tuningparm_hist_amb_thresh_sigma_0: u8,
    vl53lx_tuningparm_hist_amb_thresh_sigma_1: u8,
    vl53lx_tuningparm_hist_min_amb_thresh_events: i32,
    vl53lx_tuningparm_hist_amb_events_scaler: u16,
    vl53lx_tuningparm_hist_noise_threshold: u16,
    vl53lx_tuningparm_hist_signal_total_events_limit: i32,
    vl53lx_tuningparm_hist_sigma_est_ref_mm: u8,
    vl53lx_tuningparm_hist_sigma_thresh_mm: u16,
    vl53lx_tuningparm_hist_gain_factor: u16,
    vl53lx_tuningparm_consistency_hist_phase_tolerance: u8,
    vl53lx_tuningparm_consistency_hist_min_max_tolerance_mm: u16,
    vl53lx_tuningparm_consistency_hist_event_sigma: u8,
    vl53lx_tuningparm_consistency_hist_event_sigma_min_spad_limit: u16,
    vl53lx_tuningparm_initial_phase_rtn_histo_long_range: u8,
    vl53lx_tuningparm_initial_phase_rtn_histo_med_range: u8,
    vl53lx_tuningparm_initial_phase_rtn_histo_short_range: u8,
    vl53lx_tuningparm_initial_phase_ref_histo_long_range: u8,
    vl53lx_tuningparm_initial_phase_ref_histo_med_range: u8,
    vl53lx_tuningparm_initial_phase_ref_histo_short_range: u8,
    vl53lx_tuningparm_xtalk_detect_min_valid_range_mm: i16,
    vl53lx_tuningparm_xtalk_detect_max_valid_range_mm: i16,
    vl53lx_tuningparm_xtalk_detect_max_sigma_mm: u16,
    vl53lx_tuningparm_xtalk_detect_min_max_tolerance: u16,
    vl53lx_tuningparm_xtalk_detect_max_valid_rate_kcps: u16,
    vl53lx_tuningparm_xtalk_detect_event_sigma: u8,
    vl53lx_tuningparm_hist_xtalk_margin_kcps: i16,
    vl53lx_tuningparm_consistency_lite_phase_tolerance: u8,
    vl53lx_tuningparm_phasecal_target: u8,
    vl53lx_tuningparm_lite_cal_repeat_rate: u16,
    vl53lx_tuningparm_lite_ranging_gain_factor: u16,
    vl53lx_tuningparm_lite_min_clip_mm: u8,
    vl53lx_tuningparm_lite_long_sigma_thresh_mm: u16,
    vl53lx_tuningparm_lite_med_sigma_thresh_mm: u16,
    vl53lx_tuningparm_lite_short_sigma_thresh_mm: u16,
    vl53lx_tuningparm_lite_long_min_count_rate_rtn_mcps: u16,
    vl53lx_tuningparm_lite_med_min_count_rate_rtn_mcps: u16,
    vl53lx_tuningparm_lite_short_min_count_rate_rtn_mcps: u16,
    vl53lx_tuningparm_lite_sigma_est_pulse_width: u8,
    vl53lx_tuningparm_lite_sigma_est_amb_width_ns: u8,
    vl53lx_tuningparm_lite_sigma_ref_mm: u8,
    vl53lx_tuningparm_lite_rit_mult: u8,
    vl53lx_tuningparm_lite_seed_config: u8,
    vl53lx_tuningparm_lite_quantifier: u8,
    vl53lx_tuningparm_lite_first_order_select: u8,
    vl53lx_tuningparm_lite_xtalk_margin_kcps: i16,
    vl53lx_tuningparm_initial_phase_rtn_lite_long_range: u8,
    vl53lx_tuningparm_initial_phase_rtn_lite_med_range: u8,
    vl53lx_tuningparm_initial_phase_rtn_lite_short_range: u8,
    vl53lx_tuningparm_initial_phase_ref_lite_long_range: u8,
    vl53lx_tuningparm_initial_phase_ref_lite_med_range: u8,
    vl53lx_tuningparm_initial_phase_ref_lite_short_range: u8,
    vl53lx_tuningparm_timed_seed_config: u8,
    vl53lx_tuningparm_dmax_cfg_signal_thresh_sigma: u8,
    vl53lx_tuningparm_dmax_cfg_reflectance_array_0: u16,
    vl53lx_tuningparm_dmax_cfg_reflectance_array_1: u16,
    vl53lx_tuningparm_dmax_cfg_reflectance_array_2: u16,
    vl53lx_tuningparm_dmax_cfg_reflectance_array_3: u16,
    vl53lx_tuningparm_dmax_cfg_reflectance_array_4: u16,
    vl53lx_tuningparm_vhv_loopbound: u8,
    vl53lx_tuningparm_refspadchar_device_test_mode: u8,
    vl53lx_tuningparm_refspadchar_vcsel_period: u8,
    vl53lx_tuningparm_refspadchar_phasecal_timeout_us: u32,
    vl53lx_tuningparm_refspadchar_target_count_rate_mcps: u16,
    vl53lx_tuningparm_refspadchar_min_countrate_limit_mcps: u16,
    vl53lx_tuningparm_refspadchar_max_countrate_limit_mcps: u16,
    vl53lx_tuningparm_xtalk_extract_num_of_samples: u8,
    vl53lx_tuningparm_xtalk_extract_min_filter_thresh_mm: i16,
    vl53lx_tuningparm_xtalk_extract_max_filter_thresh_mm: i16,
    vl53lx_tuningparm_xtalk_extract_dss_rate_mcps: u16,
    vl53lx_tuningparm_xtalk_extract_phasecal_timeout_us: u32,
    vl53lx_tuningparm_xtalk_extract_max_valid_rate_kcps: u16,
    vl53lx_tuningparm_xtalk_extract_sigma_threshold_mm: u16,
    vl53lx_tuningparm_xtalk_extract_dss_timeout_us: u32,
    vl53lx_tuningparm_xtalk_extract_bin_timeout_us: u32,
    vl53lx_tuningparm_offset_cal_dss_rate_mcps: u16,
    vl53lx_tuningparm_offset_cal_phasecal_timeout_us: u32,
    vl53lx_tuningparm_offset_cal_mm_timeout_us: u32,
    vl53lx_tuningparm_offset_cal_range_timeout_us: u32,
    vl53lx_tuningparm_offset_cal_pre_samples: u8,
    vl53lx_tuningparm_offset_cal_mm1_samples: u8,
    vl53lx_tuningparm_offset_cal_mm2_samples: u8,
    vl53lx_tuningparm_zone_cal_dss_rate_mcps: u16,
    vl53lx_tuningparm_zone_cal_phasecal_timeout_us: u32,
    vl53lx_tuningparm_zone_cal_dss_timeout_us: u32,
    vl53lx_tuningparm_zone_cal_phasecal_num_samples: u16,
    vl53lx_tuningparm_zone_cal_range_timeout_us: u32,
    vl53lx_tuningparm_zone_cal_zone_num_samples: u16,
    vl53lx_tuningparm_spadmap_vcsel_period: u8,
    vl53lx_tuningparm_spadmap_vcsel_start: u8,
    vl53lx_tuningparm_spadmap_rate_limit_mcps: u16,
    vl53lx_tuningparm_lite_dss_config_target_total_rate_mcps: u16,
    vl53lx_tuningparm_ranging_dss_config_target_total_rate_mcps: u16,
    vl53lx_tuningparm_mz_dss_config_target_total_rate_mcps: u16,
    vl53lx_tuningparm_timed_dss_config_target_total_rate_mcps: u16,
    vl53lx_tuningparm_lite_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_ranging_long_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_ranging_med_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_ranging_short_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_mz_long_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_mz_med_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_mz_short_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_timed_phasecal_config_timeout_us: u32,
    vl53lx_tuningparm_lite_mm_config_timeout_us: u32,
    vl53lx_tuningparm_ranging_mm_config_timeout_us: u32,
    vl53lx_tuningparm_mz_mm_config_timeout_us: u32,
    vl53lx_tuningparm_timed_mm_config_timeout_us: u32,
    vl53lx_tuningparm_lite_range_config_timeout_us: u32,
    vl53lx_tuningparm_ranging_range_config_timeout_us: u32,
    vl53lx_tuningparm_mz_range_config_timeout_us: u32,
    vl53lx_tuningparm_timed_range_config_timeout_us: u32,
    vl53lx_tuningparm_dynxtalk_smudge_margin: u16,
    vl53lx_tuningparm_dynxtalk_noise_margin: u32,
    vl53lx_tuningparm_dynxtalk_xtalk_offset_limit: u32,
    vl53lx_tuningparm_dynxtalk_xtalk_offset_limit_hi: u8,
    vl53lx_tuningparm_dynxtalk_sample_limit: u32,
    vl53lx_tuningparm_dynxtalk_single_xtalk_delta: u32,
    vl53lx_tuningparm_dynxtalk_averaged_xtalk_delta: u32,
    vl53lx_tuningparm_dynxtalk_clip_limit: u32,
    vl53lx_tuningparm_dynxtalk_scaler_calc_method: u8,
    vl53lx_tuningparm_dynxtalk_xgradient_scaler: i16,
    vl53lx_tuningparm_dynxtalk_ygradient_scaler: i16,
    vl53lx_tuningparm_dynxtalk_user_scaler_set: u8,
    vl53lx_tuningparm_dynxtalk_smudge_cor_single_apply: u8,
    vl53lx_tuningparm_dynxtalk_xtalk_amb_threshold: u32,
    vl53lx_tuningparm_dynxtalk_nodetect_amb_threshold_kcps: u32,
    vl53lx_tuningparm_dynxtalk_nodetect_sample_limit: u32,
    vl53lx_tuningparm_dynxtalk_nodetect_xtalk_offset_kcps: u32,
    vl53lx_tuningparm_dynxtalk_nodetect_min_range_mm: u16,
    vl53lx_tuningparm_lowpowerauto_vhv_loop_bound: u8,
    vl53lx_tuningparm_lowpowerauto_mm_config_timeout_us: u32,
    vl53lx_tuningparm_lowpowerauto_range_config_timeout_us: u32,
    vl53lx_tuningparm_very_short_dss_rate_mcps: u16,
    vl53lx_tuningparm_phasecal_patch_power: u32,
}
#[test]
fn bindgen_test_layout_VL53LX_tuning_parameters_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_tuning_parameters_t>(),
        348usize,
        concat!("Size of: ", stringify!(VL53LX_tuning_parameters_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_tuning_parameters_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_tuning_parameters_t))
    );
    fn test_field_vl53lx_tuningparm_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_version)
            )
        );
    }
    test_field_vl53lx_tuningparm_version();
    fn test_field_vl53lx_tuningparm_key_table_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_key_table_version) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_key_table_version)
            )
        );
    }
    test_field_vl53lx_tuningparm_key_table_version();
    fn test_field_vl53lx_tuningparm_lld_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lld_version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lld_version)
            )
        );
    }
    test_field_vl53lx_tuningparm_lld_version();
    fn test_field_vl53lx_tuningparm_hist_algo_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_algo_select) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_algo_select)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_algo_select();
    fn test_field_vl53lx_tuningparm_hist_target_order() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_target_order) as usize
                    - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_target_order)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_target_order();
    fn test_field_vl53lx_tuningparm_hist_filter_woi_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_filter_woi_0) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_filter_woi_0)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_filter_woi_0();
    fn test_field_vl53lx_tuningparm_hist_filter_woi_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_filter_woi_1) as usize
                    - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_filter_woi_1)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_filter_woi_1();
    fn test_field_vl53lx_tuningparm_hist_amb_est_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_amb_est_method) as usize
                    - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_amb_est_method)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_amb_est_method();
    fn test_field_vl53lx_tuningparm_hist_amb_thresh_sigma_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_amb_thresh_sigma_0) as usize
                    - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_amb_thresh_sigma_0)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_amb_thresh_sigma_0();
    fn test_field_vl53lx_tuningparm_hist_amb_thresh_sigma_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_amb_thresh_sigma_1) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_amb_thresh_sigma_1)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_amb_thresh_sigma_1();
    fn test_field_vl53lx_tuningparm_hist_min_amb_thresh_events() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_min_amb_thresh_events) as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_min_amb_thresh_events)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_min_amb_thresh_events();
    fn test_field_vl53lx_tuningparm_hist_amb_events_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_amb_events_scaler) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_amb_events_scaler)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_amb_events_scaler();
    fn test_field_vl53lx_tuningparm_hist_noise_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_noise_threshold) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_noise_threshold)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_noise_threshold();
    fn test_field_vl53lx_tuningparm_hist_signal_total_events_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_signal_total_events_limit)
                    as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_signal_total_events_limit)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_signal_total_events_limit();
    fn test_field_vl53lx_tuningparm_hist_sigma_est_ref_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_sigma_est_ref_mm) as usize
                    - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_sigma_est_ref_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_sigma_est_ref_mm();
    fn test_field_vl53lx_tuningparm_hist_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_sigma_thresh_mm) as usize
                    - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_sigma_thresh_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_sigma_thresh_mm();
    fn test_field_vl53lx_tuningparm_hist_gain_factor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_gain_factor) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_gain_factor)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_gain_factor();
    fn test_field_vl53lx_tuningparm_consistency_hist_phase_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_consistency_hist_phase_tolerance)
                    as usize
                    - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_consistency_hist_phase_tolerance)
            )
        );
    }
    test_field_vl53lx_tuningparm_consistency_hist_phase_tolerance();
    fn test_field_vl53lx_tuningparm_consistency_hist_min_max_tolerance_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_consistency_hist_min_max_tolerance_mm)
                    as usize
                    - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_consistency_hist_min_max_tolerance_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_consistency_hist_min_max_tolerance_mm();
    fn test_field_vl53lx_tuningparm_consistency_hist_event_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_consistency_hist_event_sigma) as usize
                    - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_consistency_hist_event_sigma)
            )
        );
    }
    test_field_vl53lx_tuningparm_consistency_hist_event_sigma();
    fn test_field_vl53lx_tuningparm_consistency_hist_event_sigma_min_spad_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_consistency_hist_event_sigma_min_spad_limit
                ) as usize
                    - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_consistency_hist_event_sigma_min_spad_limit)
            )
        );
    }
    test_field_vl53lx_tuningparm_consistency_hist_event_sigma_min_spad_limit();
    fn test_field_vl53lx_tuningparm_initial_phase_rtn_histo_long_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_rtn_histo_long_range)
                    as usize
                    - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_rtn_histo_long_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_rtn_histo_long_range();
    fn test_field_vl53lx_tuningparm_initial_phase_rtn_histo_med_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_rtn_histo_med_range)
                    as usize
                    - ptr as usize
            },
            43usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_rtn_histo_med_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_rtn_histo_med_range();
    fn test_field_vl53lx_tuningparm_initial_phase_rtn_histo_short_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_rtn_histo_short_range)
                    as usize
                    - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_rtn_histo_short_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_rtn_histo_short_range();
    fn test_field_vl53lx_tuningparm_initial_phase_ref_histo_long_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_ref_histo_long_range)
                    as usize
                    - ptr as usize
            },
            45usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_ref_histo_long_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_ref_histo_long_range();
    fn test_field_vl53lx_tuningparm_initial_phase_ref_histo_med_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_ref_histo_med_range)
                    as usize
                    - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_ref_histo_med_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_ref_histo_med_range();
    fn test_field_vl53lx_tuningparm_initial_phase_ref_histo_short_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_ref_histo_short_range)
                    as usize
                    - ptr as usize
            },
            47usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_ref_histo_short_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_ref_histo_short_range();
    fn test_field_vl53lx_tuningparm_xtalk_detect_min_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_detect_min_valid_range_mm)
                    as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_detect_min_valid_range_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_detect_min_valid_range_mm();
    fn test_field_vl53lx_tuningparm_xtalk_detect_max_valid_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_detect_max_valid_range_mm)
                    as usize
                    - ptr as usize
            },
            50usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_detect_max_valid_range_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_detect_max_valid_range_mm();
    fn test_field_vl53lx_tuningparm_xtalk_detect_max_sigma_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_detect_max_sigma_mm) as usize
                    - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_detect_max_sigma_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_detect_max_sigma_mm();
    fn test_field_vl53lx_tuningparm_xtalk_detect_min_max_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_detect_min_max_tolerance)
                    as usize
                    - ptr as usize
            },
            54usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_detect_min_max_tolerance)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_detect_min_max_tolerance();
    fn test_field_vl53lx_tuningparm_xtalk_detect_max_valid_rate_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_detect_max_valid_rate_kcps)
                    as usize
                    - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_detect_max_valid_rate_kcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_detect_max_valid_rate_kcps();
    fn test_field_vl53lx_tuningparm_xtalk_detect_event_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_detect_event_sigma) as usize
                    - ptr as usize
            },
            58usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_detect_event_sigma)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_detect_event_sigma();
    fn test_field_vl53lx_tuningparm_hist_xtalk_margin_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_hist_xtalk_margin_kcps) as usize
                    - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_hist_xtalk_margin_kcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_hist_xtalk_margin_kcps();
    fn test_field_vl53lx_tuningparm_consistency_lite_phase_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_consistency_lite_phase_tolerance)
                    as usize
                    - ptr as usize
            },
            62usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_consistency_lite_phase_tolerance)
            )
        );
    }
    test_field_vl53lx_tuningparm_consistency_lite_phase_tolerance();
    fn test_field_vl53lx_tuningparm_phasecal_target() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_phasecal_target) as usize
                    - ptr as usize
            },
            63usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_phasecal_target)
            )
        );
    }
    test_field_vl53lx_tuningparm_phasecal_target();
    fn test_field_vl53lx_tuningparm_lite_cal_repeat_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_cal_repeat_rate) as usize
                    - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_cal_repeat_rate)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_cal_repeat_rate();
    fn test_field_vl53lx_tuningparm_lite_ranging_gain_factor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_ranging_gain_factor) as usize
                    - ptr as usize
            },
            66usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_ranging_gain_factor)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_ranging_gain_factor();
    fn test_field_vl53lx_tuningparm_lite_min_clip_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_min_clip_mm) as usize
                    - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_min_clip_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_min_clip_mm();
    fn test_field_vl53lx_tuningparm_lite_long_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_long_sigma_thresh_mm) as usize
                    - ptr as usize
            },
            70usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_long_sigma_thresh_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_long_sigma_thresh_mm();
    fn test_field_vl53lx_tuningparm_lite_med_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_med_sigma_thresh_mm) as usize
                    - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_med_sigma_thresh_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_med_sigma_thresh_mm();
    fn test_field_vl53lx_tuningparm_lite_short_sigma_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_short_sigma_thresh_mm) as usize
                    - ptr as usize
            },
            74usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_short_sigma_thresh_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_short_sigma_thresh_mm();
    fn test_field_vl53lx_tuningparm_lite_long_min_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_long_min_count_rate_rtn_mcps)
                    as usize
                    - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_long_min_count_rate_rtn_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_long_min_count_rate_rtn_mcps();
    fn test_field_vl53lx_tuningparm_lite_med_min_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_med_min_count_rate_rtn_mcps)
                    as usize
                    - ptr as usize
            },
            78usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_med_min_count_rate_rtn_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_med_min_count_rate_rtn_mcps();
    fn test_field_vl53lx_tuningparm_lite_short_min_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_short_min_count_rate_rtn_mcps)
                    as usize
                    - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_short_min_count_rate_rtn_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_short_min_count_rate_rtn_mcps();
    fn test_field_vl53lx_tuningparm_lite_sigma_est_pulse_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_sigma_est_pulse_width) as usize
                    - ptr as usize
            },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_sigma_est_pulse_width)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_sigma_est_pulse_width();
    fn test_field_vl53lx_tuningparm_lite_sigma_est_amb_width_ns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_sigma_est_amb_width_ns) as usize
                    - ptr as usize
            },
            83usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_sigma_est_amb_width_ns)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_sigma_est_amb_width_ns();
    fn test_field_vl53lx_tuningparm_lite_sigma_ref_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_sigma_ref_mm) as usize
                    - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_sigma_ref_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_sigma_ref_mm();
    fn test_field_vl53lx_tuningparm_lite_rit_mult() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_rit_mult) as usize - ptr as usize
            },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_rit_mult)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_rit_mult();
    fn test_field_vl53lx_tuningparm_lite_seed_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_seed_config) as usize
                    - ptr as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_seed_config)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_seed_config();
    fn test_field_vl53lx_tuningparm_lite_quantifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_quantifier) as usize
                    - ptr as usize
            },
            87usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_quantifier)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_quantifier();
    fn test_field_vl53lx_tuningparm_lite_first_order_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_first_order_select) as usize
                    - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_first_order_select)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_first_order_select();
    fn test_field_vl53lx_tuningparm_lite_xtalk_margin_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_xtalk_margin_kcps) as usize
                    - ptr as usize
            },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_xtalk_margin_kcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_xtalk_margin_kcps();
    fn test_field_vl53lx_tuningparm_initial_phase_rtn_lite_long_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_rtn_lite_long_range)
                    as usize
                    - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_rtn_lite_long_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_rtn_lite_long_range();
    fn test_field_vl53lx_tuningparm_initial_phase_rtn_lite_med_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_rtn_lite_med_range)
                    as usize
                    - ptr as usize
            },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_rtn_lite_med_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_rtn_lite_med_range();
    fn test_field_vl53lx_tuningparm_initial_phase_rtn_lite_short_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_rtn_lite_short_range)
                    as usize
                    - ptr as usize
            },
            94usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_rtn_lite_short_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_rtn_lite_short_range();
    fn test_field_vl53lx_tuningparm_initial_phase_ref_lite_long_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_ref_lite_long_range)
                    as usize
                    - ptr as usize
            },
            95usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_ref_lite_long_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_ref_lite_long_range();
    fn test_field_vl53lx_tuningparm_initial_phase_ref_lite_med_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_ref_lite_med_range)
                    as usize
                    - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_ref_lite_med_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_ref_lite_med_range();
    fn test_field_vl53lx_tuningparm_initial_phase_ref_lite_short_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_initial_phase_ref_lite_short_range)
                    as usize
                    - ptr as usize
            },
            97usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_initial_phase_ref_lite_short_range)
            )
        );
    }
    test_field_vl53lx_tuningparm_initial_phase_ref_lite_short_range();
    fn test_field_vl53lx_tuningparm_timed_seed_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_timed_seed_config) as usize
                    - ptr as usize
            },
            98usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_timed_seed_config)
            )
        );
    }
    test_field_vl53lx_tuningparm_timed_seed_config();
    fn test_field_vl53lx_tuningparm_dmax_cfg_signal_thresh_sigma() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dmax_cfg_signal_thresh_sigma) as usize
                    - ptr as usize
            },
            99usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dmax_cfg_signal_thresh_sigma)
            )
        );
    }
    test_field_vl53lx_tuningparm_dmax_cfg_signal_thresh_sigma();
    fn test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dmax_cfg_reflectance_array_0) as usize
                    - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dmax_cfg_reflectance_array_0)
            )
        );
    }
    test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_0();
    fn test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dmax_cfg_reflectance_array_1) as usize
                    - ptr as usize
            },
            102usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dmax_cfg_reflectance_array_1)
            )
        );
    }
    test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_1();
    fn test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dmax_cfg_reflectance_array_2) as usize
                    - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dmax_cfg_reflectance_array_2)
            )
        );
    }
    test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_2();
    fn test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dmax_cfg_reflectance_array_3) as usize
                    - ptr as usize
            },
            106usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dmax_cfg_reflectance_array_3)
            )
        );
    }
    test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_3();
    fn test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dmax_cfg_reflectance_array_4) as usize
                    - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dmax_cfg_reflectance_array_4)
            )
        );
    }
    test_field_vl53lx_tuningparm_dmax_cfg_reflectance_array_4();
    fn test_field_vl53lx_tuningparm_vhv_loopbound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_vhv_loopbound) as usize - ptr as usize
            },
            110usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_vhv_loopbound)
            )
        );
    }
    test_field_vl53lx_tuningparm_vhv_loopbound();
    fn test_field_vl53lx_tuningparm_refspadchar_device_test_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_refspadchar_device_test_mode) as usize
                    - ptr as usize
            },
            111usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_refspadchar_device_test_mode)
            )
        );
    }
    test_field_vl53lx_tuningparm_refspadchar_device_test_mode();
    fn test_field_vl53lx_tuningparm_refspadchar_vcsel_period() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_refspadchar_vcsel_period) as usize
                    - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_refspadchar_vcsel_period)
            )
        );
    }
    test_field_vl53lx_tuningparm_refspadchar_vcsel_period();
    fn test_field_vl53lx_tuningparm_refspadchar_phasecal_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_refspadchar_phasecal_timeout_us)
                    as usize
                    - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_refspadchar_phasecal_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_refspadchar_phasecal_timeout_us();
    fn test_field_vl53lx_tuningparm_refspadchar_target_count_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_refspadchar_target_count_rate_mcps)
                    as usize
                    - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_refspadchar_target_count_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_refspadchar_target_count_rate_mcps();
    fn test_field_vl53lx_tuningparm_refspadchar_min_countrate_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_refspadchar_min_countrate_limit_mcps)
                    as usize
                    - ptr as usize
            },
            122usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_refspadchar_min_countrate_limit_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_refspadchar_min_countrate_limit_mcps();
    fn test_field_vl53lx_tuningparm_refspadchar_max_countrate_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_refspadchar_max_countrate_limit_mcps)
                    as usize
                    - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_refspadchar_max_countrate_limit_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_refspadchar_max_countrate_limit_mcps();
    fn test_field_vl53lx_tuningparm_xtalk_extract_num_of_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_num_of_samples) as usize
                    - ptr as usize
            },
            126usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_num_of_samples)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_num_of_samples();
    fn test_field_vl53lx_tuningparm_xtalk_extract_min_filter_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_min_filter_thresh_mm)
                    as usize
                    - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_min_filter_thresh_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_min_filter_thresh_mm();
    fn test_field_vl53lx_tuningparm_xtalk_extract_max_filter_thresh_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_max_filter_thresh_mm)
                    as usize
                    - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_max_filter_thresh_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_max_filter_thresh_mm();
    fn test_field_vl53lx_tuningparm_xtalk_extract_dss_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_dss_rate_mcps) as usize
                    - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_dss_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_dss_rate_mcps();
    fn test_field_vl53lx_tuningparm_xtalk_extract_phasecal_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_phasecal_timeout_us)
                    as usize
                    - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_phasecal_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_phasecal_timeout_us();
    fn test_field_vl53lx_tuningparm_xtalk_extract_max_valid_rate_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_max_valid_rate_kcps)
                    as usize
                    - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_max_valid_rate_kcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_max_valid_rate_kcps();
    fn test_field_vl53lx_tuningparm_xtalk_extract_sigma_threshold_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_sigma_threshold_mm)
                    as usize
                    - ptr as usize
            },
            142usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_sigma_threshold_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_sigma_threshold_mm();
    fn test_field_vl53lx_tuningparm_xtalk_extract_dss_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_dss_timeout_us) as usize
                    - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_dss_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_dss_timeout_us();
    fn test_field_vl53lx_tuningparm_xtalk_extract_bin_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_xtalk_extract_bin_timeout_us) as usize
                    - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_xtalk_extract_bin_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_xtalk_extract_bin_timeout_us();
    fn test_field_vl53lx_tuningparm_offset_cal_dss_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_dss_rate_mcps) as usize
                    - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_dss_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_dss_rate_mcps();
    fn test_field_vl53lx_tuningparm_offset_cal_phasecal_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_phasecal_timeout_us)
                    as usize
                    - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_phasecal_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_phasecal_timeout_us();
    fn test_field_vl53lx_tuningparm_offset_cal_mm_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_mm_timeout_us) as usize
                    - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_mm_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_mm_timeout_us();
    fn test_field_vl53lx_tuningparm_offset_cal_range_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_range_timeout_us) as usize
                    - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_range_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_range_timeout_us();
    fn test_field_vl53lx_tuningparm_offset_cal_pre_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_pre_samples) as usize
                    - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_pre_samples)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_pre_samples();
    fn test_field_vl53lx_tuningparm_offset_cal_mm1_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_mm1_samples) as usize
                    - ptr as usize
            },
            169usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_mm1_samples)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_mm1_samples();
    fn test_field_vl53lx_tuningparm_offset_cal_mm2_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_offset_cal_mm2_samples) as usize
                    - ptr as usize
            },
            170usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_offset_cal_mm2_samples)
            )
        );
    }
    test_field_vl53lx_tuningparm_offset_cal_mm2_samples();
    fn test_field_vl53lx_tuningparm_zone_cal_dss_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_zone_cal_dss_rate_mcps) as usize
                    - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_zone_cal_dss_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_zone_cal_dss_rate_mcps();
    fn test_field_vl53lx_tuningparm_zone_cal_phasecal_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_zone_cal_phasecal_timeout_us) as usize
                    - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_zone_cal_phasecal_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_zone_cal_phasecal_timeout_us();
    fn test_field_vl53lx_tuningparm_zone_cal_dss_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_zone_cal_dss_timeout_us) as usize
                    - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_zone_cal_dss_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_zone_cal_dss_timeout_us();
    fn test_field_vl53lx_tuningparm_zone_cal_phasecal_num_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_zone_cal_phasecal_num_samples)
                    as usize
                    - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_zone_cal_phasecal_num_samples)
            )
        );
    }
    test_field_vl53lx_tuningparm_zone_cal_phasecal_num_samples();
    fn test_field_vl53lx_tuningparm_zone_cal_range_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_zone_cal_range_timeout_us) as usize
                    - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_zone_cal_range_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_zone_cal_range_timeout_us();
    fn test_field_vl53lx_tuningparm_zone_cal_zone_num_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_zone_cal_zone_num_samples) as usize
                    - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_zone_cal_zone_num_samples)
            )
        );
    }
    test_field_vl53lx_tuningparm_zone_cal_zone_num_samples();
    fn test_field_vl53lx_tuningparm_spadmap_vcsel_period() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_spadmap_vcsel_period) as usize
                    - ptr as usize
            },
            194usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_spadmap_vcsel_period)
            )
        );
    }
    test_field_vl53lx_tuningparm_spadmap_vcsel_period();
    fn test_field_vl53lx_tuningparm_spadmap_vcsel_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_spadmap_vcsel_start) as usize
                    - ptr as usize
            },
            195usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_spadmap_vcsel_start)
            )
        );
    }
    test_field_vl53lx_tuningparm_spadmap_vcsel_start();
    fn test_field_vl53lx_tuningparm_spadmap_rate_limit_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_spadmap_rate_limit_mcps) as usize
                    - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_spadmap_rate_limit_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_spadmap_rate_limit_mcps();
    fn test_field_vl53lx_tuningparm_lite_dss_config_target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_lite_dss_config_target_total_rate_mcps
                ) as usize
                    - ptr as usize
            },
            198usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_dss_config_target_total_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_dss_config_target_total_rate_mcps();
    fn test_field_vl53lx_tuningparm_ranging_dss_config_target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_ranging_dss_config_target_total_rate_mcps
                ) as usize
                    - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_ranging_dss_config_target_total_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_ranging_dss_config_target_total_rate_mcps();
    fn test_field_vl53lx_tuningparm_mz_dss_config_target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_mz_dss_config_target_total_rate_mcps)
                    as usize
                    - ptr as usize
            },
            202usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_mz_dss_config_target_total_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_mz_dss_config_target_total_rate_mcps();
    fn test_field_vl53lx_tuningparm_timed_dss_config_target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_timed_dss_config_target_total_rate_mcps
                ) as usize
                    - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_timed_dss_config_target_total_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_timed_dss_config_target_total_rate_mcps();
    fn test_field_vl53lx_tuningparm_lite_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_phasecal_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_ranging_long_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_ranging_long_phasecal_config_timeout_us
                ) as usize
                    - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_ranging_long_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_ranging_long_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_ranging_med_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_ranging_med_phasecal_config_timeout_us
                ) as usize
                    - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_ranging_med_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_ranging_med_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_ranging_short_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).vl53lx_tuningparm_ranging_short_phasecal_config_timeout_us
                ) as usize
                    - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_ranging_short_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_ranging_short_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_mz_long_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_mz_long_phasecal_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_mz_long_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_mz_long_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_mz_med_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_mz_med_phasecal_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_mz_med_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_mz_med_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_mz_short_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_mz_short_phasecal_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_mz_short_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_mz_short_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_timed_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_timed_phasecal_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_timed_phasecal_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_timed_phasecal_config_timeout_us();
    fn test_field_vl53lx_tuningparm_lite_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_mm_config_timeout_us) as usize
                    - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_mm_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_mm_config_timeout_us();
    fn test_field_vl53lx_tuningparm_ranging_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_ranging_mm_config_timeout_us) as usize
                    - ptr as usize
            },
            244usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_ranging_mm_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_ranging_mm_config_timeout_us();
    fn test_field_vl53lx_tuningparm_mz_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_mz_mm_config_timeout_us) as usize
                    - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_mz_mm_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_mz_mm_config_timeout_us();
    fn test_field_vl53lx_tuningparm_timed_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_timed_mm_config_timeout_us) as usize
                    - ptr as usize
            },
            252usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_timed_mm_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_timed_mm_config_timeout_us();
    fn test_field_vl53lx_tuningparm_lite_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lite_range_config_timeout_us) as usize
                    - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lite_range_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_lite_range_config_timeout_us();
    fn test_field_vl53lx_tuningparm_ranging_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_ranging_range_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            260usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_ranging_range_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_ranging_range_config_timeout_us();
    fn test_field_vl53lx_tuningparm_mz_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_mz_range_config_timeout_us) as usize
                    - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_mz_range_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_mz_range_config_timeout_us();
    fn test_field_vl53lx_tuningparm_timed_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_timed_range_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            268usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_timed_range_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_timed_range_config_timeout_us();
    fn test_field_vl53lx_tuningparm_dynxtalk_smudge_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_smudge_margin) as usize
                    - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_smudge_margin)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_smudge_margin();
    fn test_field_vl53lx_tuningparm_dynxtalk_noise_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_noise_margin) as usize
                    - ptr as usize
            },
            276usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_noise_margin)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_noise_margin();
    fn test_field_vl53lx_tuningparm_dynxtalk_xtalk_offset_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_xtalk_offset_limit) as usize
                    - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_xtalk_offset_limit)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_xtalk_offset_limit();
    fn test_field_vl53lx_tuningparm_dynxtalk_xtalk_offset_limit_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_xtalk_offset_limit_hi)
                    as usize
                    - ptr as usize
            },
            284usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_xtalk_offset_limit_hi)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_xtalk_offset_limit_hi();
    fn test_field_vl53lx_tuningparm_dynxtalk_sample_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_sample_limit) as usize
                    - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_sample_limit)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_sample_limit();
    fn test_field_vl53lx_tuningparm_dynxtalk_single_xtalk_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_single_xtalk_delta) as usize
                    - ptr as usize
            },
            292usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_single_xtalk_delta)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_single_xtalk_delta();
    fn test_field_vl53lx_tuningparm_dynxtalk_averaged_xtalk_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_averaged_xtalk_delta)
                    as usize
                    - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_averaged_xtalk_delta)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_averaged_xtalk_delta();
    fn test_field_vl53lx_tuningparm_dynxtalk_clip_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_clip_limit) as usize
                    - ptr as usize
            },
            300usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_clip_limit)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_clip_limit();
    fn test_field_vl53lx_tuningparm_dynxtalk_scaler_calc_method() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_scaler_calc_method) as usize
                    - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_scaler_calc_method)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_scaler_calc_method();
    fn test_field_vl53lx_tuningparm_dynxtalk_xgradient_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_xgradient_scaler) as usize
                    - ptr as usize
            },
            306usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_xgradient_scaler)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_xgradient_scaler();
    fn test_field_vl53lx_tuningparm_dynxtalk_ygradient_scaler() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_ygradient_scaler) as usize
                    - ptr as usize
            },
            308usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_ygradient_scaler)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_ygradient_scaler();
    fn test_field_vl53lx_tuningparm_dynxtalk_user_scaler_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_user_scaler_set) as usize
                    - ptr as usize
            },
            310usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_user_scaler_set)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_user_scaler_set();
    fn test_field_vl53lx_tuningparm_dynxtalk_smudge_cor_single_apply() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_smudge_cor_single_apply)
                    as usize
                    - ptr as usize
            },
            311usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_smudge_cor_single_apply)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_smudge_cor_single_apply();
    fn test_field_vl53lx_tuningparm_dynxtalk_xtalk_amb_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_xtalk_amb_threshold) as usize
                    - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_xtalk_amb_threshold)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_xtalk_amb_threshold();
    fn test_field_vl53lx_tuningparm_dynxtalk_nodetect_amb_threshold_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_nodetect_amb_threshold_kcps)
                    as usize
                    - ptr as usize
            },
            316usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_nodetect_amb_threshold_kcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_nodetect_amb_threshold_kcps();
    fn test_field_vl53lx_tuningparm_dynxtalk_nodetect_sample_limit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_nodetect_sample_limit)
                    as usize
                    - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_nodetect_sample_limit)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_nodetect_sample_limit();
    fn test_field_vl53lx_tuningparm_dynxtalk_nodetect_xtalk_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_nodetect_xtalk_offset_kcps)
                    as usize
                    - ptr as usize
            },
            324usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_nodetect_xtalk_offset_kcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_nodetect_xtalk_offset_kcps();
    fn test_field_vl53lx_tuningparm_dynxtalk_nodetect_min_range_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_dynxtalk_nodetect_min_range_mm)
                    as usize
                    - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_dynxtalk_nodetect_min_range_mm)
            )
        );
    }
    test_field_vl53lx_tuningparm_dynxtalk_nodetect_min_range_mm();
    fn test_field_vl53lx_tuningparm_lowpowerauto_vhv_loop_bound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lowpowerauto_vhv_loop_bound) as usize
                    - ptr as usize
            },
            330usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lowpowerauto_vhv_loop_bound)
            )
        );
    }
    test_field_vl53lx_tuningparm_lowpowerauto_vhv_loop_bound();
    fn test_field_vl53lx_tuningparm_lowpowerauto_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lowpowerauto_mm_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            332usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lowpowerauto_mm_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_lowpowerauto_mm_config_timeout_us();
    fn test_field_vl53lx_tuningparm_lowpowerauto_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_lowpowerauto_range_config_timeout_us)
                    as usize
                    - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_lowpowerauto_range_config_timeout_us)
            )
        );
    }
    test_field_vl53lx_tuningparm_lowpowerauto_range_config_timeout_us();
    fn test_field_vl53lx_tuningparm_very_short_dss_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_very_short_dss_rate_mcps) as usize
                    - ptr as usize
            },
            340usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_very_short_dss_rate_mcps)
            )
        );
    }
    test_field_vl53lx_tuningparm_very_short_dss_rate_mcps();
    fn test_field_vl53lx_tuningparm_phasecal_patch_power() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_tuning_parameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vl53lx_tuningparm_phasecal_patch_power) as usize
                    - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_tuning_parameters_t),
                "::",
                stringify!(vl53lx_tuningparm_phasecal_patch_power)
            )
        );
    }
    test_field_vl53lx_tuningparm_phasecal_patch_power();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_dmax_reflectance_array_t {
    target_reflectance_for_dmax: [u16; 5usize],
}
#[test]
fn bindgen_test_layout_VL53LX_dmax_reflectance_array_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_dmax_reflectance_array_t>(),
        10usize,
        concat!("Size of: ", stringify!(VL53LX_dmax_reflectance_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_dmax_reflectance_array_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_dmax_reflectance_array_t))
    );
    fn test_field_target_reflectance_for_dmax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_dmax_reflectance_array_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).target_reflectance_for_dmax) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_dmax_reflectance_array_t),
                "::",
                stringify!(target_reflectance_for_dmax)
            )
        );
    }
    test_field_target_reflectance_for_dmax();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_spad_rate_data_t {
    spad_type: u8,
    VL53LX_p_020: u16,
    rate_data: [u16; 256usize],
    no_of_values: u16,
    fractional_bits: u8,
    error_status: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_spad_rate_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_spad_rate_data_t>(),
        520usize,
        concat!("Size of: ", stringify!(VL53LX_spad_rate_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_spad_rate_data_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_spad_rate_data_t))
    );
    fn test_field_spad_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_spad_rate_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spad_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_spad_rate_data_t),
                "::",
                stringify!(spad_type)
            )
        );
    }
    test_field_spad_type();
    fn test_field_VL53LX_p_020() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_spad_rate_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_020) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_spad_rate_data_t),
                "::",
                stringify!(VL53LX_p_020)
            )
        );
    }
    test_field_VL53LX_p_020();
    fn test_field_rate_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_spad_rate_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate_data) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_spad_rate_data_t),
                "::",
                stringify!(rate_data)
            )
        );
    }
    test_field_rate_data();
    fn test_field_no_of_values() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_spad_rate_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).no_of_values) as usize - ptr as usize
            },
            516usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_spad_rate_data_t),
                "::",
                stringify!(no_of_values)
            )
        );
    }
    test_field_no_of_values();
    fn test_field_fractional_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_spad_rate_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fractional_bits) as usize - ptr as usize
            },
            518usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_spad_rate_data_t),
                "::",
                stringify!(fractional_bits)
            )
        );
    }
    test_field_fractional_bits();
    fn test_field_error_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_spad_rate_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).error_status) as usize - ptr as usize
            },
            519usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_spad_rate_data_t),
                "::",
                stringify!(error_status)
            )
        );
    }
    test_field_error_status();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_additional_data_t {
    preset_mode: VL53LX_DevicePresetModes,
    zone_preset: VL53LX_DeviceZonePreset,
    measurement_mode: VL53LX_DeviceMeasurementModes,
    offset_calibration_mode: VL53LX_OffsetCalibrationMode,
    offset_correction_mode: VL53LX_OffsetCorrectionMode,
    dmax_mode: VL53LX_DeviceDmaxMode,
    phasecal_config_timeout_us: u32,
    mm_config_timeout_us: u32,
    range_config_timeout_us: u32,
    inter_measurement_period_ms: u32,
    dss_config__target_total_rate_mcps: u16,
    VL53LX_p_006: VL53LX_histogram_bin_data_t,
}
#[test]
fn bindgen_test_layout_VL53LX_additional_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_additional_data_t>(),
        200usize,
        concat!("Size of: ", stringify!(VL53LX_additional_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_additional_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_additional_data_t))
    );
    fn test_field_preset_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preset_mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(preset_mode)
            )
        );
    }
    test_field_preset_mode();
    fn test_field_zone_preset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zone_preset) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(zone_preset)
            )
        );
    }
    test_field_zone_preset();
    fn test_field_measurement_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).measurement_mode) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(measurement_mode)
            )
        );
    }
    test_field_measurement_mode();
    fn test_field_offset_calibration_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_calibration_mode) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(offset_calibration_mode)
            )
        );
    }
    test_field_offset_calibration_mode();
    fn test_field_offset_correction_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_correction_mode) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(offset_correction_mode)
            )
        );
    }
    test_field_offset_correction_mode();
    fn test_field_dmax_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dmax_mode) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(dmax_mode)
            )
        );
    }
    test_field_dmax_mode();
    fn test_field_phasecal_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).phasecal_config_timeout_us) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(phasecal_config_timeout_us)
            )
        );
    }
    test_field_phasecal_config_timeout_us();
    fn test_field_mm_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config_timeout_us) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(mm_config_timeout_us)
            )
        );
    }
    test_field_mm_config_timeout_us();
    fn test_field_range_config_timeout_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range_config_timeout_us) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(range_config_timeout_us)
            )
        );
    }
    test_field_range_config_timeout_us();
    fn test_field_inter_measurement_period_ms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inter_measurement_period_ms) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(inter_measurement_period_ms)
            )
        );
    }
    test_field_inter_measurement_period_ms();
    fn test_field_dss_config__target_total_rate_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dss_config__target_total_rate_mcps) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(dss_config__target_total_rate_mcps)
            )
        );
    }
    test_field_dss_config__target_total_rate_mcps();
    fn test_field_VL53LX_p_006() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_additional_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_006) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_additional_data_t),
                "::",
                stringify!(VL53LX_p_006)
            )
        );
    }
    test_field_VL53LX_p_006();
}
#[doc = " @brief Defines the parameters of the Get Version Functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_Version_t {
    #[doc = "< revision number"]
    revision: u32,
    #[doc = "< major number"]
    major: u8,
    #[doc = "< minor number"]
    minor: u8,
    #[doc = "< build number"]
    build: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_Version_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_Version_t>(),
        8usize,
        concat!("Size of: ", stringify!(VL53LX_Version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_Version_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_Version_t))
    );
    fn test_field_revision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).revision) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Version_t),
                "::",
                stringify!(revision)
            )
        );
    }
    test_field_revision();
    fn test_field_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Version_t),
                "::",
                stringify!(major)
            )
        );
    }
    test_field_major();
    fn test_field_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Version_t),
                "::",
                stringify!(minor)
            )
        );
    }
    test_field_minor();
    fn test_field_build() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Version_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).build) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Version_t),
                "::",
                stringify!(build)
            )
        );
    }
    test_field_build();
}
#[doc = " @brief Defines the parameters of the Get Device Info Functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_DeviceInfo_t {
    ProductType: u8,
    ProductRevisionMajor: u8,
    ProductRevisionMinor: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_DeviceInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_DeviceInfo_t>(),
        3usize,
        concat!("Size of: ", stringify!(VL53LX_DeviceInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_DeviceInfo_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_DeviceInfo_t))
    );
    fn test_field_ProductType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DeviceInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ProductType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DeviceInfo_t),
                "::",
                stringify!(ProductType)
            )
        );
    }
    test_field_ProductType();
    fn test_field_ProductRevisionMajor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DeviceInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ProductRevisionMajor) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DeviceInfo_t),
                "::",
                stringify!(ProductRevisionMajor)
            )
        );
    }
    test_field_ProductRevisionMajor();
    fn test_field_ProductRevisionMinor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DeviceInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ProductRevisionMinor) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DeviceInfo_t),
                "::",
                stringify!(ProductRevisionMinor)
            )
        );
    }
    test_field_ProductRevisionMinor();
}
#[doc = " @defgroup VL53LX_define_DistanceModes_group Defines Distance modes"]
#[doc = "  Defines all possible Distance modes for the device"]
#[doc = "  @{"]
type VL53LX_DistanceModes = u8;
#[doc = " @defgroup VL53LX_define_OffsetCorrectionModes_group Defines Offset Correction modes"]
#[doc = "  Device Offset Correction Mode"]
#[doc = ""]
#[doc = "  @brief Defines all possible offset correction modes for the device"]
#[doc = "  @{"]
type VL53LX_OffsetCorrectionModes = u8;
#[doc = " @brief Defines all parameters for the device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_DeviceParameters_t {
    DistanceMode: VL53LX_DistanceModes,
    MeasurementTimingBudgetMicroSeconds: u32,
}
#[test]
fn bindgen_test_layout_VL53LX_DeviceParameters_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_DeviceParameters_t>(),
        8usize,
        concat!("Size of: ", stringify!(VL53LX_DeviceParameters_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_DeviceParameters_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_DeviceParameters_t))
    );
    fn test_field_DistanceMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DeviceParameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DistanceMode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DeviceParameters_t),
                "::",
                stringify!(DistanceMode)
            )
        );
    }
    test_field_DistanceMode();
    fn test_field_MeasurementTimingBudgetMicroSeconds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DeviceParameters_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MeasurementTimingBudgetMicroSeconds) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DeviceParameters_t),
                "::",
                stringify!(MeasurementTimingBudgetMicroSeconds)
            )
        );
    }
    test_field_MeasurementTimingBudgetMicroSeconds();
}
#[doc = " @defgroup VL53LX_define_Smudge_Mode_group Defines smudge correction modes"]
#[doc = "  Defines the smudge correction modes"]
#[doc = "  @{"]
type VL53LX_SmudgeCorrectionModes = u8;
#[doc = " @struct VL53LX_TargetRangeData_t"]
#[doc = " @brief One Range measurement data for each target."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_TargetRangeData_t {
    RangeMaxMilliMeter: i16,
    RangeMinMilliMeter: i16,
    SignalRateRtnMegaCps: FixPoint1616_t,
    AmbientRateRtnMegaCps: FixPoint1616_t,
    SigmaMilliMeter: FixPoint1616_t,
    RangeMilliMeter: i16,
    RangeStatus: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_TargetRangeData_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_TargetRangeData_t>(),
        20usize,
        concat!("Size of: ", stringify!(VL53LX_TargetRangeData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_TargetRangeData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_TargetRangeData_t))
    );
    fn test_field_RangeMaxMilliMeter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RangeMaxMilliMeter) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(RangeMaxMilliMeter)
            )
        );
    }
    test_field_RangeMaxMilliMeter();
    fn test_field_RangeMinMilliMeter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RangeMinMilliMeter) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(RangeMinMilliMeter)
            )
        );
    }
    test_field_RangeMinMilliMeter();
    fn test_field_SignalRateRtnMegaCps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SignalRateRtnMegaCps) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(SignalRateRtnMegaCps)
            )
        );
    }
    test_field_SignalRateRtnMegaCps();
    fn test_field_AmbientRateRtnMegaCps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AmbientRateRtnMegaCps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(AmbientRateRtnMegaCps)
            )
        );
    }
    test_field_AmbientRateRtnMegaCps();
    fn test_field_SigmaMilliMeter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SigmaMilliMeter) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(SigmaMilliMeter)
            )
        );
    }
    test_field_SigmaMilliMeter();
    fn test_field_RangeMilliMeter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RangeMilliMeter) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(RangeMilliMeter)
            )
        );
    }
    test_field_RangeMilliMeter();
    fn test_field_RangeStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_TargetRangeData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RangeStatus) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_TargetRangeData_t),
                "::",
                stringify!(RangeStatus)
            )
        );
    }
    test_field_RangeStatus();
}
#[doc = " @struct  VL53LX_MultiRangingData_t"]
#[doc = " @brief   Structure for storing the set of range results"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_MultiRangingData_t {
    TimeStamp: u32,
    StreamCount: u8,
    NumberOfObjectsFound: u8,
    RangeData: [VL53LX_TargetRangeData_t; 4usize],
    HasXtalkValueChanged: u8,
    EffectiveSpadRtnCount: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_MultiRangingData_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_MultiRangingData_t>(),
        92usize,
        concat!("Size of: ", stringify!(VL53LX_MultiRangingData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_MultiRangingData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_MultiRangingData_t))
    );
    fn test_field_TimeStamp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_MultiRangingData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TimeStamp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_MultiRangingData_t),
                "::",
                stringify!(TimeStamp)
            )
        );
    }
    test_field_TimeStamp();
    fn test_field_StreamCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_MultiRangingData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StreamCount) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_MultiRangingData_t),
                "::",
                stringify!(StreamCount)
            )
        );
    }
    test_field_StreamCount();
    fn test_field_NumberOfObjectsFound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_MultiRangingData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NumberOfObjectsFound) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_MultiRangingData_t),
                "::",
                stringify!(NumberOfObjectsFound)
            )
        );
    }
    test_field_NumberOfObjectsFound();
    fn test_field_RangeData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_MultiRangingData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RangeData) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_MultiRangingData_t),
                "::",
                stringify!(RangeData)
            )
        );
    }
    test_field_RangeData();
    fn test_field_HasXtalkValueChanged() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_MultiRangingData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasXtalkValueChanged) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_MultiRangingData_t),
                "::",
                stringify!(HasXtalkValueChanged)
            )
        );
    }
    test_field_HasXtalkValueChanged();
    fn test_field_EffectiveSpadRtnCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_MultiRangingData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EffectiveSpadRtnCount) as usize - ptr as usize
            },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_MultiRangingData_t),
                "::",
                stringify!(EffectiveSpadRtnCount)
            )
        );
    }
    test_field_EffectiveSpadRtnCount();
}
#[doc = " @struct VL53LX_CustomerNvmManaged_t"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_CustomerNvmManaged_t {
    global_config__spad_enables_ref_0: u8,
    global_config__spad_enables_ref_1: u8,
    global_config__spad_enables_ref_2: u8,
    global_config__spad_enables_ref_3: u8,
    global_config__spad_enables_ref_4: u8,
    global_config__spad_enables_ref_5: u8,
    global_config__ref_en_start_select: u8,
    ref_spad_man__num_requested_ref_spads: u8,
    ref_spad_man__ref_location: u8,
    algo__crosstalk_compensation_plane_offset_kcps: u32,
    algo__crosstalk_compensation_x_plane_gradient_kcps: i16,
    algo__crosstalk_compensation_y_plane_gradient_kcps: i16,
    ref_spad_char__total_rate_target_mcps: u16,
    algo__part_to_part_range_offset_mm: i16,
    mm_config__inner_offset_mm: i16,
    mm_config__outer_offset_mm: i16,
}
#[test]
fn bindgen_test_layout_VL53LX_CustomerNvmManaged_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_CustomerNvmManaged_t>(),
        28usize,
        concat!("Size of: ", stringify!(VL53LX_CustomerNvmManaged_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_CustomerNvmManaged_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_CustomerNvmManaged_t))
    );
    fn test_field_global_config__spad_enables_ref_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_0) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__spad_enables_ref_0)
            )
        );
    }
    test_field_global_config__spad_enables_ref_0();
    fn test_field_global_config__spad_enables_ref_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_1) as usize
                    - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__spad_enables_ref_1)
            )
        );
    }
    test_field_global_config__spad_enables_ref_1();
    fn test_field_global_config__spad_enables_ref_2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_2) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__spad_enables_ref_2)
            )
        );
    }
    test_field_global_config__spad_enables_ref_2();
    fn test_field_global_config__spad_enables_ref_3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_3) as usize
                    - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__spad_enables_ref_3)
            )
        );
    }
    test_field_global_config__spad_enables_ref_3();
    fn test_field_global_config__spad_enables_ref_4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_4) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__spad_enables_ref_4)
            )
        );
    }
    test_field_global_config__spad_enables_ref_4();
    fn test_field_global_config__spad_enables_ref_5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__spad_enables_ref_5) as usize
                    - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__spad_enables_ref_5)
            )
        );
    }
    test_field_global_config__spad_enables_ref_5();
    fn test_field_global_config__ref_en_start_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global_config__ref_en_start_select) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(global_config__ref_en_start_select)
            )
        );
    }
    test_field_global_config__ref_en_start_select();
    fn test_field_ref_spad_man__num_requested_ref_spads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_man__num_requested_ref_spads) as usize
                    - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(ref_spad_man__num_requested_ref_spads)
            )
        );
    }
    test_field_ref_spad_man__num_requested_ref_spads();
    fn test_field_ref_spad_man__ref_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_man__ref_location) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(ref_spad_man__ref_location)
            )
        );
    }
    test_field_ref_spad_man__ref_location();
    fn test_field_algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_plane_offset_kcps) as usize
                    - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_x_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__crosstalk_compensation_y_plane_gradient_kcps)
                    as usize
                    - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_ref_spad_char__total_rate_target_mcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_char__total_rate_target_mcps) as usize
                    - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(ref_spad_char__total_rate_target_mcps)
            )
        );
    }
    test_field_ref_spad_char__total_rate_target_mcps();
    fn test_field_algo__part_to_part_range_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__part_to_part_range_offset_mm) as usize
                    - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(algo__part_to_part_range_offset_mm)
            )
        );
    }
    test_field_algo__part_to_part_range_offset_mm();
    fn test_field_mm_config__inner_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__inner_offset_mm) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(mm_config__inner_offset_mm)
            )
        );
    }
    test_field_mm_config__inner_offset_mm();
    fn test_field_mm_config__outer_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CustomerNvmManaged_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mm_config__outer_offset_mm) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CustomerNvmManaged_t),
                "::",
                stringify!(mm_config__outer_offset_mm)
            )
        );
    }
    test_field_mm_config__outer_offset_mm();
}
#[doc = " @struct  VL53LX_CalibrationData_t"]
#[doc = " @brief   Structure for storing the Calibration Data"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_CalibrationData_t {
    struct_version: u32,
    customer: VL53LX_CustomerNvmManaged_t,
    add_off_cal_data: VL53LX_additional_offset_cal_data_t,
    optical_centre: VL53LX_optical_centre_t,
    xtalkhisto: VL53LX_xtalk_histogram_data_t,
    gain_cal: VL53LX_gain_calibration_data_t,
    cal_peak_rate_map: VL53LX_cal_peak_rate_map_t,
    per_vcsel_cal_data: VL53LX_per_vcsel_period_offset_cal_data_t,
    algo__xtalk_cpo_HistoMerge_kcps: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_VL53LX_CalibrationData_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_CalibrationData_t>(),
        388usize,
        concat!("Size of: ", stringify!(VL53LX_CalibrationData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_CalibrationData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_CalibrationData_t))
    );
    fn test_field_struct_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).struct_version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(struct_version)
            )
        );
    }
    test_field_struct_version();
    fn test_field_customer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).customer) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(customer)
            )
        );
    }
    test_field_customer();
    fn test_field_add_off_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).add_off_cal_data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(add_off_cal_data)
            )
        );
    }
    test_field_add_off_cal_data();
    fn test_field_optical_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).optical_centre) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(optical_centre)
            )
        );
    }
    test_field_optical_centre();
    fn test_field_xtalkhisto() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xtalkhisto) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(xtalkhisto)
            )
        );
    }
    test_field_xtalkhisto();
    fn test_field_gain_cal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gain_cal) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(gain_cal)
            )
        );
    }
    test_field_gain_cal();
    fn test_field_cal_peak_rate_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cal_peak_rate_map) as usize - ptr as usize
            },
            292usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(cal_peak_rate_map)
            )
        );
    }
    test_field_cal_peak_rate_map();
    fn test_field_per_vcsel_cal_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).per_vcsel_cal_data) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(per_vcsel_cal_data)
            )
        );
    }
    test_field_per_vcsel_cal_data();
    fn test_field_algo__xtalk_cpo_HistoMerge_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_CalibrationData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).algo__xtalk_cpo_HistoMerge_kcps) as usize - ptr as usize
            },
            364usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_CalibrationData_t),
                "::",
                stringify!(algo__xtalk_cpo_HistoMerge_kcps)
            )
        );
    }
    test_field_algo__xtalk_cpo_HistoMerge_kcps();
}
#[doc = " @struct  VL53LX_AdditionalData_t"]
#[doc = " @brief   Structure for storing the Additional Data"]
#[doc = ""]
type VL53LX_AdditionalData_t = VL53LX_additional_data_t;
#[doc = " @brief  Contains the Internal data of the Bare Driver"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_DevData_t {
    LLData: VL53LX_LLDriverData_t,
    llresults: VL53LX_LLDriverResults_t,
    CurrentParameters: VL53LX_DeviceParameters_t,
}
#[test]
fn bindgen_test_layout_VL53LX_DevData_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_DevData_t>(),
        10720usize,
        concat!("Size of: ", stringify!(VL53LX_DevData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_DevData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VL53LX_DevData_t))
    );
    fn test_field_LLData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DevData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LLData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DevData_t),
                "::",
                stringify!(LLData)
            )
        );
    }
    test_field_LLData();
    fn test_field_llresults() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DevData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).llresults) as usize - ptr as usize
            },
            8312usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DevData_t),
                "::",
                stringify!(llresults)
            )
        );
    }
    test_field_llresults();
    fn test_field_CurrentParameters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_DevData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentParameters) as usize - ptr as usize
            },
            10712usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_DevData_t),
                "::",
                stringify!(CurrentParameters)
            )
        );
    }
    test_field_CurrentParameters();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_xtalk_algo_data_t {
    VL53LX_p_061: [u32; 4usize],
    VL53LX_p_059: i16,
    VL53LX_p_060: i16,
    VL53LX_p_056: VL53LX_histogram_bin_data_t,
    VL53LX_p_057: VL53LX_histogram_bin_data_t,
    VL53LX_p_058: u32,
    VL53LX_p_062: [u32; 12usize],
}
#[test]
fn bindgen_test_layout_VL53LX_xtalk_algo_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_xtalk_algo_data_t>(),
        416usize,
        concat!("Size of: ", stringify!(VL53LX_xtalk_algo_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_xtalk_algo_data_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VL53LX_xtalk_algo_data_t))
    );
    fn test_field_VL53LX_p_061() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_061) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_061)
            )
        );
    }
    test_field_VL53LX_p_061();
    fn test_field_VL53LX_p_059() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_059) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_059)
            )
        );
    }
    test_field_VL53LX_p_059();
    fn test_field_VL53LX_p_060() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_060) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_060)
            )
        );
    }
    test_field_VL53LX_p_060();
    fn test_field_VL53LX_p_056() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_056) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_056)
            )
        );
    }
    test_field_VL53LX_p_056();
    fn test_field_VL53LX_p_057() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_057) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_057)
            )
        );
    }
    test_field_VL53LX_p_057();
    fn test_field_VL53LX_p_058() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_058) as usize - ptr as usize
            },
            364usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_058)
            )
        );
    }
    test_field_VL53LX_p_058();
    fn test_field_VL53LX_p_062() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_xtalk_algo_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VL53LX_p_062) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_xtalk_algo_data_t),
                "::",
                stringify!(VL53LX_p_062)
            )
        );
    }
    test_field_VL53LX_p_062();
}
type byte = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct TwoWire {
    _address: u8,
}
#[test]
fn bindgen_test_layout_TwoWire() {
    assert_eq!(
        ::std::mem::size_of::<TwoWire>(),
        1usize,
        concat!("Size of: ", stringify!(TwoWire))
    );
    assert_eq!(
        ::std::mem::align_of::<TwoWire>(),
        1usize,
        concat!("Alignment of ", stringify!(TwoWire))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_Dev_t {
    Data: VL53LX_DevData_t,
    i2c_slave_address: u8,
    comms_type: u8,
    comms_speed_khz: u16,
    I2cHandle: *mut TwoWire,
    I2cDevAddr: u8,
    Present: ::std::os::raw::c_int,
    Enabled: ::std::os::raw::c_int,
    LoopState: ::std::os::raw::c_int,
    FirstStreamCountZero: ::std::os::raw::c_int,
    Idle: ::std::os::raw::c_int,
    Ready: ::std::os::raw::c_int,
    RangeStatus: u8,
    SignalRateRtnMegaCps: FixPoint1616_t,
    #[doc = "< Device State"]
    device_state: VL53LX_DeviceState,
}
#[test]
fn bindgen_test_layout_VL53LX_Dev_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_Dev_t>(),
        10776usize,
        concat!("Size of: ", stringify!(VL53LX_Dev_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_Dev_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VL53LX_Dev_t))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
    fn test_field_i2c_slave_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i2c_slave_address) as usize - ptr as usize
            },
            10720usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(i2c_slave_address)
            )
        );
    }
    test_field_i2c_slave_address();
    fn test_field_comms_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).comms_type) as usize - ptr as usize
            },
            10721usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(comms_type)
            )
        );
    }
    test_field_comms_type();
    fn test_field_comms_speed_khz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).comms_speed_khz) as usize - ptr as usize
            },
            10722usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(comms_speed_khz)
            )
        );
    }
    test_field_comms_speed_khz();
    fn test_field_I2cHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).I2cHandle) as usize - ptr as usize
            },
            10728usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(I2cHandle)
            )
        );
    }
    test_field_I2cHandle();
    fn test_field_I2cDevAddr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).I2cDevAddr) as usize - ptr as usize
            },
            10736usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(I2cDevAddr)
            )
        );
    }
    test_field_I2cDevAddr();
    fn test_field_Present() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Present) as usize - ptr as usize
            },
            10740usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(Present)
            )
        );
    }
    test_field_Present();
    fn test_field_Enabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Enabled) as usize - ptr as usize
            },
            10744usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(Enabled)
            )
        );
    }
    test_field_Enabled();
    fn test_field_LoopState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LoopState) as usize - ptr as usize
            },
            10748usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(LoopState)
            )
        );
    }
    test_field_LoopState();
    fn test_field_FirstStreamCountZero() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FirstStreamCountZero) as usize - ptr as usize
            },
            10752usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(FirstStreamCountZero)
            )
        );
    }
    test_field_FirstStreamCountZero();
    fn test_field_Idle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Idle) as usize - ptr as usize
            },
            10756usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(Idle)
            )
        );
    }
    test_field_Idle();
    fn test_field_Ready() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ready) as usize - ptr as usize
            },
            10760usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(Ready)
            )
        );
    }
    test_field_Ready();
    fn test_field_RangeStatus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RangeStatus) as usize - ptr as usize
            },
            10764usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(RangeStatus)
            )
        );
    }
    test_field_RangeStatus();
    fn test_field_SignalRateRtnMegaCps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SignalRateRtnMegaCps) as usize - ptr as usize
            },
            10768usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(SignalRateRtnMegaCps)
            )
        );
    }
    test_field_SignalRateRtnMegaCps();
    fn test_field_device_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_Dev_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).device_state) as usize - ptr as usize
            },
            10772usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_Dev_t),
                "::",
                stringify!(device_state)
            )
        );
    }
    test_field_device_state();
}
type VL53LX_DEV = *mut VL53LX_Dev_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_decoded_nvm_fmt_range_data_t {
    result__actual_effective_rtn_spads: u16,
    ref_spad_array__num_requested_ref_spads: u8,
    ref_spad_array__ref_location: u8,
    result__peak_signal_count_rate_rtn_mcps: u16,
    result__ambient_count_rate_rtn_mcps: u16,
    result__peak_signal_count_rate_ref_mcps: u16,
    result__ambient_count_rate_ref_mcps: u16,
    measured_distance_mm: u16,
    measured_distance_stdev_mm: u16,
}
#[test]
fn bindgen_test_layout_VL53LX_decoded_nvm_fmt_range_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_decoded_nvm_fmt_range_data_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_decoded_nvm_fmt_range_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_decoded_nvm_fmt_range_data_t>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(VL53LX_decoded_nvm_fmt_range_data_t)
        )
    );
    fn test_field_result__actual_effective_rtn_spads() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__actual_effective_rtn_spads) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(result__actual_effective_rtn_spads)
            )
        );
    }
    test_field_result__actual_effective_rtn_spads();
    fn test_field_ref_spad_array__num_requested_ref_spads() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_array__num_requested_ref_spads) as usize
                    - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(ref_spad_array__num_requested_ref_spads)
            )
        );
    }
    test_field_ref_spad_array__num_requested_ref_spads();
    fn test_field_ref_spad_array__ref_location() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ref_spad_array__ref_location) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(ref_spad_array__ref_location)
            )
        );
    }
    test_field_ref_spad_array__ref_location();
    fn test_field_result__peak_signal_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__peak_signal_count_rate_rtn_mcps) as usize
                    - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(result__peak_signal_count_rate_rtn_mcps)
            )
        );
    }
    test_field_result__peak_signal_count_rate_rtn_mcps();
    fn test_field_result__ambient_count_rate_rtn_mcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__ambient_count_rate_rtn_mcps) as usize
                    - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(result__ambient_count_rate_rtn_mcps)
            )
        );
    }
    test_field_result__ambient_count_rate_rtn_mcps();
    fn test_field_result__peak_signal_count_rate_ref_mcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__peak_signal_count_rate_ref_mcps) as usize
                    - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(result__peak_signal_count_rate_ref_mcps)
            )
        );
    }
    test_field_result__peak_signal_count_rate_ref_mcps();
    fn test_field_result__ambient_count_rate_ref_mcps() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).result__ambient_count_rate_ref_mcps) as usize
                    - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(result__ambient_count_rate_ref_mcps)
            )
        );
    }
    test_field_result__ambient_count_rate_ref_mcps();
    fn test_field_measured_distance_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).measured_distance_mm) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(measured_distance_mm)
            )
        );
    }
    test_field_measured_distance_mm();
    fn test_field_measured_distance_stdev_mm() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_range_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).measured_distance_stdev_mm) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_range_data_t),
                "::",
                stringify!(measured_distance_stdev_mm)
            )
        );
    }
    test_field_measured_distance_stdev_mm();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_decoded_nvm_fmt_info_t {
    nvm__fmt__fgc: [::std::os::raw::c_char; 19usize],
    nvm__fmt__test_program_major: u8,
    nvm__fmt__test_program_minor: u8,
    nvm__fmt__map_major: u8,
    nvm__fmt__map_minor: u8,
    nvm__fmt__year: u8,
    nvm__fmt__month: u8,
    nvm__fmt__day: u8,
    nvm__fmt__module_date_phase: u8,
    nvm__fmt__time: u16,
    nvm__fmt__tester_id: u8,
    nvm__fmt__site_id: u8,
    nvm__ews__test_program_major: u8,
    nvm__ews__test_program_minor: u8,
    nvm__ews__probe_card_major: u8,
    nvm__ews__probe_card_minor: u8,
    nvm__ews__tester_id: u8,
    nvm__ews__lot: [::std::os::raw::c_char; 8usize],
    nvm__ews__wafer: u8,
    nvm__ews__xcoord: u8,
    nvm__ews__ycoord: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_decoded_nvm_fmt_info_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_decoded_nvm_fmt_info_t>(),
        48usize,
        concat!("Size of: ", stringify!(VL53LX_decoded_nvm_fmt_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_decoded_nvm_fmt_info_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_decoded_nvm_fmt_info_t))
    );
    fn test_field_nvm__fmt__fgc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__fgc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__fgc)
            )
        );
    }
    test_field_nvm__fmt__fgc();
    fn test_field_nvm__fmt__test_program_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__test_program_major) as usize - ptr as usize
            },
            19usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__test_program_major)
            )
        );
    }
    test_field_nvm__fmt__test_program_major();
    fn test_field_nvm__fmt__test_program_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__test_program_minor) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__test_program_minor)
            )
        );
    }
    test_field_nvm__fmt__test_program_minor();
    fn test_field_nvm__fmt__map_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__map_major) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__map_major)
            )
        );
    }
    test_field_nvm__fmt__map_major();
    fn test_field_nvm__fmt__map_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__map_minor) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__map_minor)
            )
        );
    }
    test_field_nvm__fmt__map_minor();
    fn test_field_nvm__fmt__year() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__year) as usize - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__year)
            )
        );
    }
    test_field_nvm__fmt__year();
    fn test_field_nvm__fmt__month() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__month) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__month)
            )
        );
    }
    test_field_nvm__fmt__month();
    fn test_field_nvm__fmt__day() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__day) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__day)
            )
        );
    }
    test_field_nvm__fmt__day();
    fn test_field_nvm__fmt__module_date_phase() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__module_date_phase) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__module_date_phase)
            )
        );
    }
    test_field_nvm__fmt__module_date_phase();
    fn test_field_nvm__fmt__time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__time) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__time)
            )
        );
    }
    test_field_nvm__fmt__time();
    fn test_field_nvm__fmt__tester_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__tester_id) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__tester_id)
            )
        );
    }
    test_field_nvm__fmt__tester_id();
    fn test_field_nvm__fmt__site_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__site_id) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__fmt__site_id)
            )
        );
    }
    test_field_nvm__fmt__site_id();
    fn test_field_nvm__ews__test_program_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__test_program_major) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__test_program_major)
            )
        );
    }
    test_field_nvm__ews__test_program_major();
    fn test_field_nvm__ews__test_program_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__test_program_minor) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__test_program_minor)
            )
        );
    }
    test_field_nvm__ews__test_program_minor();
    fn test_field_nvm__ews__probe_card_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__probe_card_major) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__probe_card_major)
            )
        );
    }
    test_field_nvm__ews__probe_card_major();
    fn test_field_nvm__ews__probe_card_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__probe_card_minor) as usize - ptr as usize
            },
            35usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__probe_card_minor)
            )
        );
    }
    test_field_nvm__ews__probe_card_minor();
    fn test_field_nvm__ews__tester_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__tester_id) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__tester_id)
            )
        );
    }
    test_field_nvm__ews__tester_id();
    fn test_field_nvm__ews__lot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__lot) as usize - ptr as usize
            },
            37usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__lot)
            )
        );
    }
    test_field_nvm__ews__lot();
    fn test_field_nvm__ews__wafer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__wafer) as usize - ptr as usize
            },
            45usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__wafer)
            )
        );
    }
    test_field_nvm__ews__wafer();
    fn test_field_nvm__ews__xcoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__xcoord) as usize - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__xcoord)
            )
        );
    }
    test_field_nvm__ews__xcoord();
    fn test_field_nvm__ews__ycoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_fmt_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__ycoord) as usize - ptr as usize
            },
            47usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_fmt_info_t),
                "::",
                stringify!(nvm__ews__ycoord)
            )
        );
    }
    test_field_nvm__ews__ycoord();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_decoded_nvm_ews_info_t {
    nvm__ews__test_program_major: u8,
    nvm__ews__test_program_minor: u8,
    nvm__ews__probe_card_major: u8,
    nvm__ews__probe_card_minor: u8,
    nvm__ews__tester_id: u8,
    nvm__ews__lot: [::std::os::raw::c_char; 8usize],
    nvm__ews__wafer: u8,
    nvm__ews__xcoord: u8,
    nvm__ews__ycoord: u8,
}
#[test]
fn bindgen_test_layout_VL53LX_decoded_nvm_ews_info_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_decoded_nvm_ews_info_t>(),
        16usize,
        concat!("Size of: ", stringify!(VL53LX_decoded_nvm_ews_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_decoded_nvm_ews_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VL53LX_decoded_nvm_ews_info_t))
    );
    fn test_field_nvm__ews__test_program_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__test_program_major) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__test_program_major)
            )
        );
    }
    test_field_nvm__ews__test_program_major();
    fn test_field_nvm__ews__test_program_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__test_program_minor) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__test_program_minor)
            )
        );
    }
    test_field_nvm__ews__test_program_minor();
    fn test_field_nvm__ews__probe_card_major() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__probe_card_major) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__probe_card_major)
            )
        );
    }
    test_field_nvm__ews__probe_card_major();
    fn test_field_nvm__ews__probe_card_minor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__probe_card_minor) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__probe_card_minor)
            )
        );
    }
    test_field_nvm__ews__probe_card_minor();
    fn test_field_nvm__ews__tester_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__tester_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__tester_id)
            )
        );
    }
    test_field_nvm__ews__tester_id();
    fn test_field_nvm__ews__lot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__lot) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__lot)
            )
        );
    }
    test_field_nvm__ews__lot();
    fn test_field_nvm__ews__wafer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__wafer) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__wafer)
            )
        );
    }
    test_field_nvm__ews__wafer();
    fn test_field_nvm__ews__xcoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__xcoord) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__xcoord)
            )
        );
    }
    test_field_nvm__ews__xcoord();
    fn test_field_nvm__ews__ycoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_ews_info_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__ycoord) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_ews_info_t),
                "::",
                stringify!(nvm__ews__ycoord)
            )
        );
    }
    test_field_nvm__ews__ycoord();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct VL53LX_decoded_nvm_data_t {
    nvm__identification_model_id: u8,
    nvm__identification_module_type: u8,
    nvm__identification_revision_id: u8,
    nvm__identification_module_id: u16,
    nvm__i2c_valid: u8,
    nvm__i2c_device_address_ews: u8,
    nvm__ews__fast_osc_frequency: u16,
    nvm__ews__fast_osc_trim_max: u8,
    nvm__ews__fast_osc_freq_set: u8,
    nvm__ews__slow_osc_calibration: u16,
    nvm__fmt__fast_osc_frequency: u16,
    nvm__fmt__fast_osc_trim_max: u8,
    nvm__fmt__fast_osc_freq_set: u8,
    nvm__fmt__slow_osc_calibration: u16,
    nvm__vhv_config_unlock: u8,
    nvm__ref_selvddpix: u8,
    nvm__ref_selvquench: u8,
    nvm__regavdd1v2_sel: u8,
    nvm__regdvdd1v2_sel: u8,
    nvm__vhv_timeout__macrop: u8,
    nvm__vhv_loop_bound: u8,
    nvm__vhv_count_threshold: u8,
    nvm__vhv_offset: u8,
    nvm__vhv_init_enable: u8,
    nvm__vhv_init_value: u8,
    nvm__laser_safety_vcsel_trim_ll: u8,
    nvm__laser_safety_vcsel_selion_ll: u8,
    nvm__laser_safety_vcsel_selion_max_ll: u8,
    nvm__laser_safety_mult_ll: u8,
    nvm__laser_safety_clip_ll: u8,
    nvm__laser_safety_vcsel_trim_ld: u8,
    nvm__laser_safety_vcsel_selion_ld: u8,
    nvm__laser_safety_vcsel_selion_max_ld: u8,
    nvm__laser_safety_mult_ld: u8,
    nvm__laser_safety_clip_ld: u8,
    nvm__laser_safety_lock_byte: u8,
    nvm__laser_safety_unlock_byte: u8,
    nvm__ews__spad_enables_rtn: [u8; 32usize],
    nvm__ews__spad_enables_ref__loc1: [u8; 6usize],
    nvm__ews__spad_enables_ref__loc2: [u8; 6usize],
    nvm__ews__spad_enables_ref__loc3: [u8; 6usize],
    nvm__fmt__spad_enables_rtn: [u8; 32usize],
    nvm__fmt__spad_enables_ref__loc1: [u8; 6usize],
    nvm__fmt__spad_enables_ref__loc2: [u8; 6usize],
    nvm__fmt__spad_enables_ref__loc3: [u8; 6usize],
    nvm__fmt__roi_config__mode_roi_centre_spad: u8,
    nvm__fmt__roi_config__mode_roi_x_size: u8,
    nvm__fmt__roi_config__mode_roi_y_size: u8,
    nvm__fmt__ref_spad_apply__num_requested_ref_spad: u8,
    nvm__fmt__ref_spad_man__ref_location: u8,
    nvm__fmt__mm_config__inner_offset_mm: u16,
    nvm__fmt__mm_config__outer_offset_mm: u16,
    nvm__fmt__algo_part_to_part_range_offset_mm: u16,
    nvm__fmt__algo__crosstalk_compensation_plane_offset_kcps: u16,
    nvm__fmt__algo__crosstalk_compensation_x_plane_gradient_kcps: u16,
    nvm__fmt__algo__crosstalk_compensation_y_plane_gradient_kcps: u16,
    nvm__fmt__spare__host_config__nvm_config_spare_0: u8,
    nvm__fmt__spare__host_config__nvm_config_spare_1: u8,
    nvm__customer_space_programmed: u8,
    nvm__cust__i2c_device_address: u8,
    nvm__cust__ref_spad_apply__num_requested_ref_spad: u8,
    nvm__cust__ref_spad_man__ref_location: u8,
    nvm__cust__mm_config__inner_offset_mm: u16,
    nvm__cust__mm_config__outer_offset_mm: u16,
    nvm__cust__algo_part_to_part_range_offset_mm: u16,
    nvm__cust__algo__crosstalk_compensation_plane_offset_kcps: u16,
    nvm__cust__algo__crosstalk_compensation_x_plane_gradient_kcps: u16,
    nvm__cust__algo__crosstalk_compensation_y_plane_gradient_kcps: u16,
    nvm__cust__spare__host_config__nvm_config_spare_0: u8,
    nvm__cust__spare__host_config__nvm_config_spare_1: u8,
    fmt_optical_centre: VL53LX_optical_centre_t,
    fmt_peak_rate_map: VL53LX_cal_peak_rate_map_t,
    fmt_add_offset_data: VL53LX_additional_offset_cal_data_t,
    fmt_range_data: [VL53LX_decoded_nvm_fmt_range_data_t; 4usize],
    fmt_info: VL53LX_decoded_nvm_fmt_info_t,
    ews_info: VL53LX_decoded_nvm_ews_info_t,
}
#[test]
fn bindgen_test_layout_VL53LX_decoded_nvm_data_t() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX_decoded_nvm_data_t>(),
        378usize,
        concat!("Size of: ", stringify!(VL53LX_decoded_nvm_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX_decoded_nvm_data_t>(),
        2usize,
        concat!("Alignment of ", stringify!(VL53LX_decoded_nvm_data_t))
    );
    fn test_field_nvm__identification_model_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__identification_model_id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__identification_model_id)
            )
        );
    }
    test_field_nvm__identification_model_id();
    fn test_field_nvm__identification_module_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__identification_module_type) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__identification_module_type)
            )
        );
    }
    test_field_nvm__identification_module_type();
    fn test_field_nvm__identification_revision_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__identification_revision_id) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__identification_revision_id)
            )
        );
    }
    test_field_nvm__identification_revision_id();
    fn test_field_nvm__identification_module_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__identification_module_id) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__identification_module_id)
            )
        );
    }
    test_field_nvm__identification_module_id();
    fn test_field_nvm__i2c_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__i2c_valid) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__i2c_valid)
            )
        );
    }
    test_field_nvm__i2c_valid();
    fn test_field_nvm__i2c_device_address_ews() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__i2c_device_address_ews) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__i2c_device_address_ews)
            )
        );
    }
    test_field_nvm__i2c_device_address_ews();
    fn test_field_nvm__ews__fast_osc_frequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__fast_osc_frequency) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__fast_osc_frequency)
            )
        );
    }
    test_field_nvm__ews__fast_osc_frequency();
    fn test_field_nvm__ews__fast_osc_trim_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__fast_osc_trim_max) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__fast_osc_trim_max)
            )
        );
    }
    test_field_nvm__ews__fast_osc_trim_max();
    fn test_field_nvm__ews__fast_osc_freq_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__fast_osc_freq_set) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__fast_osc_freq_set)
            )
        );
    }
    test_field_nvm__ews__fast_osc_freq_set();
    fn test_field_nvm__ews__slow_osc_calibration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__slow_osc_calibration) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__slow_osc_calibration)
            )
        );
    }
    test_field_nvm__ews__slow_osc_calibration();
    fn test_field_nvm__fmt__fast_osc_frequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__fast_osc_frequency) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__fast_osc_frequency)
            )
        );
    }
    test_field_nvm__fmt__fast_osc_frequency();
    fn test_field_nvm__fmt__fast_osc_trim_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__fast_osc_trim_max) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__fast_osc_trim_max)
            )
        );
    }
    test_field_nvm__fmt__fast_osc_trim_max();
    fn test_field_nvm__fmt__fast_osc_freq_set() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__fast_osc_freq_set) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__fast_osc_freq_set)
            )
        );
    }
    test_field_nvm__fmt__fast_osc_freq_set();
    fn test_field_nvm__fmt__slow_osc_calibration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__slow_osc_calibration) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__slow_osc_calibration)
            )
        );
    }
    test_field_nvm__fmt__slow_osc_calibration();
    fn test_field_nvm__vhv_config_unlock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_config_unlock) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_config_unlock)
            )
        );
    }
    test_field_nvm__vhv_config_unlock();
    fn test_field_nvm__ref_selvddpix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ref_selvddpix) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ref_selvddpix)
            )
        );
    }
    test_field_nvm__ref_selvddpix();
    fn test_field_nvm__ref_selvquench() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ref_selvquench) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ref_selvquench)
            )
        );
    }
    test_field_nvm__ref_selvquench();
    fn test_field_nvm__regavdd1v2_sel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__regavdd1v2_sel) as usize - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__regavdd1v2_sel)
            )
        );
    }
    test_field_nvm__regavdd1v2_sel();
    fn test_field_nvm__regdvdd1v2_sel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__regdvdd1v2_sel) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__regdvdd1v2_sel)
            )
        );
    }
    test_field_nvm__regdvdd1v2_sel();
    fn test_field_nvm__vhv_timeout__macrop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_timeout__macrop) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_timeout__macrop)
            )
        );
    }
    test_field_nvm__vhv_timeout__macrop();
    fn test_field_nvm__vhv_loop_bound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_loop_bound) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_loop_bound)
            )
        );
    }
    test_field_nvm__vhv_loop_bound();
    fn test_field_nvm__vhv_count_threshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_count_threshold) as usize - ptr as usize
            },
            27usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_count_threshold)
            )
        );
    }
    test_field_nvm__vhv_count_threshold();
    fn test_field_nvm__vhv_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_offset) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_offset)
            )
        );
    }
    test_field_nvm__vhv_offset();
    fn test_field_nvm__vhv_init_enable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_init_enable) as usize - ptr as usize
            },
            29usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_init_enable)
            )
        );
    }
    test_field_nvm__vhv_init_enable();
    fn test_field_nvm__vhv_init_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__vhv_init_value) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__vhv_init_value)
            )
        );
    }
    test_field_nvm__vhv_init_value();
    fn test_field_nvm__laser_safety_vcsel_trim_ll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_vcsel_trim_ll) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_vcsel_trim_ll)
            )
        );
    }
    test_field_nvm__laser_safety_vcsel_trim_ll();
    fn test_field_nvm__laser_safety_vcsel_selion_ll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_vcsel_selion_ll) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_vcsel_selion_ll)
            )
        );
    }
    test_field_nvm__laser_safety_vcsel_selion_ll();
    fn test_field_nvm__laser_safety_vcsel_selion_max_ll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_vcsel_selion_max_ll) as usize
                    - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_vcsel_selion_max_ll)
            )
        );
    }
    test_field_nvm__laser_safety_vcsel_selion_max_ll();
    fn test_field_nvm__laser_safety_mult_ll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_mult_ll) as usize - ptr as usize
            },
            34usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_mult_ll)
            )
        );
    }
    test_field_nvm__laser_safety_mult_ll();
    fn test_field_nvm__laser_safety_clip_ll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_clip_ll) as usize - ptr as usize
            },
            35usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_clip_ll)
            )
        );
    }
    test_field_nvm__laser_safety_clip_ll();
    fn test_field_nvm__laser_safety_vcsel_trim_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_vcsel_trim_ld) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_vcsel_trim_ld)
            )
        );
    }
    test_field_nvm__laser_safety_vcsel_trim_ld();
    fn test_field_nvm__laser_safety_vcsel_selion_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_vcsel_selion_ld) as usize
                    - ptr as usize
            },
            37usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_vcsel_selion_ld)
            )
        );
    }
    test_field_nvm__laser_safety_vcsel_selion_ld();
    fn test_field_nvm__laser_safety_vcsel_selion_max_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_vcsel_selion_max_ld) as usize
                    - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_vcsel_selion_max_ld)
            )
        );
    }
    test_field_nvm__laser_safety_vcsel_selion_max_ld();
    fn test_field_nvm__laser_safety_mult_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_mult_ld) as usize - ptr as usize
            },
            39usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_mult_ld)
            )
        );
    }
    test_field_nvm__laser_safety_mult_ld();
    fn test_field_nvm__laser_safety_clip_ld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_clip_ld) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_clip_ld)
            )
        );
    }
    test_field_nvm__laser_safety_clip_ld();
    fn test_field_nvm__laser_safety_lock_byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_lock_byte) as usize - ptr as usize
            },
            41usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_lock_byte)
            )
        );
    }
    test_field_nvm__laser_safety_lock_byte();
    fn test_field_nvm__laser_safety_unlock_byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__laser_safety_unlock_byte) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__laser_safety_unlock_byte)
            )
        );
    }
    test_field_nvm__laser_safety_unlock_byte();
    fn test_field_nvm__ews__spad_enables_rtn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__spad_enables_rtn) as usize - ptr as usize
            },
            43usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__spad_enables_rtn)
            )
        );
    }
    test_field_nvm__ews__spad_enables_rtn();
    fn test_field_nvm__ews__spad_enables_ref__loc1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__spad_enables_ref__loc1) as usize
                    - ptr as usize
            },
            75usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__spad_enables_ref__loc1)
            )
        );
    }
    test_field_nvm__ews__spad_enables_ref__loc1();
    fn test_field_nvm__ews__spad_enables_ref__loc2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__spad_enables_ref__loc2) as usize
                    - ptr as usize
            },
            81usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__spad_enables_ref__loc2)
            )
        );
    }
    test_field_nvm__ews__spad_enables_ref__loc2();
    fn test_field_nvm__ews__spad_enables_ref__loc3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__ews__spad_enables_ref__loc3) as usize
                    - ptr as usize
            },
            87usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__ews__spad_enables_ref__loc3)
            )
        );
    }
    test_field_nvm__ews__spad_enables_ref__loc3();
    fn test_field_nvm__fmt__spad_enables_rtn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__spad_enables_rtn) as usize - ptr as usize
            },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__spad_enables_rtn)
            )
        );
    }
    test_field_nvm__fmt__spad_enables_rtn();
    fn test_field_nvm__fmt__spad_enables_ref__loc1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__spad_enables_ref__loc1) as usize
                    - ptr as usize
            },
            125usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__spad_enables_ref__loc1)
            )
        );
    }
    test_field_nvm__fmt__spad_enables_ref__loc1();
    fn test_field_nvm__fmt__spad_enables_ref__loc2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__spad_enables_ref__loc2) as usize
                    - ptr as usize
            },
            131usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__spad_enables_ref__loc2)
            )
        );
    }
    test_field_nvm__fmt__spad_enables_ref__loc2();
    fn test_field_nvm__fmt__spad_enables_ref__loc3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__spad_enables_ref__loc3) as usize
                    - ptr as usize
            },
            137usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__spad_enables_ref__loc3)
            )
        );
    }
    test_field_nvm__fmt__spad_enables_ref__loc3();
    fn test_field_nvm__fmt__roi_config__mode_roi_centre_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__roi_config__mode_roi_centre_spad) as usize
                    - ptr as usize
            },
            143usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__roi_config__mode_roi_centre_spad)
            )
        );
    }
    test_field_nvm__fmt__roi_config__mode_roi_centre_spad();
    fn test_field_nvm__fmt__roi_config__mode_roi_x_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__roi_config__mode_roi_x_size) as usize
                    - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__roi_config__mode_roi_x_size)
            )
        );
    }
    test_field_nvm__fmt__roi_config__mode_roi_x_size();
    fn test_field_nvm__fmt__roi_config__mode_roi_y_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__roi_config__mode_roi_y_size) as usize
                    - ptr as usize
            },
            145usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__roi_config__mode_roi_y_size)
            )
        );
    }
    test_field_nvm__fmt__roi_config__mode_roi_y_size();
    fn test_field_nvm__fmt__ref_spad_apply__num_requested_ref_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__ref_spad_apply__num_requested_ref_spad)
                    as usize
                    - ptr as usize
            },
            146usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__ref_spad_apply__num_requested_ref_spad)
            )
        );
    }
    test_field_nvm__fmt__ref_spad_apply__num_requested_ref_spad();
    fn test_field_nvm__fmt__ref_spad_man__ref_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__ref_spad_man__ref_location) as usize
                    - ptr as usize
            },
            147usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__ref_spad_man__ref_location)
            )
        );
    }
    test_field_nvm__fmt__ref_spad_man__ref_location();
    fn test_field_nvm__fmt__mm_config__inner_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__mm_config__inner_offset_mm) as usize
                    - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__mm_config__inner_offset_mm)
            )
        );
    }
    test_field_nvm__fmt__mm_config__inner_offset_mm();
    fn test_field_nvm__fmt__mm_config__outer_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__mm_config__outer_offset_mm) as usize
                    - ptr as usize
            },
            150usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__mm_config__outer_offset_mm)
            )
        );
    }
    test_field_nvm__fmt__mm_config__outer_offset_mm();
    fn test_field_nvm__fmt__algo_part_to_part_range_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__algo_part_to_part_range_offset_mm) as usize
                    - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__algo_part_to_part_range_offset_mm)
            )
        );
    }
    test_field_nvm__fmt__algo_part_to_part_range_offset_mm();
    fn test_field_nvm__fmt__algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm__fmt__algo__crosstalk_compensation_plane_offset_kcps
                ) as usize
                    - ptr as usize
            },
            154usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_nvm__fmt__algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_nvm__fmt__algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm__fmt__algo__crosstalk_compensation_x_plane_gradient_kcps
                ) as usize
                    - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_nvm__fmt__algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_nvm__fmt__algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm__fmt__algo__crosstalk_compensation_y_plane_gradient_kcps
                ) as usize
                    - ptr as usize
            },
            158usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_nvm__fmt__algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_nvm__fmt__spare__host_config__nvm_config_spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__spare__host_config__nvm_config_spare_0)
                    as usize
                    - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__spare__host_config__nvm_config_spare_0)
            )
        );
    }
    test_field_nvm__fmt__spare__host_config__nvm_config_spare_0();
    fn test_field_nvm__fmt__spare__host_config__nvm_config_spare_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__fmt__spare__host_config__nvm_config_spare_1)
                    as usize
                    - ptr as usize
            },
            161usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__fmt__spare__host_config__nvm_config_spare_1)
            )
        );
    }
    test_field_nvm__fmt__spare__host_config__nvm_config_spare_1();
    fn test_field_nvm__customer_space_programmed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__customer_space_programmed) as usize - ptr as usize
            },
            162usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__customer_space_programmed)
            )
        );
    }
    test_field_nvm__customer_space_programmed();
    fn test_field_nvm__cust__i2c_device_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__i2c_device_address) as usize - ptr as usize
            },
            163usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__i2c_device_address)
            )
        );
    }
    test_field_nvm__cust__i2c_device_address();
    fn test_field_nvm__cust__ref_spad_apply__num_requested_ref_spad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__ref_spad_apply__num_requested_ref_spad)
                    as usize
                    - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__ref_spad_apply__num_requested_ref_spad)
            )
        );
    }
    test_field_nvm__cust__ref_spad_apply__num_requested_ref_spad();
    fn test_field_nvm__cust__ref_spad_man__ref_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__ref_spad_man__ref_location) as usize
                    - ptr as usize
            },
            165usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__ref_spad_man__ref_location)
            )
        );
    }
    test_field_nvm__cust__ref_spad_man__ref_location();
    fn test_field_nvm__cust__mm_config__inner_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__mm_config__inner_offset_mm) as usize
                    - ptr as usize
            },
            166usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__mm_config__inner_offset_mm)
            )
        );
    }
    test_field_nvm__cust__mm_config__inner_offset_mm();
    fn test_field_nvm__cust__mm_config__outer_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__mm_config__outer_offset_mm) as usize
                    - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__mm_config__outer_offset_mm)
            )
        );
    }
    test_field_nvm__cust__mm_config__outer_offset_mm();
    fn test_field_nvm__cust__algo_part_to_part_range_offset_mm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__algo_part_to_part_range_offset_mm) as usize
                    - ptr as usize
            },
            170usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__algo_part_to_part_range_offset_mm)
            )
        );
    }
    test_field_nvm__cust__algo_part_to_part_range_offset_mm();
    fn test_field_nvm__cust__algo__crosstalk_compensation_plane_offset_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm__cust__algo__crosstalk_compensation_plane_offset_kcps
                ) as usize
                    - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__algo__crosstalk_compensation_plane_offset_kcps)
            )
        );
    }
    test_field_nvm__cust__algo__crosstalk_compensation_plane_offset_kcps();
    fn test_field_nvm__cust__algo__crosstalk_compensation_x_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm__cust__algo__crosstalk_compensation_x_plane_gradient_kcps
                ) as usize
                    - ptr as usize
            },
            174usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__algo__crosstalk_compensation_x_plane_gradient_kcps)
            )
        );
    }
    test_field_nvm__cust__algo__crosstalk_compensation_x_plane_gradient_kcps();
    fn test_field_nvm__cust__algo__crosstalk_compensation_y_plane_gradient_kcps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!(
                    (*ptr).nvm__cust__algo__crosstalk_compensation_y_plane_gradient_kcps
                ) as usize
                    - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__algo__crosstalk_compensation_y_plane_gradient_kcps)
            )
        );
    }
    test_field_nvm__cust__algo__crosstalk_compensation_y_plane_gradient_kcps();
    fn test_field_nvm__cust__spare__host_config__nvm_config_spare_0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__spare__host_config__nvm_config_spare_0)
                    as usize
                    - ptr as usize
            },
            178usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__spare__host_config__nvm_config_spare_0)
            )
        );
    }
    test_field_nvm__cust__spare__host_config__nvm_config_spare_0();
    fn test_field_nvm__cust__spare__host_config__nvm_config_spare_1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nvm__cust__spare__host_config__nvm_config_spare_1)
                    as usize
                    - ptr as usize
            },
            179usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(nvm__cust__spare__host_config__nvm_config_spare_1)
            )
        );
    }
    test_field_nvm__cust__spare__host_config__nvm_config_spare_1();
    fn test_field_fmt_optical_centre() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_optical_centre) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(fmt_optical_centre)
            )
        );
    }
    test_field_fmt_optical_centre();
    fn test_field_fmt_peak_rate_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_peak_rate_map) as usize - ptr as usize
            },
            182usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(fmt_peak_rate_map)
            )
        );
    }
    test_field_fmt_peak_rate_map();
    fn test_field_fmt_add_offset_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_add_offset_data) as usize - ptr as usize
            },
            242usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(fmt_add_offset_data)
            )
        );
    }
    test_field_fmt_add_offset_data();
    fn test_field_fmt_range_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_range_data) as usize - ptr as usize
            },
            250usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(fmt_range_data)
            )
        );
    }
    test_field_fmt_range_data();
    fn test_field_fmt_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fmt_info) as usize - ptr as usize
            },
            314usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(fmt_info)
            )
        );
    }
    test_field_fmt_info();
    fn test_field_ews_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX_decoded_nvm_data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ews_info) as usize - ptr as usize
            },
            362usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX_decoded_nvm_data_t),
                "::",
                stringify!(ews_info)
            )
        );
    }
    test_field_ews_info();
}
#[doc = " Class representing a VL53LX sensor component"]
#[repr(C)]
#[derive(Debug)]
struct VL53LX {
    _base: RangeSensor,
    BDTable: [i32; 11usize],
    dev_i2c: *mut TwoWire,
    gpio0: ::std::os::raw::c_int,
    MyDevice: VL53LX_Dev_t,
    Dev: VL53LX_DEV,
}
#[test]
fn bindgen_test_layout_VL53LX() {
    assert_eq!(
        ::std::mem::size_of::<VL53LX>(),
        10856usize,
        concat!("Size of: ", stringify!(VL53LX))
    );
    assert_eq!(
        ::std::mem::align_of::<VL53LX>(),
        8usize,
        concat!("Alignment of ", stringify!(VL53LX))
    );
    fn test_field_BDTable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BDTable) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX),
                "::",
                stringify!(BDTable)
            )
        );
    }
    test_field_BDTable();
    fn test_field_dev_i2c() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dev_i2c) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX),
                "::",
                stringify!(dev_i2c)
            )
        );
    }
    test_field_dev_i2c();
    fn test_field_gpio0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gpio0) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX),
                "::",
                stringify!(gpio0)
            )
        );
    }
    test_field_gpio0();
    fn test_field_MyDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MyDevice) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX),
                "::",
                stringify!(MyDevice)
            )
        );
    }
    test_field_MyDevice();
    fn test_field_Dev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VL53LX>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Dev) as usize - ptr as usize
            },
            10848usize,
            concat!(
                "Offset of field: ",
                stringify!(VL53LX),
                "::",
                stringify!(Dev)
            )
        );
    }
    test_field_Dev();
}
extern "C" {
    #[doc = " @brief Return the VL53LX driver Version"]
    #[doc = ""]
    #[doc = " @note This function doesn't access to the device"]
    #[doc = ""]
    #[doc = " @param   pVersion              Rer to current driver Version"]
    #[doc = " @return  VL53LX_Error_NONE     Success"]
    #[doc = " @return  \"Other error code\"    See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_GetVersionEP16VL53LX_Version_t"]
    fn VL53LX_VL53LX_GetVersion(
        this: *mut VL53LX,
        pVersion: *mut VL53LX_Version_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Reads the Product Revision for a for given Device"]
    #[doc = " This function can be used to distinguish cut1.0 from cut1.1."]
    #[doc = ""]
    #[doc = " @param   Dev                 Device Handle"]
    #[doc = " @param   pProductRevisionMajor  Pointer to Product Revision Major"]
    #[doc = " for a given Device"]
    #[doc = " @param   pProductRevisionMinor  Pointer to Product Revision Minor"]
    #[doc = " for a given Device"]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"    See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_GetProductRevisionEPhS0_"]
    fn VL53LX_VL53LX_GetProductRevision(
        this: *mut VL53LX,
        pProductRevisionMajor: *mut u8,
        pProductRevisionMinor: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Reads the Device information for given Device"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                 Device Handle"]
    #[doc = " @param   pVL53LX_DeviceInfo  Pointer to current device info for a given"]
    #[doc = "  Device"]
    #[doc = " @return  VL53LX_Error_NONE   Success"]
    #[doc = " @return  \"Other error code\"  See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_GetDeviceInfoEP19VL53LX_DeviceInfo_t"]
    fn VL53LX_VL53LX_GetDeviceInfo(
        this: *mut VL53LX,
        pVL53LX_DeviceInfo: *mut VL53LX_DeviceInfo_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Reads the Device unique identifier"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                 Device Handle"]
    #[doc = " @param   pUid                Pointer to current device unique ID"]
    #[doc = " @return  VL53LX_Error_NONE   Success"]
    #[doc = " @return  \"Other error code\"  See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_GetUIDEPm"]
    fn VL53LX_VL53LX_GetUID(this: *mut VL53LX, pUid: *mut u64) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Set new device address"]
    #[doc = ""]
    #[doc = " After completion the device will answer to the new address programmed."]
    #[doc = " This function should be called when several devices are used in parallel"]
    #[doc = " before start programming the sensor."]
    #[doc = " When a single device us used, there is no need to call this function."]
    #[doc = ""]
    #[doc = " When it is requested for multi devices system this function MUST be called"]
    #[doc = " prior to VL53LX_DataInit()"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                   Device Handle"]
    #[doc = " @param   DeviceAddress         The new Device address"]
    #[doc = " @return  VL53LX_Error_NONE     Success"]
    #[doc = " @return  \"Other error code\"    See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_SetDeviceAddressEh"]
    fn VL53LX_VL53LX_SetDeviceAddress(this: *mut VL53LX, DeviceAddress: u8) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief One time device initialization"]
    #[doc = ""]
    #[doc = " To be called after device has been powered on and booted"]
    #[doc = " see @a VL53LX_WaitDeviceBooted()"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " When not used after a fresh device \"power up\", it may return"]
    #[doc = " @a #VL53LX_Error_CALIBRATION_WARNING meaning wrong calibration data"]
    #[doc = " may have been fetched from device that can result in ranging offset error\\n"]
    #[doc = " If VL53LX_DataInit is called several times then the application must restore"]
    #[doc = " calibration calling @a VL53LX_SetOffsetCalibrationData()"]
    #[doc = " It implies application has gathered calibration data thanks to"]
    #[doc = " @a VL53LX_GetOffsetCalibrationData() after an initial calibration stage."]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                   Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE     Success"]
    #[doc = " @return  \"Other error code\"    See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX15VL53LX_DataInitEv"]
    fn VL53LX_VL53LX_DataInit(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Wait for device booted after chip enable (hardware standby)"]
    #[doc = ""]
    #[doc = " @param   Dev                   Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE     Success"]
    #[doc = " @return  \"Other error code\"    See ::VL53LX_Error"]
    #[doc = ""]
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_WaitDeviceBootedEv"]
    fn VL53LX_VL53LX_WaitDeviceBooted(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief  Set the distance mode"]
    #[doc = " @par Function Description"]
    #[doc = " Set the distance mode to be used for the next ranging.<br>"]
    #[doc = " The modes Short, Medium and Long are used to optimize the ranging accuracy"]
    #[doc = " in a specific range of distance.<br> The user select one of these modes to"]
    #[doc = " select the distance range."]
    #[doc = " @note This function doesn't Access to the device"]
    #[doc = ""]
    #[doc = " @warning This function should be called after @a VL53LX_DataInit()."]
    #[doc = ""]
    #[doc = " @param   Dev                   Device Handle"]
    #[doc = " @param   DistanceMode          Distance mode to apply, valid values are:"]
    #[doc = " @li VL53LX_DISTANCEMODE_SHORT"]
    #[doc = " @li VL53LX_DISTANCEMODE_MEDIUM"]
    #[doc = " @li VL53LX_DISTANCEMODE_LONG"]
    #[doc = " @return  VL53LX_Error_NONE               Success"]
    #[doc = " @return  VL53LX_Error_MODE_NOT_SUPPORTED This error occurs when DistanceMode"]
    #[doc = "                                          is not in the supported list"]
    #[doc = " @return  \"Other error code\"              See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_SetDistanceModeEh"]
    fn VL53LX_VL53LX_SetDistanceMode(
        this: *mut VL53LX,
        DistanceMode: VL53LX_DistanceModes,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief  Get the distance mode"]
    #[doc = " @par Function Description"]
    #[doc = " Get the distance mode used for the next ranging."]
    #[doc = ""]
    #[doc = " @param   Dev                   Device Handle"]
    #[doc = " @param   *pDistanceMode        Pointer to Distance mode"]
    #[doc = " @return  VL53LX_Error_NONE            Success"]
    #[doc = " @return  \"Other error code\"           See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_GetDistanceModeEPh"]
    fn VL53LX_VL53LX_GetDistanceMode(
        this: *mut VL53LX,
        pDistanceMode: *mut VL53LX_DistanceModes,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Set Ranging Timing Budget in microseconds"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " Defines the maximum time allowed by the user to the device to run a"]
    #[doc = " full ranging sequence for the current mode (ranging, histogram, ASL ...)"]
    #[doc = ""]
    #[doc = " @param   Dev                                Device Handle"]
    #[doc = " @param MeasurementTimingBudgetMicroSeconds  Max measurement time in"]
    #[doc = " microseconds."]
    #[doc = " @return  VL53LX_Error_NONE            Success"]
    #[doc = " @return  VL53LX_Error_INVALID_PARAMS  Error timing parameter not"]
    #[doc = "                                       supported."]
    #[doc = "                                       The maximum accepted value for the"]
    #[doc = "                                       computed timing budget is 10 seconds"]
    #[doc = "                                       the minimum value depends on the preset"]
    #[doc = "                                       mode selected."]
    #[doc = " @return  \"Other error code\"           See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_SetMeasurementTimingBudgetMicroSecondsEj"]
    fn VL53LX_VL53LX_SetMeasurementTimingBudgetMicroSeconds(
        this: *mut VL53LX,
        MeasurementTimingBudgetMicroSeconds: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Get Ranging Timing Budget in microseconds"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " Returns the programmed the maximum time allowed by the user to the"]
    #[doc = " device to run a full ranging sequence for the current mode"]
    #[doc = " (ranging, histogram, ...)"]
    #[doc = ""]
    #[doc = " @param   Dev                                    Device Handle"]
    #[doc = " @param   pMeasurementTimingBudgetMicroSeconds   Max measurement time in"]
    #[doc = " microseconds."]
    #[doc = " @return  VL53LX_Error_NONE            Success"]
    #[doc = " @return  \"Other error code\"           See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_GetMeasurementTimingBudgetMicroSecondsEPj"]
    fn VL53LX_VL53LX_GetMeasurementTimingBudgetMicroSeconds(
        this: *mut VL53LX,
        pMeasurementTimingBudgetMicroSeconds: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Start device measurement"]
    #[doc = ""]
    #[doc = " @details Started measurement will depend on distance parameter set through"]
    #[doc = " @a VL53LX_SetDistanceMode()"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE                  Success"]
    #[doc = " @return  VL53LX_Error_TIME_OUT    Time out on start measurement"]
    #[doc = " @return  VL53LX_Error_INVALID_PARAMS This error might occur in timed mode"]
    #[doc = " when inter measurement period is smaller or too close to the timing budget."]
    #[doc = " In such case measurements are not started and user must correct the timings"]
    #[doc = " passed to @a VL53LX_SetMeasurementTimingBudgetMicroSeconds() and"]
    #[doc = " @a VL53LX_SetInterMeasurementPeriodMilliSeconds() functions."]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_StartMeasurementEv"]
    fn VL53LX_VL53LX_StartMeasurement(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Stop device measurement"]
    #[doc = ""]
    #[doc = " @details Will set the device in standby mode at end of current measurement\\n"]
    #[doc = "          Not necessary in single mode as device shall return automatically"]
    #[doc = "          in standby mode at end of measurement."]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE    Success"]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_StopMeasurementEv"]
    fn VL53LX_VL53LX_StopMeasurement(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Clear the Interrupt flag and start new measurement"]
    #[doc = " *"]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE    Success"]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_ClearInterruptAndStartMeasurementEv"]
    fn VL53LX_VL53LX_ClearInterruptAndStartMeasurement(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Return Measurement Data Ready"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " This function indicate that a measurement data is ready."]
    #[doc = " This function is used for non-blocking capture."]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                    Device Handle"]
    #[doc = " @param   pMeasurementDataReady  Pointer to Measurement Data Ready."]
    #[doc = " 0 = data not ready, 1 = data ready"]
    #[doc = " @return  VL53LX_Error_NONE      Success"]
    #[doc = " @return  \"Other error code\"     See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_GetMeasurementDataReadyEPh"]
    fn VL53LX_VL53LX_GetMeasurementDataReady(
        this: *mut VL53LX,
        pMeasurementDataReady: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Wait for measurement data ready."]
    #[doc = " Blocking function."]
    #[doc = " Note that the timeout is given by:"]
    #[doc = " VL53LX_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev      Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  VL53LX_Error_TIME_OUT In case of timeout"]
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_WaitMeasurementDataReadyEv"]
    fn VL53LX_VL53LX_WaitMeasurementDataReady(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Retrieve all measurements from device with the current setup"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " Get data from last successful Ranging measurement"]
    #[doc = ""]
    #[doc = " @warning USER must call @a VL53LX_ClearInterruptAndStartMeasurement() prior"]
    #[doc = " to call again this function"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @note The first valid value returned by this function will have a range"]
    #[doc = " status equal to VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK which means that"]
    #[doc = " the data is valid but no wrap around check have been done. User should take"]
    #[doc = " care about that."]
    #[doc = ""]
    #[doc = " @param   Dev                      Device Handle"]
    #[doc = " @param   pMultiRangingData        Pointer to the data structure to fill up."]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_GetMultiRangingDataEP25VL53LX_MultiRangingData_t"]
    fn VL53LX_VL53LX_GetMultiRangingData(
        this: *mut VL53LX,
        pMultiRangingData: *mut VL53LX_MultiRangingData_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Set Tuning Parameter value for a given parameter ID"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " This function is used to improve the performance of the device. It permit to"]
    #[doc = " change a particular value used for a timeout or a threshold or a constant"]
    #[doc = " in an algorithm. The function will change the value of the parameter"]
    #[doc = " identified by an unique ID."]
    #[doc = ""]
    #[doc = " @note This function doesn't Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                          Device Handle"]
    #[doc = " @param   TuningParameterId            Tuning Parameter ID"]
    #[doc = " @param   TuningParameterValue         Tuning Parameter Value"]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_SetTuningParameterEti"]
    fn VL53LX_VL53LX_SetTuningParameter(
        this: *mut VL53LX,
        TuningParameterId: u16,
        TuningParameterValue: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Get Tuning Parameter value for a given parameter ID"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " This function is used to get the value of the parameter"]
    #[doc = " identified by an unique ID."]
    #[doc = ""]
    #[doc = " @note This function doesn't Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                          Device Handle"]
    #[doc = " @param   TuningParameterId            Tuning Parameter ID"]
    #[doc = " @param   pTuningParameterValue        Pointer to Tuning Parameter Value"]
    #[doc = " for a given TuningParameterId."]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_GetTuningParameterEtPi"]
    fn VL53LX_VL53LX_GetTuningParameter(
        this: *mut VL53LX,
        TuningParameterId: u16,
        pTuningParameterValue: *mut i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Performs Reference Spad Management"]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " The reference SPAD initialization procedure determines the minimum amount"]
    #[doc = " of reference spads to be enables to achieve a target reference signal rate"]
    #[doc = " and should be performed once during initialization."]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                          Device Handle"]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_PerformRefSpadManagementEv"]
    fn VL53LX_VL53LX_PerformRefSpadManagement(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Enable/Disable dynamic Xtalk compensation feature"]
    #[doc = ""]
    #[doc = " Enable/Disable dynamic Xtalk compensation (aka smudge correction)."]
    #[doc = ""]
    #[doc = " @param   Dev    Device Handle"]
    #[doc = " @param   Mode   Set the smudge correction mode"]
    #[doc = " See ::VL53LX_SmudgeCorrectionModes"]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_SmudgeCorrectionEnableEh"]
    fn VL53LX_VL53LX_SmudgeCorrectionEnable(
        this: *mut VL53LX,
        Mode: VL53LX_SmudgeCorrectionModes,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Enable/Disable Cross talk compensation feature"]
    #[doc = ""]
    #[doc = " Enable/Disable Cross Talk correction."]
    #[doc = ""]
    #[doc = " @param   Dev                       Device Handle"]
    #[doc = " @param   XTalkCompensationEnable   Cross talk compensation"]
    #[doc = "  to be set 0 = disabled or 1 = enabled."]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_SetXTalkCompensationEnableEh"]
    fn VL53LX_VL53LX_SetXTalkCompensationEnable(
        this: *mut VL53LX,
        XTalkCompensationEnable: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Get Cross talk compensation rate enable"]
    #[doc = ""]
    #[doc = " Get if the Cross Talk is Enabled or Disabled."]
    #[doc = ""]
    #[doc = " @note This function doesn't access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                        Device Handle"]
    #[doc = " @param   pXTalkCompensationEnable   Pointer to the Cross talk compensation"]
    #[doc = "  state 0=disabled or 1 = enabled"]
    #[doc = " @return  VL53LX_Error_NONE        Success"]
    #[doc = " @return  \"Other error code\"       See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_GetXTalkCompensationEnableEPh"]
    fn VL53LX_VL53LX_GetXTalkCompensationEnable(
        this: *mut VL53LX,
        pXTalkCompensationEnable: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Perform XTalk Calibration"]
    #[doc = ""]
    #[doc = " @details Perform a XTalk calibration of the Device."]
    #[doc = " This function will launch a  measurement, if interrupts"]
    #[doc = " are enabled an interrupt will be done."]
    #[doc = " This function will clear the interrupt generated automatically."]
    #[doc = " This function will program a new value for the XTalk compensation"]
    #[doc = " and it will enable the cross talk before exit."]
    #[doc = ""]
    #[doc = " @warning This function is a blocking function"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = " the calibration sets appropriate"]
    #[doc = " distance mode and thus override existing one<br>"]
    #[doc = " The calibration uses a target which should be located at least @60cm from the"]
    #[doc = " device. The actual location of the target shall be passed"]
    #[doc = " through the bare driver tuning parameters table"]
    #[doc = ""]
    #[doc = " @return  VL53LX_Error_NONE    Success"]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_PerformXTalkCalibrationEv"]
    fn VL53LX_VL53LX_PerformXTalkCalibration(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Define the mode to be used for the offset correction"]
    #[doc = ""]
    #[doc = " Define the mode to be used for the offset correction."]
    #[doc = ""]
    #[doc = " @param   Dev                       Device Handle"]
    #[doc = " @param   OffsetCorrectionMode      Offset Correction Mode valid values are:"]
    #[doc = " @li                                VL53LX_OFFSETCORRECTIONMODE_STANDARD"]
    #[doc = " @li                                VL53LX_OFFSETCORRECTIONMODE_PERVCSEL"]
    #[doc = ""]
    #[doc = " @return  VL53LX_Error_NONE         Success"]
    #[doc = " @return  \"Other error code\"        See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_SetOffsetCorrectionModeEh"]
    fn VL53LX_VL53LX_SetOffsetCorrectionMode(
        this: *mut VL53LX,
        OffsetCorrectionMode: VL53LX_OffsetCorrectionModes,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Perform Offset simple Calibration"]
    #[doc = ""]
    #[doc = " @details Perform a very simple offset calibration of the Device."]
    #[doc = " This function will launch few ranging measurements and computes offset"]
    #[doc = " calibration. The preset mode and the distance mode MUST be set by the"]
    #[doc = " application before to call this function."]
    #[doc = ""]
    #[doc = " @warning This function is a blocking function"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = " @param   CalDistanceMilliMeter     Calibration distance value used for the"]
    #[doc = " offset compensation."]
    #[doc = ""]
    #[doc = " @return  VL53LX_Error_NONE"]
    #[doc = " @return  VL53LX_Error_OFFSET_CAL_NO_SAMPLE_FAIL the calibration failed by"]
    #[doc = " lack of valid measurements"]
    #[doc = " @return  VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH means that the target"]
    #[doc = " distance combined to the number of loops performed in the calibration lead to"]
    #[doc = " an internal overflow. Try to reduce the distance of the target (140 mm)"]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_PerformOffsetSimpleCalibrationEi"]
    fn VL53LX_VL53LX_PerformOffsetSimpleCalibration(
        this: *mut VL53LX,
        CalDistanceMilliMeter: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Perform Offset simple Calibration with a \"zero distance\" target"]
    #[doc = ""]
    #[doc = " @details Perform a simple offset calibration of the Device."]
    #[doc = " This function will launch few ranging measurements and computes offset"]
    #[doc = " calibration. The preset mode and the distance mode MUST be set by the"]
    #[doc = " application before to call this function."]
    #[doc = " A target must be place very close to the device."]
    #[doc = " Ideally the target shall be touching the coverglass."]
    #[doc = ""]
    #[doc = " @warning This function is a blocking function"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = ""]
    #[doc = " @return  VL53LX_Error_NONE"]
    #[doc = " @return  VL53LX_Error_OFFSET_CAL_NO_SAMPLE_FAIL the calibration failed by"]
    #[doc = " lack of valid measurements"]
    #[doc = " @return  VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH means that the target"]
    #[doc = " distance is too large, try to put the target closer to the device"]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_PerformOffsetZeroDistanceCalibrationEv"]
    fn VL53LX_VL53LX_PerformOffsetZeroDistanceCalibration(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Perform Offset per Vcsel Calibration. i.e. per distance mode"]
    #[doc = ""]
    #[doc = " @details Perform offset calibration of the Device depending on the"]
    #[doc = " three distance mode settings: short, medium and long."]
    #[doc = " This function will launch few ranging measurements and computes offset"]
    #[doc = " calibration in each of the three distance modes."]
    #[doc = " The preset mode MUST be set by the application before to call this function."]
    #[doc = ""]
    #[doc = " @warning This function is a blocking function"]
    #[doc = ""]
    #[doc = " @note This function Access to the device"]
    #[doc = ""]
    #[doc = " @param   Dev                  Device Handle"]
    #[doc = " @param   CalDistanceMilliMeter     Distance of the target used for the"]
    #[doc = " offset compensation calibration."]
    #[doc = ""]
    #[doc = " @return  VL53LX_Error_NONE"]
    #[doc = " @return  VL53LX_Error_OFFSET_CAL_NO_SAMPLE_FAIL the calibration failed by"]
    #[doc = " lack of valid measurements"]
    #[doc = " @return  VL53LX_WARNING_OFFSET_CAL_SIGMA_TOO_HIGH means that the target"]
    #[doc = " distance combined to the number of loops performed in the calibration lead to"]
    #[doc = " an internal overflow. Try to reduce the distance of the target (140 mm)"]
    #[doc = " @return  \"Other error code\"   See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_PerformOffsetPerVcselCalibrationEi"]
    fn VL53LX_VL53LX_PerformOffsetPerVcselCalibration(
        this: *mut VL53LX,
        CalDistanceMilliMeter: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Sets the Calibration Data."]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " This function set all the Calibration Data issued from the functions"]
    #[doc = " @a VL53LX_PerformRefSpadManagement(), @a VL53LX_PerformXTalkCalibration,"]
    #[doc = " @a VL53LX_PerformOffsetCalibration()"]
    #[doc = ""]
    #[doc = " @note This function doesn't Accesses the device"]
    #[doc = ""]
    #[doc = " @param   Dev                          Device Handle"]
    #[doc = " @param   *pCalibrationData            Pointer to Calibration data to be set."]
    #[doc = " @return  VL53LX_Error_NONE            Success"]
    #[doc = " @return  VL53LX_Error_INVALID_PARAMS  pCalibrationData points to an older"]
    #[doc = " version of the inner structure. Need for support to convert its content."]
    #[doc = " @return  \"Other error code\"           See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_SetCalibrationDataEP24VL53LX_CalibrationData_t"]
    fn VL53LX_VL53LX_SetCalibrationData(
        this: *mut VL53LX,
        pCalibrationData: *mut VL53LX_CalibrationData_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @brief Gets the Calibration Data."]
    #[doc = ""]
    #[doc = " @par Function Description"]
    #[doc = " This function get all the Calibration Data issued from the functions"]
    #[doc = " @a VL53LX_PerformRefSpadManagement(), @a VL53LX_PerformXTalkCalibration,"]
    #[doc = " @a VL53LX_PerformOffsetCalibration()"]
    #[doc = ""]
    #[doc = " @note This function doesn't Accesses the device"]
    #[doc = ""]
    #[doc = " @param   Dev                          Device Handle"]
    #[doc = " @param   *pCalibrationData            pointer where to store Calibration"]
    #[doc = "  data."]
    #[doc = " @return  VL53LX_Error_NONE            Success"]
    #[doc = " @return  \"Other error code\"           See ::VL53LX_Error"]
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_GetCalibrationDataEP24VL53LX_CalibrationData_t"]
    fn VL53LX_VL53LX_GetCalibrationData(
        this: *mut VL53LX,
        pCalibrationData: *mut VL53LX_CalibrationData_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[doc = " @} VL53LX_group"]
    #[link_name = "\u{1}_ZN6VL53LX18VL53LX_get_versionEP19VL53LX_ll_version_t"]
    fn VL53LX_VL53LX_get_version(
        this: *mut VL53LX,
        pversion: *mut VL53LX_ll_version_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_get_device_firmware_versionEPt"]
    fn VL53LX_VL53LX_get_device_firmware_version(
        this: *mut VL53LX,
        pfw_version: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX16VL53LX_data_initEh"]
    fn VL53LX_VL53LX_data_init(this: *mut VL53LX, read_p2p_data: u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_read_p2p_dataEv"]
    fn VL53LX_VL53LX_read_p2p_data(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_software_resetEv"]
    fn VL53LX_VL53LX_software_reset(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_set_part_to_part_dataEP25VL53LX_calibration_data_t"]
    fn VL53LX_VL53LX_set_part_to_part_data(
        this: *mut VL53LX,
        pcal_data: *mut VL53LX_calibration_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_get_part_to_part_dataEP25VL53LX_calibration_data_t"]
    fn VL53LX_VL53LX_get_part_to_part_data(
        this: *mut VL53LX,
        pcal_data: *mut VL53LX_calibration_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_get_tuning_debug_dataEP26VL53LX_tuning_parameters_t"]
    fn VL53LX_VL53LX_get_tuning_debug_data(
        this: *mut VL53LX,
        ptun_data: *mut VL53LX_tuning_parameters_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_set_inter_measurement_period_msEj"]
    fn VL53LX_VL53LX_set_inter_measurement_period_ms(
        this: *mut VL53LX,
        inter_measurement_period_ms: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_get_inter_measurement_period_msEPj"]
    fn VL53LX_VL53LX_get_inter_measurement_period_ms(
        this: *mut VL53LX,
        pinter_measurement_period_ms: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_timeouts_usEjjj"]
    fn VL53LX_VL53LX_set_timeouts_us(
        this: *mut VL53LX,
        phasecal_config_timeout_us: u32,
        mm_config_timeout_us: u32,
        range_config_timeout_us: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_get_timeouts_usEPjS0_S0_"]
    fn VL53LX_VL53LX_get_timeouts_us(
        this: *mut VL53LX,
        pphasecal_config_timeout_us: *mut u32,
        pmm_config_timeout_us: *mut u32,
        prange_config_timeout_us: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_set_calibration_repeat_periodEt"]
    fn VL53LX_VL53LX_set_calibration_repeat_period(
        this: *mut VL53LX,
        cal_config__repeat_period: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_get_calibration_repeat_periodEPt"]
    fn VL53LX_VL53LX_get_calibration_repeat_period(
        this: *mut VL53LX,
        pcal_config__repeat_period: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_set_sequence_config_bitEhh"]
    fn VL53LX_VL53LX_set_sequence_config_bit(
        this: *mut VL53LX,
        bit_id: VL53LX_DeviceSequenceConfig,
        value: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_get_sequence_config_bitEhPh"]
    fn VL53LX_VL53LX_get_sequence_config_bit(
        this: *mut VL53LX,
        bit_id: VL53LX_DeviceSequenceConfig,
        pvalue: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_set_interrupt_polarityEh"]
    fn VL53LX_VL53LX_set_interrupt_polarity(
        this: *mut VL53LX,
        interrupt_polarity: VL53LX_DeviceInterruptPolarity,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_get_interrupt_polarityEPh"]
    fn VL53LX_VL53LX_get_interrupt_polarity(
        this: *mut VL53LX,
        pinterrupt_polarity: *mut VL53LX_DeviceInterruptPolarity,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_get_refspadchar_config_structEP27VL53LX_refspadchar_config_t"]
    fn VL53LX_VL53LX_get_refspadchar_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_refspadchar_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_set_refspadchar_config_structEP27VL53LX_refspadchar_config_t"]
    fn VL53LX_VL53LX_set_refspadchar_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_refspadchar_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_set_range_ignore_thresholdEht"]
    fn VL53LX_VL53LX_set_range_ignore_threshold(
        this: *mut VL53LX,
        range_ignore_thresh_mult: u8,
        range_ignore_threshold_mcps: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_get_range_ignore_thresholdEPhPtS1_"]
    fn VL53LX_VL53LX_get_range_ignore_threshold(
        this: *mut VL53LX,
        prange_ignore_thresh_mult: *mut u8,
        prange_ignore_threshold_mcps_internal: *mut u16,
        prange_ignore_threshold_mcps_current: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_set_user_zoneEP18VL53LX_user_zone_t"]
    fn VL53LX_VL53LX_set_user_zone(
        this: *mut VL53LX,
        puser_zone: *mut VL53LX_user_zone_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_get_user_zoneEP18VL53LX_user_zone_t"]
    fn VL53LX_VL53LX_get_user_zone(
        this: *mut VL53LX,
        puser_zone: *mut VL53LX_user_zone_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_get_mode_mitigation_roiEP18VL53LX_user_zone_t"]
    fn VL53LX_VL53LX_get_mode_mitigation_roi(
        this: *mut VL53LX,
        pmm_roi: *mut VL53LX_user_zone_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_zone_configEP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_set_zone_config(
        this: *mut VL53LX,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_get_zone_configEP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_get_zone_config(
        this: *mut VL53LX,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_preset_modeEhtjjjj"]
    fn VL53LX_VL53LX_set_preset_mode(
        this: *mut VL53LX,
        device_preset_mode: VL53LX_DevicePresetModes,
        dss_config__target_total_rate_mcps: u16,
        phasecal_config_timeout_us: u32,
        mm_config_timeout_us: u32,
        range_config_timeout_us: u32,
        inter_measurement_period_ms: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_get_preset_mode_timing_cfgEhPtPjS1_S1_"]
    fn VL53LX_VL53LX_get_preset_mode_timing_cfg(
        this: *mut VL53LX,
        device_preset_mode: VL53LX_DevicePresetModes,
        pdss_config__target_total_rate_mcps: *mut u16,
        pphasecal_config_timeout_us: *mut u32,
        pmm_config_timeout_us: *mut u32,
        prange_config_timeout_us: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_zone_presetEh"]
    fn VL53LX_VL53LX_set_zone_preset(
        this: *mut VL53LX,
        zone_preset: VL53LX_DeviceZonePreset,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_enable_xtalk_compensationEv"]
    fn VL53LX_VL53LX_enable_xtalk_compensation(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_disable_xtalk_compensationEv"]
    fn VL53LX_VL53LX_disable_xtalk_compensation(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_get_xtalk_compensation_enableEPh"]
    fn VL53LX_VL53LX_get_xtalk_compensation_enable(
        this: *mut VL53LX,
        pcrosstalk_compensation_enable: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_init_and_start_rangeEhh"]
    fn VL53LX_VL53LX_init_and_start_range(
        this: *mut VL53LX,
        measurement_mode: u8,
        device_config_level: VL53LX_DeviceConfigLevel,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_stop_rangeEv"]
    fn VL53LX_VL53LX_stop_range(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_get_measurement_resultsEh"]
    fn VL53LX_VL53LX_get_measurement_results(
        this: *mut VL53LX,
        device_result_level: VL53LX_DeviceResultsLevel,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_get_device_resultsEhP22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_get_device_results(
        this: *mut VL53LX,
        device_result_level: VL53LX_DeviceResultsLevel,
        prange_results: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_clear_interrupt_and_enable_next_rangeEh"]
    fn VL53LX_VL53LX_clear_interrupt_and_enable_next_range(
        this: *mut VL53LX,
        measurement_mode: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_get_histogram_bin_dataEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_get_histogram_bin_data(
        this: *mut VL53LX,
        phist_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX49VL53LX_copy_sys_and_core_results_to_range_resultsEiP23VL53LX_system_results_tP21VL53LX_core_results_tP22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_copy_sys_and_core_results_to_range_results(
        this: *mut VL53LX,
        gain_factor: i32,
        psys: *mut VL53LX_system_results_t,
        pcore: *mut VL53LX_core_results_t,
        presults: *mut VL53LX_range_results_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_set_zone_dss_configEP29VL53LX_zone_private_dyn_cfg_t"]
    fn VL53LX_VL53LX_set_zone_dss_config(
        this: *mut VL53LX,
        pzone_dyn_cfg: *mut VL53LX_zone_private_dyn_cfg_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_calc_ambient_dmaxEtPs"]
    fn VL53LX_VL53LX_calc_ambient_dmax(
        this: *mut VL53LX,
        target_reflectance: u16,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_set_GPIO_interrupt_configEhhhhhtttt"]
    fn VL53LX_VL53LX_set_GPIO_interrupt_config(
        this: *mut VL53LX,
        intr_mode_distance: VL53LX_GPIO_Interrupt_Mode,
        intr_mode_rate: VL53LX_GPIO_Interrupt_Mode,
        intr_new_measure_ready: u8,
        intr_no_target: u8,
        intr_combined_mode: u8,
        thresh_distance_high: u16,
        thresh_distance_low: u16,
        thresh_rate_high: u16,
        thresh_rate_low: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_set_GPIO_interrupt_config_structE30VL53LX_GPIO_interrupt_config_t"]
    fn VL53LX_VL53LX_set_GPIO_interrupt_config_struct(
        this: *mut VL53LX,
        intconf: VL53LX_GPIO_interrupt_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_get_GPIO_interrupt_configEP30VL53LX_GPIO_interrupt_config_t"]
    fn VL53LX_VL53LX_get_GPIO_interrupt_config(
        this: *mut VL53LX,
        pintconf: *mut VL53LX_GPIO_interrupt_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_set_dmax_modeEh"]
    fn VL53LX_VL53LX_set_dmax_mode(
        this: *mut VL53LX,
        dmax_mode: VL53LX_DeviceDmaxMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_get_dmax_modeEPh"]
    fn VL53LX_VL53LX_get_dmax_mode(
        this: *mut VL53LX,
        pdmax_mode: *mut VL53LX_DeviceDmaxMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_get_dmax_calibration_dataEhP30VL53LX_dmax_calibration_data_t"]
    fn VL53LX_VL53LX_get_dmax_calibration_data(
        this: *mut VL53LX,
        dmax_mode: VL53LX_DeviceDmaxMode,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_set_hist_dmax_configEP30VL53LX_hist_gen3_dmax_config_t"]
    fn VL53LX_VL53LX_set_hist_dmax_config(
        this: *mut VL53LX,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_get_hist_dmax_configEP30VL53LX_hist_gen3_dmax_config_t"]
    fn VL53LX_VL53LX_get_hist_dmax_config(
        this: *mut VL53LX,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_set_offset_calibration_modeEh"]
    fn VL53LX_VL53LX_set_offset_calibration_mode(
        this: *mut VL53LX,
        offset_cal_mode: VL53LX_OffsetCalibrationMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_get_offset_calibration_modeEPh"]
    fn VL53LX_VL53LX_get_offset_calibration_mode(
        this: *mut VL53LX,
        poffset_cal_mode: *mut VL53LX_OffsetCalibrationMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_set_offset_correction_modeEh"]
    fn VL53LX_VL53LX_set_offset_correction_mode(
        this: *mut VL53LX,
        offset_cor_mode: VL53LX_OffsetCalibrationMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_get_offset_correction_modeEPh"]
    fn VL53LX_VL53LX_get_offset_correction_mode(
        this: *mut VL53LX,
        poffset_cor_mode: *mut VL53LX_OffsetCorrectionMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_set_zone_calibration_dataEP33VL53LX_zone_calibration_results_t"]
    fn VL53LX_VL53LX_set_zone_calibration_data(
        this: *mut VL53LX,
        pzone_cal: *mut VL53LX_zone_calibration_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_get_zone_calibration_dataEP33VL53LX_zone_calibration_results_t"]
    fn VL53LX_VL53LX_get_zone_calibration_data(
        this: *mut VL53LX,
        pzone_cal: *mut VL53LX_zone_calibration_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_get_lite_xtalk_margin_kcpsEPs"]
    fn VL53LX_VL53LX_get_lite_xtalk_margin_kcps(
        this: *mut VL53LX,
        pxtalk_margin: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_set_lite_xtalk_margin_kcpsEs"]
    fn VL53LX_VL53LX_set_lite_xtalk_margin_kcps(
        this: *mut VL53LX,
        xtalk_margin: i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_get_histogram_xtalk_margin_kcpsEPs"]
    fn VL53LX_VL53LX_get_histogram_xtalk_margin_kcps(
        this: *mut VL53LX,
        pxtalk_margin: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_set_histogram_xtalk_margin_kcpsEs"]
    fn VL53LX_VL53LX_set_histogram_xtalk_margin_kcps(
        this: *mut VL53LX,
        xtalk_margin: i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_get_histogram_phase_consistencyEPh"]
    fn VL53LX_VL53LX_get_histogram_phase_consistency(
        this: *mut VL53LX,
        pphase_consistency: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_set_histogram_phase_consistencyEh"]
    fn VL53LX_VL53LX_set_histogram_phase_consistency(
        this: *mut VL53LX,
        phase_consistency: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_get_histogram_event_consistencyEPh"]
    fn VL53LX_VL53LX_get_histogram_event_consistency(
        this: *mut VL53LX,
        pevent_consistency: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_set_histogram_event_consistencyEh"]
    fn VL53LX_VL53LX_set_histogram_event_consistency(
        this: *mut VL53LX,
        event_consistency: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_get_histogram_ambient_threshold_sigmaEPh"]
    fn VL53LX_VL53LX_get_histogram_ambient_threshold_sigma(
        this: *mut VL53LX,
        pamb_thresh_sigma: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_set_histogram_ambient_threshold_sigmaEh"]
    fn VL53LX_VL53LX_set_histogram_ambient_threshold_sigma(
        this: *mut VL53LX,
        amb_thresh_sigma: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_get_lite_min_count_rateEPt"]
    fn VL53LX_VL53LX_get_lite_min_count_rate(
        this: *mut VL53LX,
        plite_mincountrate: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_set_lite_min_count_rateEt"]
    fn VL53LX_VL53LX_set_lite_min_count_rate(
        this: *mut VL53LX,
        lite_mincountrate: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_get_lite_sigma_thresholdEPt"]
    fn VL53LX_VL53LX_get_lite_sigma_threshold(
        this: *mut VL53LX,
        plite_sigma: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_set_lite_sigma_thresholdEt"]
    fn VL53LX_VL53LX_set_lite_sigma_threshold(
        this: *mut VL53LX,
        lite_sigma: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_restore_xtalk_nvm_defaultEv"]
    fn VL53LX_VL53LX_restore_xtalk_nvm_default(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_get_xtalk_detect_configEPsS0_PtS1_"]
    fn VL53LX_VL53LX_get_xtalk_detect_config(
        this: *mut VL53LX,
        pmax_valid_range_mm: *mut i16,
        pmin_valid_range_mm: *mut i16,
        pmax_valid_rate_kcps: *mut u16,
        pmax_sigma_mm: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_set_xtalk_detect_configEsstt"]
    fn VL53LX_VL53LX_set_xtalk_detect_config(
        this: *mut VL53LX,
        max_valid_range_mm: i16,
        min_valid_range_mm: i16,
        max_valid_rate_kcps: u16,
        max_sigma_mm: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_get_target_order_modeEPh"]
    fn VL53LX_VL53LX_get_target_order_mode(
        this: *mut VL53LX,
        phist_target_order: *mut VL53LX_HistTargetOrder,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_set_target_order_modeEh"]
    fn VL53LX_VL53LX_set_target_order_mode(
        this: *mut VL53LX,
        hist_target_order: VL53LX_HistTargetOrder,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_set_dmax_reflectance_valuesEP31VL53LX_dmax_reflectance_array_t"]
    fn VL53LX_VL53LX_set_dmax_reflectance_values(
        this: *mut VL53LX,
        pdmax_reflectances: *mut VL53LX_dmax_reflectance_array_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_get_dmax_reflectance_valuesEP31VL53LX_dmax_reflectance_array_t"]
    fn VL53LX_VL53LX_get_dmax_reflectance_values(
        this: *mut VL53LX,
        pdmax_reflectances: *mut VL53LX_dmax_reflectance_array_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_set_vhv_configEhh"]
    fn VL53LX_VL53LX_set_vhv_config(
        this: *mut VL53LX,
        vhv_init_en: u8,
        vhv_init_value: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_get_vhv_configEPhS0_"]
    fn VL53LX_VL53LX_get_vhv_config(
        this: *mut VL53LX,
        pvhv_init_en: *mut u8,
        pvhv_init_value: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_set_vhv_loopboundEh"]
    fn VL53LX_VL53LX_set_vhv_loopbound(this: *mut VL53LX, vhv_loopbound: u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_get_vhv_loopboundEPh"]
    fn VL53LX_VL53LX_get_vhv_loopbound(
        this: *mut VL53LX,
        pvhv_loopbound: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_get_tuning_parmEtPi"]
    fn VL53LX_VL53LX_get_tuning_parm(
        this: *mut VL53LX,
        tuning_parm_key: VL53LX_TuningParms,
        ptuning_parm_value: *mut i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_tuning_parmEti"]
    fn VL53LX_VL53LX_set_tuning_parm(
        this: *mut VL53LX,
        tuning_parm_key: VL53LX_TuningParms,
        tuning_parm_value: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_dynamic_xtalk_correction_enableEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_enable(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_dynamic_xtalk_correction_disableEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_disable(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_dynamic_xtalk_correction_apply_enableEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_apply_enable(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_dynamic_xtalk_correction_apply_disableEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_apply_disable(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX51VL53LX_dynamic_xtalk_correction_single_apply_enableEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_single_apply_enable(
        this: *mut VL53LX,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX52VL53LX_dynamic_xtalk_correction_single_apply_disableEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_single_apply_disable(
        this: *mut VL53LX,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_dynamic_xtalk_correction_set_scalersEssh"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_set_scalers(
        this: *mut VL53LX,
        x_scaler_in: i16,
        y_scaler_in: i16,
        user_scaler_set_in: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_get_current_xtalk_settingsEP34VL53LX_xtalk_calibration_results_t"]
    fn VL53LX_VL53LX_get_current_xtalk_settings(
        this: *mut VL53LX,
        pxtalk: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_set_current_xtalk_settingsEP34VL53LX_xtalk_calibration_results_t"]
    fn VL53LX_VL53LX_set_current_xtalk_settings(
        this: *mut VL53LX,
        pxtalk: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_load_patchEv"]
    fn VL53LX_VL53LX_load_patch(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX19VL53LX_unload_patchEv"]
    fn VL53LX_VL53LX_unload_patch(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_i2c_encode_static_nvm_managedEP27VL53LX_static_nvm_managed_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_static_nvm_managed(
        this: *mut VL53LX,
        pdata: *mut VL53LX_static_nvm_managed_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_i2c_decode_static_nvm_managedEtPhP27VL53LX_static_nvm_managed_t"]
    fn VL53LX_VL53LX_i2c_decode_static_nvm_managed(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_static_nvm_managed_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_set_static_nvm_managedEP27VL53LX_static_nvm_managed_t"]
    fn VL53LX_VL53LX_set_static_nvm_managed(
        this: *mut VL53LX,
        pdata: *mut VL53LX_static_nvm_managed_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_get_static_nvm_managedEP27VL53LX_static_nvm_managed_t"]
    fn VL53LX_VL53LX_get_static_nvm_managed(
        this: *mut VL53LX,
        pdata: *mut VL53LX_static_nvm_managed_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_i2c_encode_customer_nvm_managedEP29VL53LX_customer_nvm_managed_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_customer_nvm_managed(
        this: *mut VL53LX,
        pdata: *mut VL53LX_customer_nvm_managed_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_i2c_decode_customer_nvm_managedEtPhP29VL53LX_customer_nvm_managed_t"]
    fn VL53LX_VL53LX_i2c_decode_customer_nvm_managed(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_customer_nvm_managed_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_set_customer_nvm_managedEP29VL53LX_customer_nvm_managed_t"]
    fn VL53LX_VL53LX_set_customer_nvm_managed(
        this: *mut VL53LX,
        pdata: *mut VL53LX_customer_nvm_managed_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_get_customer_nvm_managedEP29VL53LX_customer_nvm_managed_t"]
    fn VL53LX_VL53LX_get_customer_nvm_managed(
        this: *mut VL53LX,
        pdata: *mut VL53LX_customer_nvm_managed_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_encode_static_configEP22VL53LX_static_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_static_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_static_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_decode_static_configEtPhP22VL53LX_static_config_t"]
    fn VL53LX_VL53LX_i2c_decode_static_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_static_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_set_static_configEP22VL53LX_static_config_t"]
    fn VL53LX_VL53LX_set_static_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_static_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_get_static_configEP22VL53LX_static_config_t"]
    fn VL53LX_VL53LX_get_static_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_static_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_encode_general_configEP23VL53LX_general_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_general_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_general_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_decode_general_configEtPhP23VL53LX_general_config_t"]
    fn VL53LX_VL53LX_i2c_decode_general_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_general_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_set_general_configEP23VL53LX_general_config_t"]
    fn VL53LX_VL53LX_set_general_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_general_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_get_general_configEP23VL53LX_general_config_t"]
    fn VL53LX_VL53LX_get_general_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_general_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_encode_timing_configEP22VL53LX_timing_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_timing_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_timing_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_decode_timing_configEtPhP22VL53LX_timing_config_t"]
    fn VL53LX_VL53LX_i2c_decode_timing_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_set_timing_configEP22VL53LX_timing_config_t"]
    fn VL53LX_VL53LX_set_timing_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_get_timing_configEP22VL53LX_timing_config_t"]
    fn VL53LX_VL53LX_get_timing_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_encode_dynamic_configEP23VL53LX_dynamic_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_dynamic_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_dynamic_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_decode_dynamic_configEtPhP23VL53LX_dynamic_config_t"]
    fn VL53LX_VL53LX_i2c_decode_dynamic_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_dynamic_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_set_dynamic_configEP23VL53LX_dynamic_config_t"]
    fn VL53LX_VL53LX_set_dynamic_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_dynamic_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_get_dynamic_configEP23VL53LX_dynamic_config_t"]
    fn VL53LX_VL53LX_get_dynamic_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_dynamic_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_encode_system_controlEP23VL53LX_system_control_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_system_control(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_control_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_decode_system_controlEtPhP23VL53LX_system_control_t"]
    fn VL53LX_VL53LX_i2c_decode_system_control(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_system_control_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_set_system_controlEP23VL53LX_system_control_t"]
    fn VL53LX_VL53LX_set_system_control(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_control_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_get_system_controlEP23VL53LX_system_control_t"]
    fn VL53LX_VL53LX_get_system_control(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_control_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_encode_system_resultsEP23VL53LX_system_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_i2c_decode_system_resultsEtPhP23VL53LX_system_results_t"]
    fn VL53LX_VL53LX_i2c_decode_system_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_set_system_resultsEP23VL53LX_system_results_t"]
    fn VL53LX_VL53LX_set_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_get_system_resultsEP23VL53LX_system_results_t"]
    fn VL53LX_VL53LX_get_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_i2c_encode_core_resultsEP21VL53LX_core_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_core_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_i2c_decode_core_resultsEtPhP21VL53LX_core_results_t"]
    fn VL53LX_VL53LX_i2c_decode_core_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_set_core_resultsEP21VL53LX_core_results_t"]
    fn VL53LX_VL53LX_set_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_get_core_resultsEP21VL53LX_core_results_t"]
    fn VL53LX_VL53LX_get_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_encode_debug_resultsEP22VL53LX_debug_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_debug_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_debug_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_decode_debug_resultsEtPhP22VL53LX_debug_results_t"]
    fn VL53LX_VL53LX_i2c_decode_debug_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_debug_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_set_debug_resultsEP22VL53LX_debug_results_t"]
    fn VL53LX_VL53LX_set_debug_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_debug_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_get_debug_resultsEP22VL53LX_debug_results_t"]
    fn VL53LX_VL53LX_get_debug_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_debug_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_encode_nvm_copy_dataEP22VL53LX_nvm_copy_data_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_nvm_copy_data(
        this: *mut VL53LX,
        pdata: *mut VL53LX_nvm_copy_data_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_decode_nvm_copy_dataEtPhP22VL53LX_nvm_copy_data_t"]
    fn VL53LX_VL53LX_i2c_decode_nvm_copy_data(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_nvm_copy_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_set_nvm_copy_dataEP22VL53LX_nvm_copy_data_t"]
    fn VL53LX_VL53LX_set_nvm_copy_data(
        this: *mut VL53LX,
        pdata: *mut VL53LX_nvm_copy_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_get_nvm_copy_dataEP22VL53LX_nvm_copy_data_t"]
    fn VL53LX_VL53LX_get_nvm_copy_data(
        this: *mut VL53LX,
        pdata: *mut VL53LX_nvm_copy_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_i2c_encode_prev_shadow_system_resultsEP35VL53LX_prev_shadow_system_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_prev_shadow_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_i2c_decode_prev_shadow_system_resultsEtPhP35VL53LX_prev_shadow_system_results_t"]
    fn VL53LX_VL53LX_i2c_decode_prev_shadow_system_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_set_prev_shadow_system_resultsEP35VL53LX_prev_shadow_system_results_t"]
    fn VL53LX_VL53LX_set_prev_shadow_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_get_prev_shadow_system_resultsEP35VL53LX_prev_shadow_system_results_t"]
    fn VL53LX_VL53LX_get_prev_shadow_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX42VL53LX_i2c_encode_prev_shadow_core_resultsEP33VL53LX_prev_shadow_core_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_prev_shadow_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX42VL53LX_i2c_decode_prev_shadow_core_resultsEtPhP33VL53LX_prev_shadow_core_results_t"]
    fn VL53LX_VL53LX_i2c_decode_prev_shadow_core_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_set_prev_shadow_core_resultsEP33VL53LX_prev_shadow_core_results_t"]
    fn VL53LX_VL53LX_set_prev_shadow_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_get_prev_shadow_core_resultsEP33VL53LX_prev_shadow_core_results_t"]
    fn VL53LX_VL53LX_get_prev_shadow_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_i2c_encode_patch_debugEP20VL53LX_patch_debug_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_patch_debug(
        this: *mut VL53LX,
        pdata: *mut VL53LX_patch_debug_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_i2c_decode_patch_debugEtPhP20VL53LX_patch_debug_t"]
    fn VL53LX_VL53LX_i2c_decode_patch_debug(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_patch_debug_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_patch_debugEP20VL53LX_patch_debug_t"]
    fn VL53LX_VL53LX_set_patch_debug(
        this: *mut VL53LX,
        pdata: *mut VL53LX_patch_debug_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_get_patch_debugEP20VL53LX_patch_debug_t"]
    fn VL53LX_VL53LX_get_patch_debug(
        this: *mut VL53LX,
        pdata: *mut VL53LX_patch_debug_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_i2c_encode_gph_general_configEP27VL53LX_gph_general_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_gph_general_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_general_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_i2c_decode_gph_general_configEtPhP27VL53LX_gph_general_config_t"]
    fn VL53LX_VL53LX_i2c_decode_gph_general_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_gph_general_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_set_gph_general_configEP27VL53LX_gph_general_config_t"]
    fn VL53LX_VL53LX_set_gph_general_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_general_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_get_gph_general_configEP27VL53LX_gph_general_config_t"]
    fn VL53LX_VL53LX_get_gph_general_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_general_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_i2c_encode_gph_static_configEP26VL53LX_gph_static_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_gph_static_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_static_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_i2c_decode_gph_static_configEtPhP26VL53LX_gph_static_config_t"]
    fn VL53LX_VL53LX_i2c_decode_gph_static_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_gph_static_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_set_gph_static_configEP26VL53LX_gph_static_config_t"]
    fn VL53LX_VL53LX_set_gph_static_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_static_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_get_gph_static_configEP26VL53LX_gph_static_config_t"]
    fn VL53LX_VL53LX_get_gph_static_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_static_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_i2c_encode_gph_timing_configEP26VL53LX_gph_timing_config_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_gph_timing_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_timing_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_i2c_decode_gph_timing_configEtPhP26VL53LX_gph_timing_config_t"]
    fn VL53LX_VL53LX_i2c_decode_gph_timing_config(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_gph_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_set_gph_timing_configEP26VL53LX_gph_timing_config_t"]
    fn VL53LX_VL53LX_set_gph_timing_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_get_gph_timing_configEP26VL53LX_gph_timing_config_t"]
    fn VL53LX_VL53LX_get_gph_timing_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_gph_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_i2c_encode_fw_internalEP20VL53LX_fw_internal_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_fw_internal(
        this: *mut VL53LX,
        pdata: *mut VL53LX_fw_internal_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_i2c_decode_fw_internalEtPhP20VL53LX_fw_internal_t"]
    fn VL53LX_VL53LX_i2c_decode_fw_internal(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_fw_internal_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_set_fw_internalEP20VL53LX_fw_internal_t"]
    fn VL53LX_VL53LX_set_fw_internal(
        this: *mut VL53LX,
        pdata: *mut VL53LX_fw_internal_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_get_fw_internalEP20VL53LX_fw_internal_t"]
    fn VL53LX_VL53LX_get_fw_internal(
        this: *mut VL53LX,
        pdata: *mut VL53LX_fw_internal_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_encode_patch_resultsEP22VL53LX_patch_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_patch_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_patch_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_i2c_decode_patch_resultsEtPhP22VL53LX_patch_results_t"]
    fn VL53LX_VL53LX_i2c_decode_patch_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_patch_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_set_patch_resultsEP22VL53LX_patch_results_t"]
    fn VL53LX_VL53LX_set_patch_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_patch_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_get_patch_resultsEP22VL53LX_patch_results_t"]
    fn VL53LX_VL53LX_get_patch_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_patch_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_i2c_encode_shadow_system_resultsEP30VL53LX_shadow_system_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_shadow_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_shadow_system_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_i2c_decode_shadow_system_resultsEtPhP30VL53LX_shadow_system_results_t"]
    fn VL53LX_VL53LX_i2c_decode_shadow_system_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_shadow_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_set_shadow_system_resultsEP30VL53LX_shadow_system_results_t"]
    fn VL53LX_VL53LX_set_shadow_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_shadow_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_get_shadow_system_resultsEP30VL53LX_shadow_system_results_t"]
    fn VL53LX_VL53LX_get_shadow_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_shadow_system_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_i2c_encode_shadow_core_resultsEP28VL53LX_shadow_core_results_ttPh"]
    fn VL53LX_VL53LX_i2c_encode_shadow_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_shadow_core_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_i2c_decode_shadow_core_resultsEtPhP28VL53LX_shadow_core_results_t"]
    fn VL53LX_VL53LX_i2c_decode_shadow_core_results(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_shadow_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_set_shadow_core_resultsEP28VL53LX_shadow_core_results_t"]
    fn VL53LX_VL53LX_set_shadow_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_shadow_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_get_shadow_core_resultsEP28VL53LX_shadow_core_results_t"]
    fn VL53LX_VL53LX_get_shadow_core_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_shadow_core_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_nvm_enableEti"]
    fn VL53LX_VL53LX_nvm_enable(
        this: *mut VL53LX,
        nvm_ctrl_pulse_width: u16,
        nvm_power_up_delay_us: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX15VL53LX_nvm_readEhhPh"]
    fn VL53LX_VL53LX_nvm_read(
        this: *mut VL53LX,
        start_address: u8,
        count: u8,
        pdata: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX18VL53LX_nvm_disableEv"]
    fn VL53LX_VL53LX_nvm_disable(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_nvm_format_decodeEtPhP25VL53LX_decoded_nvm_data_t"]
    fn VL53LX_VL53LX_nvm_format_decode(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_nvm_decode_optical_centreEtPhP23VL53LX_optical_centre_t"]
    fn VL53LX_VL53LX_nvm_decode_optical_centre(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_optical_centre_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_nvm_decode_cal_peak_rate_mapEtPhP26VL53LX_cal_peak_rate_map_t"]
    fn VL53LX_VL53LX_nvm_decode_cal_peak_rate_map(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_cal_peak_rate_map_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_nvm_decode_additional_offset_cal_dataEtPhP35VL53LX_additional_offset_cal_data_t"]
    fn VL53LX_VL53LX_nvm_decode_additional_offset_cal_data(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_additional_offset_cal_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_nvm_decode_fmt_range_results_dataEtPhP35VL53LX_decoded_nvm_fmt_range_data_t"]
    fn VL53LX_VL53LX_nvm_decode_fmt_range_results_data(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_fmt_range_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_nvm_decode_fmt_infoEtPhP29VL53LX_decoded_nvm_fmt_info_t"]
    fn VL53LX_VL53LX_nvm_decode_fmt_info(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_fmt_info_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_nvm_decode_ews_infoEtPhP29VL53LX_decoded_nvm_ews_info_t"]
    fn VL53LX_VL53LX_nvm_decode_ews_info(
        this: *mut VL53LX,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_ews_info_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_nvm_format_encodeEP25VL53LX_decoded_nvm_data_tPh"]
    fn VL53LX_VL53LX_nvm_format_encode(
        this: *mut VL53LX,
        pnvm_info: *mut VL53LX_decoded_nvm_data_t,
        pnvm_data: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_read_nvm_raw_dataEhhPh"]
    fn VL53LX_VL53LX_read_nvm_raw_data(
        this: *mut VL53LX,
        start_address: u8,
        count: u8,
        pnvm_raw_data: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX15VL53LX_read_nvmEhP25VL53LX_decoded_nvm_data_t"]
    fn VL53LX_VL53LX_read_nvm(
        this: *mut VL53LX,
        nvm_format: u8,
        pnvm_info: *mut VL53LX_decoded_nvm_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_read_nvm_optical_centreEP23VL53LX_optical_centre_t"]
    fn VL53LX_VL53LX_read_nvm_optical_centre(
        this: *mut VL53LX,
        pcentre: *mut VL53LX_optical_centre_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_read_nvm_cal_peak_rate_mapEP26VL53LX_cal_peak_rate_map_t"]
    fn VL53LX_VL53LX_read_nvm_cal_peak_rate_map(
        this: *mut VL53LX,
        pcal_data: *mut VL53LX_cal_peak_rate_map_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX42VL53LX_read_nvm_additional_offset_cal_dataEP35VL53LX_additional_offset_cal_data_t"]
    fn VL53LX_VL53LX_read_nvm_additional_offset_cal_data(
        this: *mut VL53LX,
        pcal_data: *mut VL53LX_additional_offset_cal_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_read_nvm_fmt_range_results_dataEtP35VL53LX_decoded_nvm_fmt_range_data_t"]
    fn VL53LX_VL53LX_read_nvm_fmt_range_results_data(
        this: *mut VL53LX,
        range_results_select: u16,
        prange_data: *mut VL53LX_decoded_nvm_fmt_range_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_ipp_hist_process_dataEP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP33VL53LX_hist_post_process_config_tP27VL53LX_histogram_bin_data_tP29VL53LX_xtalk_histogram_data_tPhSA_SA_P22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_ipp_hist_process_data(
        this: *mut VL53LX,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_xtalk_histogram_data_t,
        pArea1: *mut u8,
        pArea2: *mut u8,
        phisto_merge_nb: *mut u8,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_ipp_hist_ambient_dmaxEtP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP27VL53LX_histogram_bin_data_tPs"]
    fn VL53LX_VL53LX_ipp_hist_ambient_dmax(
        this: *mut VL53LX,
        target_reflectance: u16,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_ipp_xtalk_calibration_process_dataEP28VL53LX_xtalk_range_results_tP29VL53LX_xtalk_histogram_data_tP34VL53LX_xtalk_calibration_results_t"]
    fn VL53LX_VL53LX_ipp_xtalk_calibration_process_data(
        this: *mut VL53LX,
        pxtalk_ranges: *mut VL53LX_xtalk_range_results_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pxtalk_cal: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_ipp_hist_xtalk_correctionEP29VL53LX_customer_nvm_managed_tP23VL53LX_dynamic_config_tP29VL53LX_xtalk_histogram_data_tP27VL53LX_histogram_bin_data_tS7_S7_"]
    fn VL53LX_VL53LX_ipp_hist_xtalk_correction(
        this: *mut VL53LX,
        pcustomer: *mut VL53LX_customer_nvm_managed_t,
        pdyn_cfg: *mut VL53LX_dynamic_config_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pip_hist_data: *mut VL53LX_histogram_bin_data_t,
        pop_hist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_count_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX50VL53LX_ipp_generate_dual_reflectance_xtalk_samplesEP28VL53LX_xtalk_range_results_tthP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_ipp_generate_dual_reflectance_xtalk_samples(
        this: *mut VL53LX,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        expected_target_distance_mm: u16,
        higher_reflectance: u8,
        pxtalk_avg_samples: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_hist_process_dataEP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP33VL53LX_hist_post_process_config_tP27VL53LX_histogram_bin_data_tP29VL53LX_xtalk_histogram_data_tPhSA_P22VL53LX_range_results_tSA_"]
    fn VL53LX_VL53LX_hist_process_data(
        this: *mut VL53LX,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_xtalk_histogram_data_t,
        pArea1: *mut u8,
        pArea2: *mut u8,
        presults: *mut VL53LX_range_results_t,
        HistMergeNumber: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_hist_ambient_dmaxEtP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP27VL53LX_histogram_bin_data_tPs"]
    fn VL53LX_VL53LX_hist_ambient_dmax(
        this: *mut VL53LX,
        target_reflectance: u16,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_calc_pll_period_usEt"]
    fn VL53LX_VL53LX_calc_pll_period_us(this: *mut VL53LX, fast_osc_frequency: u16) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_duration_mathsEjjjj"]
    fn VL53LX_VL53LX_duration_maths(
        this: *mut VL53LX,
        pll_period_us: u32,
        vcsel_parm_pclks: u32,
        window_vclks: u32,
        periods_elapsed_mclks: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX28VL53LX_events_per_spad_mathsEitj"]
    fn VL53LX_VL53LX_events_per_spad_maths(
        this: *mut VL53LX,
        VL53LX_p_010: i32,
        num_spads: u16,
        duration: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_isqrtEj"]
    fn VL53LX_VL53LX_isqrt(this: *mut VL53LX, num: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_hist_calc_zero_distance_phaseEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_calc_zero_distance_phase(
        this: *mut VL53LX,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX50VL53LX_hist_estimate_ambient_from_thresholded_binsEiP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_estimate_ambient_from_thresholded_bins(
        this: *mut VL53LX,
        ambient_threshold_sigma: i32,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_hist_remove_ambient_binsEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_remove_ambient_bins(
        this: *mut VL53LX,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_calc_pll_period_mmEt"]
    fn VL53LX_VL53LX_calc_pll_period_mm(this: *mut VL53LX, fast_osc_frequency: u16) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_rate_mathsEij"]
    fn VL53LX_VL53LX_rate_maths(this: *mut VL53LX, VL53LX_p_018: i32, time_us: u32) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_rate_per_spad_mathsEjjtj"]
    fn VL53LX_VL53LX_rate_per_spad_maths(
        this: *mut VL53LX,
        frac_bits: u32,
        peak_count_rate: u32,
        num_spads: u16,
        max_output_value: u32,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX18VL53LX_range_mathsEttthii"]
    fn VL53LX_VL53LX_range_maths(
        this: *mut VL53LX,
        fast_osc_frequency: u16,
        VL53LX_p_014: u16,
        zero_distance_phase: u16,
        fractional_bits: u8,
        gain_factor: i32,
        range_offset_mm: i32,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_decode_vcsel_periodEh"]
    fn VL53LX_VL53LX_decode_vcsel_period(this: *mut VL53LX, vcsel_period_reg: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX51VL53LX_copy_xtalk_bin_data_to_histogram_data_structEP30VL53LX_xtalk_histogram_shape_tP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
        this: *mut VL53LX,
        pxtalk: *mut VL53LX_xtalk_histogram_shape_t,
        phist: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_init_histogram_bin_data_structEitP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_init_histogram_bin_data_struct(
        this: *mut VL53LX,
        bin_value: i32,
        VL53LX_p_021: u16,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_decode_row_colEhPhS0_"]
    fn VL53LX_VL53LX_decode_row_col(
        this: *mut VL53LX,
        spad_number: u8,
        prow: *mut u8,
        pcol: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_hist_find_min_max_bin_valuesEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_find_min_max_bin_values(
        this: *mut VL53LX,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_hist_estimate_ambient_from_ambient_binsEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_estimate_ambient_from_ambient_bins(
        this: *mut VL53LX,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX19VL53LX_init_versionEv"]
    fn VL53LX_VL53LX_init_version(this: *mut VL53LX);
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_init_ll_driver_stateEh"]
    fn VL53LX_VL53LX_init_ll_driver_state(this: *mut VL53LX, ll_state: VL53LX_DeviceState);
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_update_ll_driver_rd_stateEv"]
    fn VL53LX_VL53LX_update_ll_driver_rd_state(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_check_ll_driver_rd_stateEv"]
    fn VL53LX_VL53LX_check_ll_driver_rd_state(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_update_ll_driver_cfg_stateEv"]
    fn VL53LX_VL53LX_update_ll_driver_cfg_state(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_copy_rtn_good_spads_to_bufferEP22VL53LX_nvm_copy_data_tPh"]
    fn VL53LX_VL53LX_copy_rtn_good_spads_to_buffer(
        this: *mut VL53LX,
        pdata: *mut VL53LX_nvm_copy_data_t,
        pbuffer: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_init_system_resultsEP23VL53LX_system_results_t"]
    fn VL53LX_VL53LX_init_system_results(
        this: *mut VL53LX,
        pdata: *mut VL53LX_system_results_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33V53L1_init_zone_results_structureEhP21VL53LX_zone_results_t"]
    fn VL53LX_V53L1_init_zone_results_structure(
        this: *mut VL53LX,
        active_zones: u8,
        pdata: *mut VL53LX_zone_results_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27V53L1_init_zone_dss_configsEv"]
    fn VL53LX_V53L1_init_zone_dss_configs(this: *mut VL53LX);
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_init_histogram_config_structureEhhhhhhhhhhhhP25VL53LX_histogram_config_t"]
    fn VL53LX_VL53LX_init_histogram_config_structure(
        this: *mut VL53LX,
        even_bin0: u8,
        even_bin1: u8,
        even_bin2: u8,
        even_bin3: u8,
        even_bin4: u8,
        even_bin5: u8,
        odd_bin0: u8,
        odd_bin1: u8,
        odd_bin2: u8,
        odd_bin3: u8,
        odd_bin4: u8,
        odd_bin5: u8,
        pdata: *mut VL53LX_histogram_config_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX48VL53LX_init_histogram_multizone_config_structureEhhhhhhhhhhhhP25VL53LX_histogram_config_t"]
    fn VL53LX_VL53LX_init_histogram_multizone_config_structure(
        this: *mut VL53LX,
        even_bin0: u8,
        even_bin1: u8,
        even_bin2: u8,
        even_bin3: u8,
        even_bin4: u8,
        even_bin5: u8,
        odd_bin0: u8,
        odd_bin1: u8,
        odd_bin2: u8,
        odd_bin3: u8,
        odd_bin4: u8,
        odd_bin5: u8,
        pdata: *mut VL53LX_histogram_config_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_init_xtalk_bin_data_structEjtP30VL53LX_xtalk_histogram_shape_t"]
    fn VL53LX_VL53LX_init_xtalk_bin_data_struct(
        this: *mut VL53LX,
        bin_value: u32,
        VL53LX_p_021: u16,
        pdata: *mut VL53LX_xtalk_histogram_shape_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_i2c_encode_uint16_tEttPh"]
    fn VL53LX_VL53LX_i2c_encode_uint16_t(
        this: *mut VL53LX,
        ip_value: u16,
        count: u16,
        pbuffer: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_i2c_decode_uint16_tEtPh"]
    fn VL53LX_VL53LX_i2c_decode_uint16_t(
        this: *mut VL53LX,
        count: u16,
        pbuffer: *mut u8,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_i2c_encode_int16_tEstPh"]
    fn VL53LX_VL53LX_i2c_encode_int16_t(
        this: *mut VL53LX,
        ip_value: i16,
        count: u16,
        pbuffer: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_i2c_decode_int16_tEtPh"]
    fn VL53LX_VL53LX_i2c_decode_int16_t(this: *mut VL53LX, count: u16, pbuffer: *mut u8)
        -> i16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_i2c_encode_uint32_tEjtPh"]
    fn VL53LX_VL53LX_i2c_encode_uint32_t(
        this: *mut VL53LX,
        ip_value: u32,
        count: u16,
        pbuffer: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_i2c_decode_uint32_tEtPh"]
    fn VL53LX_VL53LX_i2c_decode_uint32_t(
        this: *mut VL53LX,
        count: u16,
        pbuffer: *mut u8,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_i2c_decode_with_maskEtPhjjj"]
    fn VL53LX_VL53LX_i2c_decode_with_mask(
        this: *mut VL53LX,
        count: u16,
        pbuffer: *mut u8,
        bit_mask: u32,
        down_shift: u32,
        offset: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_i2c_encode_int32_tEitPh"]
    fn VL53LX_VL53LX_i2c_encode_int32_t(
        this: *mut VL53LX,
        ip_value: i32,
        count: u16,
        pbuffer: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_i2c_decode_int32_tEtPh"]
    fn VL53LX_VL53LX_i2c_decode_int32_t(this: *mut VL53LX, count: u16, pbuffer: *mut u8)
        -> i32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_start_testEh"]
    fn VL53LX_VL53LX_start_test(this: *mut VL53LX, test_mode__ctrl: u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_set_firmware_enable_registerEh"]
    fn VL53LX_VL53LX_set_firmware_enable_register(this: *mut VL53LX, value: u8)
        -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_enable_firmwareEv"]
    fn VL53LX_VL53LX_enable_firmware(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_disable_firmwareEv"]
    fn VL53LX_VL53LX_disable_firmware(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_set_powerforce_registerEh"]
    fn VL53LX_VL53LX_set_powerforce_register(this: *mut VL53LX, value: u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_enable_powerforceEv"]
    fn VL53LX_VL53LX_enable_powerforce(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_disable_powerforceEv"]
    fn VL53LX_VL53LX_disable_powerforce(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_clear_interruptEv"]
    fn VL53LX_VL53LX_clear_interrupt(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_force_shadow_stream_count_to_zeroEv"]
    fn VL53LX_VL53LX_force_shadow_stream_count_to_zero(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_calc_macro_period_usEth"]
    fn VL53LX_VL53LX_calc_macro_period_us(
        this: *mut VL53LX,
        fast_osc_frequency: u16,
        VL53LX_p_005: u8,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_calc_range_ignore_thresholdEjssh"]
    fn VL53LX_VL53LX_calc_range_ignore_threshold(
        this: *mut VL53LX,
        central_rate: u32,
        x_gradient: i16,
        y_gradient: i16,
        rate_mult: u8,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_calc_timeout_mclksEjj"]
    fn VL53LX_VL53LX_calc_timeout_mclks(
        this: *mut VL53LX,
        timeout_us: u32,
        macro_period_us: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_calc_encoded_timeoutEjj"]
    fn VL53LX_VL53LX_calc_encoded_timeout(
        this: *mut VL53LX,
        timeout_us: u32,
        macro_period_us: u32,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_calc_timeout_usEjj"]
    fn VL53LX_VL53LX_calc_timeout_us(
        this: *mut VL53LX,
        timeout_mclks: u32,
        macro_period_us: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_calc_decoded_timeout_usEtj"]
    fn VL53LX_VL53LX_calc_decoded_timeout_us(
        this: *mut VL53LX,
        timeout_encoded: u16,
        macro_period_us: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_encode_timeoutEj"]
    fn VL53LX_VL53LX_encode_timeout(this: *mut VL53LX, timeout_mclks: u32) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_decode_timeoutEt"]
    fn VL53LX_VL53LX_decode_timeout(this: *mut VL53LX, encoded_timeout: u16) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_calc_timeout_register_valuesEjjjtP23VL53LX_general_config_tP22VL53LX_timing_config_t"]
    fn VL53LX_VL53LX_calc_timeout_register_values(
        this: *mut VL53LX,
        phasecal_config_timeout_us: u32,
        mm_config_timeout_us: u32,
        range_config_timeout_us: u32,
        fast_osc_frequency: u16,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_encode_vcsel_periodEh"]
    fn VL53LX_VL53LX_encode_vcsel_period(this: *mut VL53LX, VL53LX_p_030: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_decode_unsigned_integerEPhh"]
    fn VL53LX_VL53LX_decode_unsigned_integer(
        this: *mut VL53LX,
        pbuffer: *mut u8,
        no_of_bytes: u8,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_encode_unsigned_integerEjhPh"]
    fn VL53LX_VL53LX_encode_unsigned_integer(
        this: *mut VL53LX,
        ip_value: u32,
        no_of_bytes: u8,
        pbuffer: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_hist_copy_and_scale_ambient_infoEP23VL53LX_zone_hist_info_tP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_copy_and_scale_ambient_info(
        this: *mut VL53LX,
        pidata: *mut VL53LX_zone_hist_info_t,
        podata: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_hist_get_bin_sequence_configEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_hist_get_bin_sequence_config(
        this: *mut VL53LX,
        pdata: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_hist_phase_consistency_checkEP23VL53LX_zone_hist_info_tP21VL53LX_zone_objects_tP22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_hist_phase_consistency_check(
        this: *mut VL53LX,
        phist_prev: *mut VL53LX_zone_hist_info_t,
        prange_prev: *mut VL53LX_zone_objects_t,
        prange_curr: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_hist_events_consistency_checkEhtP23VL53LX_zone_hist_info_tP20VL53LX_object_data_tP19VL53LX_range_data_tPiS6_Ph"]
    fn VL53LX_VL53LX_hist_events_consistency_check(
        this: *mut VL53LX,
        event_sigma: u8,
        min_effective_spad_count: u16,
        phist_prev: *mut VL53LX_zone_hist_info_t,
        prange_prev: *mut VL53LX_object_data_t,
        prange_curr: *mut VL53LX_range_data_t,
        pevents_tolerance: *mut i32,
        pevents_delta: *mut i32,
        prange_status: *mut VL53LX_DeviceError,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_hist_merged_pulse_checkEsP19VL53LX_range_data_tPh"]
    fn VL53LX_VL53LX_hist_merged_pulse_check(
        this: *mut VL53LX,
        min_max_tolerance_mm: i16,
        pdata: *mut VL53LX_range_data_t,
        prange_status: *mut VL53LX_DeviceError,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_hist_xmonitor_consistency_checkEP23VL53LX_zone_hist_info_tP21VL53LX_zone_objects_tP19VL53LX_range_data_t"]
    fn VL53LX_VL53LX_hist_xmonitor_consistency_check(
        this: *mut VL53LX,
        phist_prev: *mut VL53LX_zone_hist_info_t,
        prange_prev: *mut VL53LX_zone_objects_t,
        prange_curr: *mut VL53LX_range_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_hist_wrap_dmaxEP33VL53LX_hist_post_process_config_tP27VL53LX_histogram_bin_data_tPs"]
    fn VL53LX_VL53LX_hist_wrap_dmax(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pcurrent: *mut VL53LX_histogram_bin_data_t,
        pwrap_dmax_mm: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_hist_combine_mm1_mm2_offsetsEsshhhhP35VL53LX_additional_offset_cal_data_tPhtPs"]
    fn VL53LX_VL53LX_hist_combine_mm1_mm2_offsets(
        this: *mut VL53LX,
        mm1_offset_mm: i16,
        mm2_offset_mm: i16,
        encoded_mm_roi_centre: u8,
        encoded_mm_roi_size: u8,
        encoded_zone_centre: u8,
        encoded_zone_size: u8,
        pcal_data: *mut VL53LX_additional_offset_cal_data_t,
        pgood_spads: *mut u8,
        aperture_attenuation: u16,
        prange_offset_mm: *mut i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_hist_xtalk_extract_calc_windowEstP27VL53LX_histogram_bin_data_tP32VL53LX_hist_xtalk_extract_data_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_calc_window(
        this: *mut VL53LX,
        target_distance_mm: i16,
        target_width_oversize: u16,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_hist_xtalk_extract_calc_event_sumsEP27VL53LX_histogram_bin_data_tP32VL53LX_hist_xtalk_extract_data_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_calc_event_sums(
        this: *mut VL53LX,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_hist_xtalk_extract_calc_rate_per_spadEP32VL53LX_hist_xtalk_extract_data_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_calc_rate_per_spad(
        this: *mut VL53LX,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_hist_xtalk_extract_calc_shapeEP32VL53LX_hist_xtalk_extract_data_tP30VL53LX_xtalk_histogram_shape_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_calc_shape(
        this: *mut VL53LX,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_hist_xtalk_shape_modelEtttP30VL53LX_xtalk_histogram_shape_t"]
    fn VL53LX_VL53LX_hist_xtalk_shape_model(
        this: *mut VL53LX,
        events_per_bin: u16,
        pulse_centre: u16,
        pulse_width: u16,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_hist_xtalk_shape_model_interpEtj"]
    fn VL53LX_VL53LX_hist_xtalk_shape_model_interp(
        this: *mut VL53LX,
        events_per_bin: u16,
        phase_delta: u32,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_spad_number_to_byte_bit_indexEhPhS0_S0_"]
    fn VL53LX_VL53LX_spad_number_to_byte_bit_index(
        this: *mut VL53LX,
        spad_number: u8,
        pbyte_index: *mut u8,
        pbit_index: *mut u8,
        pbit_mask: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_encode_row_colEhhPh"]
    fn VL53LX_VL53LX_encode_row_col(this: *mut VL53LX, row: u8, col: u8, pspad_number: *mut u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_decode_zone_sizeEhPhS0_"]
    fn VL53LX_VL53LX_decode_zone_size(
        this: *mut VL53LX,
        encoded_xy_size: u8,
        pwidth: *mut u8,
        pheight: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_encode_zone_sizeEhhPh"]
    fn VL53LX_VL53LX_encode_zone_size(
        this: *mut VL53LX,
        width: u8,
        height: u8,
        pencoded_xy_size: *mut u8,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_decode_zone_limitsEhhPsS0_S0_S0_"]
    fn VL53LX_VL53LX_decode_zone_limits(
        this: *mut VL53LX,
        encoded_xy_centre: u8,
        encoded_xy_size: u8,
        px_ll: *mut i16,
        py_ll: *mut i16,
        px_ur: *mut i16,
        py_ur: *mut i16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_is_aperture_locationEhh"]
    fn VL53LX_VL53LX_is_aperture_location(this: *mut VL53LX, row: u8, col: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_calc_max_effective_spadsEhhPhtPt"]
    fn VL53LX_VL53LX_calc_max_effective_spads(
        this: *mut VL53LX,
        encoded_zone_centre: u8,
        encoded_zone_size: u8,
        pgood_spads: *mut u8,
        aperture_attenuation: u16,
        pmax_effective_spads: *mut u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_calc_mm_effective_spadsEhhhhPhtPtS1_"]
    fn VL53LX_VL53LX_calc_mm_effective_spads(
        this: *mut VL53LX,
        encoded_mm_roi_centre: u8,
        encoded_mm_roi_size: u8,
        encoded_zone_centre: u8,
        encoded_zone_size: u8,
        pgood_spads: *mut u8,
        aperture_attenuation: u16,
        pmm_inner_effective_spads: *mut u16,
        pmm_outer_effective_spads: *mut u16,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_hist_copy_results_to_sys_and_coreEP27VL53LX_histogram_bin_data_tP22VL53LX_range_results_tP23VL53LX_system_results_tP21VL53LX_core_results_t"]
    fn VL53LX_VL53LX_hist_copy_results_to_sys_and_core(
        this: *mut VL53LX,
        pbins: *mut VL53LX_histogram_bin_data_t,
        phist: *mut VL53LX_range_results_t,
        psys: *mut VL53LX_system_results_t,
        pcore: *mut VL53LX_core_results_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_sum_histogram_dataEP27VL53LX_histogram_bin_data_tS1_"]
    fn VL53LX_VL53LX_sum_histogram_data(
        this: *mut VL53LX,
        phist_input: *mut VL53LX_histogram_bin_data_t,
        phist_output: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_avg_histogram_dataEhP27VL53LX_histogram_bin_data_tS1_"]
    fn VL53LX_VL53LX_avg_histogram_data(
        this: *mut VL53LX,
        no_of_samples: u8,
        phist_sum: *mut VL53LX_histogram_bin_data_t,
        phist_avg: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX20VL53LX_save_cfg_dataEv"]
    fn VL53LX_VL53LX_save_cfg_data(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_dynamic_zone_updateEP22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_dynamic_zone_update(
        this: *mut VL53LX,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_update_internal_stream_countersEhPhS0_"]
    fn VL53LX_VL53LX_update_internal_stream_counters(
        this: *mut VL53LX,
        external_stream_count: u8,
        pinternal_stream_count: *mut u8,
        pinternal_stream_count_val: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_multizone_hist_bins_updateEv"]
    fn VL53LX_VL53LX_multizone_hist_bins_update(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX49VL53LX_set_histogram_multizone_initial_bin_configEP20VL53LX_zone_config_tP25VL53LX_histogram_config_tS3_"]
    fn VL53LX_VL53LX_set_histogram_multizone_initial_bin_config(
        this: *mut VL53LX,
        pzone_cfg: *mut VL53LX_zone_config_t,
        phist_cfg: *mut VL53LX_histogram_config_t,
        pmulti_hist: *mut VL53LX_histogram_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_encode_GPIO_interrupt_configEP30VL53LX_GPIO_interrupt_config_t"]
    fn VL53LX_VL53LX_encode_GPIO_interrupt_config(
        this: *mut VL53LX,
        pintconf: *mut VL53LX_GPIO_interrupt_config_t,
    ) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_decode_GPIO_interrupt_configEh"]
    fn VL53LX_VL53LX_decode_GPIO_interrupt_config(
        this: *mut VL53LX,
        system__interrupt_config: u8,
    ) -> VL53LX_GPIO_interrupt_config_t;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_set_GPIO_distance_thresholdEtt"]
    fn VL53LX_VL53LX_set_GPIO_distance_threshold(
        this: *mut VL53LX,
        threshold_high: u16,
        threshold_low: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_set_GPIO_rate_thresholdEtt"]
    fn VL53LX_VL53LX_set_GPIO_rate_threshold(
        this: *mut VL53LX,
        threshold_high: u16,
        threshold_low: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_set_GPIO_thresholds_from_structEP30VL53LX_GPIO_interrupt_config_t"]
    fn VL53LX_VL53LX_set_GPIO_thresholds_from_struct(
        this: *mut VL53LX,
        pintconf: *mut VL53LX_GPIO_interrupt_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_set_ref_spad_char_configEhjtttt"]
    fn VL53LX_VL53LX_set_ref_spad_char_config(
        this: *mut VL53LX,
        vcsel_period_a: u8,
        phasecal_timeout_us: u32,
        total_rate_target_mcps: u16,
        max_count_rate_rtn_limit_mcps: u16,
        min_count_rate_rtn_limit_mcps: u16,
        fast_osc_frequency: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX21VL53LX_set_ssc_configEP19VL53LX_ssc_config_tt"]
    fn VL53LX_VL53LX_set_ssc_config(
        this: *mut VL53LX,
        pssc_cfg: *mut VL53LX_ssc_config_t,
        fast_osc_frequency: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX25VL53LX_get_spad_rate_dataEP23VL53LX_spad_rate_data_t"]
    fn VL53LX_VL53LX_get_spad_rate_data(
        this: *mut VL53LX,
        pspad_rates: *mut VL53LX_spad_rate_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_calc_crosstalk_plane_offset_with_marginEjs"]
    fn VL53LX_VL53LX_calc_crosstalk_plane_offset_with_margin(
        this: *mut VL53LX,
        plane_offset_kcps: u32,
        margin_offset_kcps: i16,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_low_power_auto_data_initEv"]
    fn VL53LX_VL53LX_low_power_auto_data_init(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_low_power_auto_data_stop_rangeEv"]
    fn VL53LX_VL53LX_low_power_auto_data_stop_range(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX53VL53LX_dynamic_xtalk_correction_calc_required_samplesEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_calc_required_samples(
        this: *mut VL53LX,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_dynamic_xtalk_correction_calc_new_xtalkEjP32VL53LX_smudge_corrector_config_tP30VL53LX_smudge_corrector_data_thh"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
        this: *mut VL53LX,
        xtalk_offset_out: u32,
        pconfig: *mut VL53LX_smudge_corrector_config_t,
        pout: *mut VL53LX_smudge_corrector_data_t,
        add_smudge: u8,
        soft_update: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_dynamic_xtalk_correction_correctorEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_corrector(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_dynamic_xtalk_correction_data_initEv"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_data_init(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_dynamic_xtalk_correction_output_initEP24VL53LX_LLDriverResults_t"]
    fn VL53LX_VL53LX_dynamic_xtalk_correction_output_init(
        this: *mut VL53LX,
        pres: *mut VL53LX_LLDriverResults_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX26VL53LX_xtalk_cal_data_initEv"]
    fn VL53LX_VL53LX_xtalk_cal_data_init(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_config_low_power_auto_modeEP23VL53LX_general_config_tP23VL53LX_dynamic_config_tP28VL53LX_low_power_auto_data_t"]
    fn VL53LX_VL53LX_config_low_power_auto_mode(
        this: *mut VL53LX,
        pgeneral: *mut VL53LX_general_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_low_power_auto_setup_manual_calibrationEv"]
    fn VL53LX_VL53LX_low_power_auto_setup_manual_calibration(this: *mut VL53LX)
        -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_low_power_auto_update_DSSEv"]
    fn VL53LX_VL53LX_low_power_auto_update_DSS(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_compute_histo_merge_nbEPh"]
    fn VL53LX_VL53LX_compute_histo_merge_nb(
        this: *mut VL53LX,
        histo_merge_nb: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_wait_for_boot_completionEv"]
    fn VL53LX_VL53LX_wait_for_boot_completion(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_wait_for_firmware_readyEv"]
    fn VL53LX_VL53LX_wait_for_firmware_ready(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_wait_for_range_completionEv"]
    fn VL53LX_VL53LX_wait_for_range_completion(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_wait_for_test_completionEv"]
    fn VL53LX_VL53LX_wait_for_test_completion(this: *mut VL53LX) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23VL53LX_is_boot_completeEPh"]
    fn VL53LX_VL53LX_is_boot_complete(this: *mut VL53LX, pready: *mut u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_is_firmware_readyEPh"]
    fn VL53LX_VL53LX_is_firmware_ready(this: *mut VL53LX, pready: *mut u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_is_new_data_readyEPh"]
    fn VL53LX_VL53LX_is_new_data_ready(this: *mut VL53LX, pready: *mut u8) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_poll_for_boot_completionEj"]
    fn VL53LX_VL53LX_poll_for_boot_completion(
        this: *mut VL53LX,
        timeout_ms: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_poll_for_firmware_readyEj"]
    fn VL53LX_VL53LX_poll_for_firmware_ready(
        this: *mut VL53LX,
        timeout_ms: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_poll_for_range_completionEj"]
    fn VL53LX_VL53LX_poll_for_range_completion(
        this: *mut VL53LX,
        timeout_ms: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX33VL53LX_init_zone_config_structureEhhhhhhhhP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_init_zone_config_structure(
        this: *mut VL53LX,
        x_off: u8,
        x_inc: u8,
        x_zones: u8,
        y_off: u8,
        y_inc: u8,
        y_zones: u8,
        width: u8,
        height: u8,
        pdata: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_zone_preset_xtalk_planarEP23VL53LX_general_config_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_zone_preset_xtalk_planar(
        this: *mut VL53LX,
        pgeneral: *mut VL53LX_general_config_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_init_zone_config_histogram_binsEP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_init_zone_config_histogram_bins(
        this: *mut VL53LX,
        pdata: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_init_refspadchar_config_structEP27VL53LX_refspadchar_config_t"]
    fn VL53LX_VL53LX_init_refspadchar_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_refspadchar_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_init_ssc_config_structEP19VL53LX_ssc_config_t"]
    fn VL53LX_VL53LX_init_ssc_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_ssc_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX31VL53LX_init_xtalk_config_structEP29VL53LX_customer_nvm_managed_tP21VL53LX_xtalk_config_t"]
    fn VL53LX_VL53LX_init_xtalk_config_struct(
        this: *mut VL53LX,
        pnvm: *mut VL53LX_customer_nvm_managed_t,
        pdata: *mut VL53LX_xtalk_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_init_xtalk_extract_config_structEP28VL53LX_xtalkextract_config_t"]
    fn VL53LX_VL53LX_init_xtalk_extract_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_xtalkextract_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_init_offset_cal_config_structEP25VL53LX_offsetcal_config_t"]
    fn VL53LX_VL53LX_init_offset_cal_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_offsetcal_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_init_zone_cal_config_structEP23VL53LX_zonecal_config_t"]
    fn VL53LX_VL53LX_init_zone_cal_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_zonecal_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_init_hist_post_process_config_structEhP33VL53LX_hist_post_process_config_t"]
    fn VL53LX_VL53LX_init_hist_post_process_config_struct(
        this: *mut VL53LX,
        xtalk_compensation_enable: u8,
        pdata: *mut VL53LX_hist_post_process_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_init_dmax_calibration_data_structEP30VL53LX_dmax_calibration_data_t"]
    fn VL53LX_VL53LX_init_dmax_calibration_data_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_dmax_calibration_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_init_tuning_parm_storage_structEP28VL53LX_tuning_parm_storage_t"]
    fn VL53LX_VL53LX_init_tuning_parm_storage_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_tuning_parm_storage_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_init_hist_gen3_dmax_config_structEP30VL53LX_hist_gen3_dmax_config_t"]
    fn VL53LX_VL53LX_init_hist_gen3_dmax_config_struct(
        this: *mut VL53LX,
        pdata: *mut VL53LX_hist_gen3_dmax_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_preset_mode_standard_rangingEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_standard_ranging(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX47VL53LX_preset_mode_standard_ranging_short_rangeEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_standard_ranging_short_range(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_preset_mode_standard_ranging_long_rangeEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_standard_ranging_long_range(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_preset_mode_standard_ranging_mm1_calEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_standard_ranging_mm1_cal(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_preset_mode_standard_ranging_mm2_calEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_standard_ranging_mm2_cal(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_preset_mode_timed_rangingEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_timed_ranging(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_preset_mode_timed_ranging_short_rangeEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_timed_ranging_short_range(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_preset_mode_timed_ranging_long_rangeEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_timed_ranging_long_range(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_preset_mode_low_power_auto_rangingEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_tP28VL53LX_low_power_auto_data_t"]
    fn VL53LX_VL53LX_preset_mode_low_power_auto_ranging(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX47VL53LX_preset_mode_low_power_auto_short_rangingEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_tP28VL53LX_low_power_auto_data_t"]
    fn VL53LX_VL53LX_preset_mode_low_power_auto_short_ranging(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_preset_mode_low_power_auto_long_rangingEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_tP28VL53LX_low_power_auto_data_t"]
    fn VL53LX_VL53LX_preset_mode_low_power_auto_long_ranging(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX36VL53LX_preset_mode_histogram_rangingEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_preset_mode_histogram_ranging_with_mm1EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging_with_mm1(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_preset_mode_histogram_ranging_with_mm2EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging_with_mm2(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_preset_mode_histogram_ranging_mm1_calEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging_mm1_cal(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_preset_mode_histogram_ranging_mm2_calEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging_mm2_cal(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_preset_mode_histogram_ranging_refEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging_ref(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_preset_mode_histogram_characterisationEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_characterisation(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_preset_mode_histogram_xtalk_planarEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_xtalk_planar(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_preset_mode_histogram_xtalk_mm1EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_xtalk_mm1(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_preset_mode_histogram_xtalk_mm2EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_xtalk_mm2(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX38VL53LX_preset_mode_histogram_multizoneEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_multizone(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX50VL53LX_preset_mode_histogram_multizone_short_rangeEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_multizone_short_range(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX49VL53LX_preset_mode_histogram_multizone_long_rangeEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_multizone_long_range(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX49VL53LX_preset_mode_histogram_ranging_short_timingEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_ranging_short_timing(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX39VL53LX_preset_mode_histogram_long_rangeEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_long_range(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX41VL53LX_preset_mode_histogram_medium_rangeEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_medium_range(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX40VL53LX_preset_mode_histogram_short_rangeEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_short_range(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX48VL53LX_preset_mode_special_histogram_short_rangeEP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_special_histogram_short_range(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_preset_mode_histogram_long_range_mm1EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_long_range_mm1(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX43VL53LX_preset_mode_histogram_long_range_mm2EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_long_range_mm2(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_preset_mode_histogram_medium_range_mm1EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_medium_range_mm1(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX45VL53LX_preset_mode_histogram_medium_range_mm2EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_medium_range_mm2(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_preset_mode_histogram_short_range_mm1EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_short_range_mm1(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX44VL53LX_preset_mode_histogram_short_range_mm2EP33VL53LX_hist_post_process_config_tP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_histogram_short_range_mm2(
        this: *mut VL53LX,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_preset_mode_oltEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_olt(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_preset_mode_singleshot_rangingEP22VL53LX_static_config_tP25VL53LX_histogram_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_tP23VL53LX_system_control_tP28VL53LX_tuning_parm_storage_tP20VL53LX_zone_config_t"]
    fn VL53LX_VL53LX_preset_mode_singleshot_ranging(
        this: *mut VL53LX,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX34VL53LX_copy_hist_cfg_to_static_cfgEP25VL53LX_histogram_config_tP22VL53LX_static_config_tP23VL53LX_general_config_tP22VL53LX_timing_config_tP23VL53LX_dynamic_config_t"]
    fn VL53LX_VL53LX_copy_hist_cfg_to_static_cfg(
        this: *mut VL53LX,
        phistogram: *mut VL53LX_histogram_config_t,
        pstatic: *mut VL53LX_static_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_copy_hist_bins_to_static_cfgEP25VL53LX_histogram_config_tP22VL53LX_static_config_tP22VL53LX_timing_config_t"]
    fn VL53LX_VL53LX_copy_hist_bins_to_static_cfg(
        this: *mut VL53LX,
        phistogram: *mut VL53LX_histogram_config_t,
        pstatic: *mut VL53LX_static_config_t,
        ptiming: *mut VL53LX_timing_config_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_is_firmware_ready_siliconEPh"]
    fn VL53LX_VL53LX_is_firmware_ready_silicon(
        this: *mut VL53LX,
        pready: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_022EhhP27VL53LX_histogram_bin_data_tPiS2_S2_"]
    fn VL53LX_VL53LX_f_022(
        this: *mut VL53LX,
        VL53LX_p_032: u8,
        filter_woi: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pa: *mut i32,
        pb: *mut i32,
        pc: *mut i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_018EttjtP19VL53LX_range_data_t"]
    fn VL53LX_VL53LX_f_018(
        this: *mut VL53LX,
        vcsel_width: u16,
        fast_osc_frequency: u16,
        total_periods_elapsed: u32,
        VL53LX_p_004: u16,
        pdata: *mut VL53LX_range_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_019EtsP19VL53LX_range_data_t"]
    fn VL53LX_VL53LX_f_019(
        this: *mut VL53LX,
        gain_factor: u16,
        range_offset_mm: i16,
        pdata: *mut VL53LX_range_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_029EP27VL53LX_histogram_bin_data_ti"]
    fn VL53LX_VL53LX_f_029(
        this: *mut VL53LX,
        pdata: *mut VL53LX_histogram_bin_data_t,
        ambient_estimate_counts_per_bin: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_005EP27VL53LX_histogram_bin_data_tS1_S1_"]
    fn VL53LX_VL53LX_f_005(
        this: *mut VL53LX,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_realigned: *mut VL53LX_histogram_bin_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_030EP27VL53LX_histogram_bin_data_tS1_"]
    fn VL53LX_VL53LX_f_030(
        this: *mut VL53LX,
        pdata1: *mut VL53LX_histogram_bin_data_t,
        pdata2: *mut VL53LX_histogram_bin_data_t,
    ) -> i8;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_031EP27VL53LX_histogram_bin_data_tS1_"]
    fn VL53LX_VL53LX_f_031(
        this: *mut VL53LX,
        pidata: *mut VL53LX_histogram_bin_data_t,
        podata: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37VL53LX_xtalk_calibration_process_dataEP28VL53LX_xtalk_range_results_tP29VL53LX_xtalk_histogram_data_tP34VL53LX_xtalk_calibration_results_t"]
    fn VL53LX_VL53LX_xtalk_calibration_process_data(
        this: *mut VL53LX,
        pxtalk_ranges: *mut VL53LX_xtalk_range_results_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pxtalk_cal: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_041EP27VL53LX_histogram_bin_data_tP24VL53LX_xtalk_algo_data_tP25VL53LX_xtalk_range_data_thhP30VL53LX_xtalk_histogram_shape_t"]
    fn VL53LX_VL53LX_f_041(
        this: *mut VL53LX,
        pavg_bins: *mut VL53LX_histogram_bin_data_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        pxtalk_data: *mut VL53LX_xtalk_range_data_t,
        histogram__window_start: u8,
        histogram__window_end: u8,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_039EP28VL53LX_xtalk_range_results_tP24VL53LX_xtalk_algo_data_tPsS4_"]
    fn VL53LX_VL53LX_f_039(
        this: *mut VL53LX,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        xgradient: *mut i16,
        ygradient: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_040EP25VL53LX_xtalk_range_data_tP24VL53LX_xtalk_algo_data_tPj"]
    fn VL53LX_VL53LX_f_040(
        this: *mut VL53LX,
        pxtalk_data: *mut VL53LX_xtalk_range_data_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        xtalk_mean_offset_kcps: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_045EP27VL53LX_histogram_bin_data_tP25VL53LX_xtalk_range_data_tP24VL53LX_xtalk_algo_data_tP30VL53LX_xtalk_histogram_shape_t"]
    fn VL53LX_VL53LX_f_045(
        this: *mut VL53LX,
        phist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_xtalk_range_data_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        pxtalk_histo: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_032EjssaathhPj"]
    fn VL53LX_VL53LX_f_032(
        this: *mut VL53LX,
        mean_offset: u32,
        xgradient: i16,
        ygradient: i16,
        centre_offset_x: i8,
        centre_offset_y: i8,
        roi_effective_spads: u16,
        roi_centre_spad: u8,
        roi_xy_size: u8,
        xtalk_rate_kcps: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_033EP27VL53LX_histogram_bin_data_tP30VL53LX_xtalk_histogram_shape_tjS1_"]
    fn VL53LX_VL53LX_f_033(
        this: *mut VL53LX,
        phist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_xtalk_histogram_shape_t,
        xtalk_rate_kcps: u32,
        pxtalkcount_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_047EP27VL53LX_histogram_bin_data_tS1_h"]
    fn VL53LX_VL53LX_f_047(
        this: *mut VL53LX,
        phist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_histogram_bin_data_t,
        xtalk_bin_offset: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_044EP27VL53LX_histogram_bin_data_tjhh"]
    fn VL53LX_VL53LX_f_044(
        this: *mut VL53LX,
        pxtalk_data: *mut VL53LX_histogram_bin_data_t,
        amb_threshold: u32,
        VL53LX_p_019: u8,
        VL53LX_p_024: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_046EP29VL53LX_customer_nvm_managed_tP23VL53LX_dynamic_config_tP29VL53LX_xtalk_histogram_data_tP27VL53LX_histogram_bin_data_tS7_S7_"]
    fn VL53LX_VL53LX_f_046(
        this: *mut VL53LX,
        pcustomer: *mut VL53LX_customer_nvm_managed_t,
        pdyn_cfg: *mut VL53LX_dynamic_config_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pip_hist_data: *mut VL53LX_histogram_bin_data_t,
        pop_hist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_count_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_043EhiPj"]
    fn VL53LX_VL53LX_f_043(
        this: *mut VL53LX,
        sigma_mult: u8,
        VL53LX_p_028: i32,
        ambient_noise: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX46VL53LX_generate_dual_reflectance_xtalk_samplesEP28VL53LX_xtalk_range_results_tthP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_VL53LX_generate_dual_reflectance_xtalk_samples(
        this: *mut VL53LX,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        expected_target_distance_mm: u16,
        higher_reflectance: u8,
        pxtalk_avg_samples: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_042EP27VL53LX_histogram_bin_data_tS1_thhS1_"]
    fn VL53LX_VL53LX_f_042(
        this: *mut VL53LX,
        pzone_avg_1: *mut VL53LX_histogram_bin_data_t,
        pzone_avg_2: *mut VL53LX_histogram_bin_data_t,
        expected_target_distance: u16,
        subtract_amb: u8,
        higher_reflectance: u8,
        pxtalk_output: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_034EhhhP19VL53LX_range_data_t"]
    fn VL53LX_VL53LX_f_034(
        this: *mut VL53LX,
        sigma_estimator__effective_pulse_width_ns: u8,
        sigma_estimator__effective_ambient_width_ns: u8,
        sigma_estimator__sigma_ref_mm: u8,
        pdata: *mut VL53LX_range_data_t,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_036EhhhP19VL53LX_range_data_t"]
    fn VL53LX_VL53LX_f_036(
        this: *mut VL53LX,
        sigma_estimator__effective_pulse_width_ns: u8,
        sigma_estimator__effective_ambient_width_ns: u8,
        sigma_estimator__sigma_ref_mm: u8,
        pdata: *mut VL53LX_range_data_t,
    ) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_037EhjjjjjjjjjtPt"]
    fn VL53LX_VL53LX_f_037(
        this: *mut VL53LX,
        sigma_estimator__sigma_ref_mm: u8,
        VL53LX_p_007: u32,
        VL53LX_p_032: u32,
        VL53LX_p_001: u32,
        a_zp: u32,
        c_zp: u32,
        bx: u32,
        ax_zp: u32,
        cx_zp: u32,
        VL53LX_p_028: u32,
        fast_osc_frequency: u16,
        psigma_est: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_023EhjjjjjjjjjtPt"]
    fn VL53LX_VL53LX_f_023(
        this: *mut VL53LX,
        sigma_estimator__sigma_ref_mm: u8,
        VL53LX_p_007: u32,
        VL53LX_p_032: u32,
        VL53LX_p_001: u32,
        a_zp: u32,
        c_zp: u32,
        bx: u32,
        ax_zp: u32,
        cx_zp: u32,
        VL53LX_p_028: u32,
        fast_osc_frequency: u16,
        psigma_est: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_038Emj"]
    fn VL53LX_VL53LX_f_038(this: *mut VL53LX, VL53LX_p_007: u64, size: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_035Ejj"]
    fn VL53LX_VL53LX_f_035(this: *mut VL53LX, VL53LX_p_007: u32, VL53LX_p_032: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_003EP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_003(this: *mut VL53LX, palgo: *mut VL53LX_hist_gen3_algo_private_data_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_004EP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP33VL53LX_hist_post_process_config_tP27VL53LX_histogram_bin_data_tS7_P36VL53LX_hist_gen3_algo_private_data_tP36VL53LX_hist_gen3_dmax_private_data_tP22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_f_004(
        this: *mut VL53LX,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pdmax_algo: *mut VL53LX_hist_gen3_dmax_private_data_t,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_006EtiihP27VL53LX_histogram_bin_data_tS1_P36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_006(
        this: *mut VL53LX,
        ambient_threshold_events_scaler: u16,
        ambient_threshold_sigma: i32,
        min_ambient_threshold_events: i32,
        algo__crosstalk_compensation_enable: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_007EP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_007(
        this: *mut VL53LX,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_008EP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_008(
        this: *mut VL53LX,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_009EP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_009(
        this: *mut VL53LX,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_016EhP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_016(
        this: *mut VL53LX,
        target_order: VL53LX_HistTargetOrder,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_010EhP27VL53LX_histogram_bin_data_tP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_010(
        this: *mut VL53LX,
        pulse_no: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_015EhhP27VL53LX_histogram_bin_data_tP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_015(
        this: *mut VL53LX,
        pulse_no: u8,
        clip_events: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_020EsshhP27VL53LX_histogram_bin_data_tPj"]
    fn VL53LX_VL53LX_f_020(
        this: *mut VL53LX,
        VL53LX_p_019: i16,
        VL53LX_p_024: i16,
        VL53LX_p_030: u8,
        clip_events: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pphase: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_011EhP27VL53LX_histogram_bin_data_tP36VL53LX_hist_gen3_algo_private_data_tiS1_"]
    fn VL53LX_VL53LX_f_011(
        this: *mut VL53LX,
        pulse_no: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pad_value: i32,
        ppulse: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_012EhP27VL53LX_histogram_bin_data_tP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_012(
        this: *mut VL53LX,
        pulse_no: u8,
        ppulse: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_013EhtP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_013(
        this: *mut VL53LX,
        pulse_no: u8,
        noise_threshold: u16,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_021EhiihPj"]
    fn VL53LX_VL53LX_f_021(
        this: *mut VL53LX,
        bin: u8,
        filta0: i32,
        filta1: i32,
        VL53LX_p_030: u8,
        pmedian_phase: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_014EhhhhhP27VL53LX_histogram_bin_data_tS1_S1_Pt"]
    fn VL53LX_VL53LX_f_014(
        this: *mut VL53LX,
        bin: u8,
        sigma_estimator__sigma_ref_mm: u8,
        VL53LX_p_030: u8,
        VL53LX_p_051: u8,
        crosstalk_compensation_enable: u8,
        phist_data_ap: *mut VL53LX_histogram_bin_data_t,
        phist_data_zp: *mut VL53LX_histogram_bin_data_t,
        pxtalk_hist: *mut VL53LX_histogram_bin_data_t,
        psigma_est: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_017EhhhtP27VL53LX_histogram_bin_data_tP24VL53LX_hist_pulse_data_tP19VL53LX_range_data_t"]
    fn VL53LX_VL53LX_f_017(
        this: *mut VL53LX,
        range_id: u8,
        valid_phase_low: u8,
        valid_phase_high: u8,
        sigma_thres: u16,
        pbins: *mut VL53LX_histogram_bin_data_t,
        ppulse: *mut VL53LX_hist_pulse_data_t,
        pdata: *mut VL53LX_range_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_024EP37VL53LX_hist_gen4_algo_filtered_data_t"]
    fn VL53LX_VL53LX_f_024(
        this: *mut VL53LX,
        palgo: *mut VL53LX_hist_gen4_algo_filtered_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_025EP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP33VL53LX_hist_post_process_config_tP27VL53LX_histogram_bin_data_tS7_P36VL53LX_hist_gen3_algo_private_data_tP37VL53LX_hist_gen4_algo_filtered_data_tP36VL53LX_hist_gen3_dmax_private_data_tP22VL53LX_range_results_t"]
    fn VL53LX_VL53LX_f_025(
        this: *mut VL53LX,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pfiltered: *mut VL53LX_hist_gen4_algo_filtered_data_t,
        pdmax_algo: *mut VL53LX_hist_gen3_dmax_private_data_t,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_026EhP27VL53LX_histogram_bin_data_tP36VL53LX_hist_gen3_algo_private_data_tP37VL53LX_hist_gen4_algo_filtered_data_t"]
    fn VL53LX_VL53LX_f_026(
        this: *mut VL53LX,
        pulse_no: u8,
        ppulse: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pfiltered: *mut VL53LX_hist_gen4_algo_filtered_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_027EhtP37VL53LX_hist_gen4_algo_filtered_data_tP36VL53LX_hist_gen3_algo_private_data_t"]
    fn VL53LX_VL53LX_f_027(
        this: *mut VL53LX,
        pulse_no: u8,
        noise_threshold: u16,
        pfiltered: *mut VL53LX_hist_gen4_algo_filtered_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_028EhiiiiiiihPj"]
    fn VL53LX_VL53LX_f_028(
        this: *mut VL53LX,
        bin: u8,
        VL53LX_p_007: i32,
        VL53LX_p_032: i32,
        VL53LX_p_001: i32,
        ax: i32,
        bx: i32,
        cx: i32,
        VL53LX_p_028: i32,
        VL53LX_p_030: u8,
        pmedian_phase: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_001EtP30VL53LX_dmax_calibration_data_tP30VL53LX_hist_gen3_dmax_config_tP27VL53LX_histogram_bin_data_tP36VL53LX_hist_gen3_dmax_private_data_tPs"]
    fn VL53LX_VL53LX_f_001(
        this: *mut VL53LX,
        target_reflectance: u16,
        pcal: *mut VL53LX_dmax_calibration_data_t,
        pcfg: *mut VL53LX_hist_gen3_dmax_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pdata: *mut VL53LX_hist_gen3_dmax_private_data_t,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX12VL53LX_f_002Ejjjj"]
    fn VL53LX_VL53LX_f_002(
        this: *mut VL53LX,
        events_threshold: u32,
        ref_signal_events: u32,
        ref_distance_mm: u32,
        signal_thresh_sigma: u32,
    ) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_run_ref_spad_charEPa"]
    fn VL53LX_VL53LX_run_ref_spad_char(
        this: *mut VL53LX,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_run_device_testEh"]
    fn VL53LX_VL53LX_run_device_test(
        this: *mut VL53LX,
        device_test_mode: VL53LX_DeviceTestMode,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24VL53LX_run_spad_rate_mapEhhjP23VL53LX_spad_rate_data_t"]
    fn VL53LX_VL53LX_run_spad_rate_map(
        this: *mut VL53LX,
        device_test_mode: VL53LX_DeviceTestMode,
        array_select: VL53LX_DeviceSscArray,
        ssc_config_timeout_us: u32,
        pspad_rate_data: *mut VL53LX_spad_rate_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_run_xtalk_extractionEPa"]
    fn VL53LX_VL53LX_run_xtalk_extraction(
        this: *mut VL53LX,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_get_and_avg_xtalk_samplesEhhssthhP28VL53LX_xtalk_range_results_tP27VL53LX_histogram_bin_data_tS3_"]
    fn VL53LX_VL53LX_get_and_avg_xtalk_samples(
        this: *mut VL53LX,
        num_of_samples: u8,
        measurement_mode: u8,
        xtalk_filter_thresh_max_mm: i16,
        xtalk_filter_thresh_min_mm: i16,
        xtalk_max_valid_rate_kcps: u16,
        xtalk_result_id: u8,
        xtalk_histo_id: u8,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        psum_histo: *mut VL53LX_histogram_bin_data_t,
        pavg_histo: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX29VL53LX_run_offset_calibrationEstPa"]
    fn VL53LX_VL53LX_run_offset_calibration(
        this: *mut VL53LX,
        cal_distance_mm: i16,
        cal_reflectance_pc: u16,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_run_phasecal_averageEhhtP22VL53LX_range_results_tPtS2_"]
    fn VL53LX_VL53LX_run_phasecal_average(
        this: *mut VL53LX,
        measurement_mode: u8,
        phasecal_result__vcsel_start: u8,
        phasecal_num_of_samples: u16,
        prange_results: *mut VL53LX_range_results_t,
        pphasecal_result__reference_phase: *mut u16,
        pzero_distance_phase: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX27VL53LX_run_zone_calibrationEhhP20VL53LX_zone_config_tstPa"]
    fn VL53LX_VL53LX_run_zone_calibration(
        this: *mut VL53LX,
        device_preset_mode: VL53LX_DevicePresetModes,
        zone_preset: VL53LX_DeviceZonePreset,
        pzone_cfg: *mut VL53LX_zone_config_t,
        cal_distance_mm: i16,
        cal_reflectance_pc: u16,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX35VL53LX_hist_xtalk_extract_data_initEP32VL53LX_hist_xtalk_extract_data_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_data_init(
        this: *mut VL53LX,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_hist_xtalk_extract_updateEstP27VL53LX_histogram_bin_data_tP32VL53LX_hist_xtalk_extract_data_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_update(
        this: *mut VL53LX,
        target_distance_mm: i16,
        target_width_oversize: u16,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX30VL53LX_hist_xtalk_extract_finiEP27VL53LX_histogram_bin_data_tP32VL53LX_hist_xtalk_extract_data_tP34VL53LX_xtalk_calibration_results_tP30VL53LX_xtalk_histogram_shape_t"]
    fn VL53LX_VL53LX_hist_xtalk_extract_fini(
        this: *mut VL53LX,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
        pxtalk_cal: *mut VL53LX_xtalk_calibration_results_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX32VL53LX_run_hist_xtalk_extractionEsPa"]
    fn VL53LX_VL53LX_run_hist_xtalk_extraction(
        this: *mut VL53LX,
        cal_distance_mm: i16,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23select_offset_per_vcselEP21VL53LX_LLDriverData_tPs"]
    fn VL53LX_select_offset_per_vcsel(
        this: *mut VL53LX,
        pdev: *mut VL53LX_LLDriverData_t,
        poffset: *mut i16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX24vl53lx_diff_histo_stddevEP21VL53LX_LLDriverData_tP27VL53LX_histogram_bin_data_thhhPi"]
    fn VL53LX_vl53lx_diff_histo_stddev(
        this: *mut VL53LX,
        pdev: *mut VL53LX_LLDriverData_t,
        pdata: *mut VL53LX_histogram_bin_data_t,
        timing: u8,
        HighIndex: u8,
        prev_pos: u8,
        pdiff_histo_stddev: *mut i32,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX18vl53lx_histo_mergeEP27VL53LX_histogram_bin_data_t"]
    fn VL53LX_vl53lx_histo_merge(this: *mut VL53LX, pdata: *mut VL53LX_histogram_bin_data_t);
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX23ComputeDevicePresetModeEhPh"]
    fn VL53LX_ComputeDevicePresetMode(
        this: *mut VL53LX,
        DistanceMode: VL53LX_DistanceModes,
        pDevicePresetMode: *mut VL53LX_DevicePresetModes,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17SetPresetModeL3CXEhj"]
    fn VL53LX_SetPresetModeL3CX(
        this: *mut VL53LX,
        DistanceMode: VL53LX_DistanceModes,
        inter_measurement_period_ms: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37SetInterMeasurementPeriodMilliSecondsEj"]
    fn VL53LX_SetInterMeasurementPeriodMilliSeconds(
        this: *mut VL53LX,
        InterMeasurementPeriodMilliSeconds: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX37GetInterMeasurementPeriodMilliSecondsEPj"]
    fn VL53LX_GetInterMeasurementPeriodMilliSeconds(
        this: *mut VL53LX,
        pInterMeasurementPeriodMilliSeconds: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX18ConvertStatusHistoEh"]
    fn VL53LX_ConvertStatusHisto(this: *mut VL53LX, FilteredRangeStatus: u8) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13SetTargetDataEhhP19VL53LX_range_data_tP24VL53LX_TargetRangeData_t"]
    fn VL53LX_SetTargetData(
        this: *mut VL53LX,
        active_results: u8,
        device_status: u8,
        presults_data: *mut VL53LX_range_data_t,
        pRangeData: *mut VL53LX_TargetRangeData_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX18SetMeasurementDataEP22VL53LX_range_results_tP25VL53LX_MultiRangingData_t"]
    fn VL53LX_SetMeasurementData(
        this: *mut VL53LX,
        presults: *mut VL53LX_range_results_t,
        pMultiRangingData: *mut VL53LX_MultiRangingData_t,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_WrByteEP12VL53LX_Dev_tth"]
    fn VL53LX_VL53LX_WrByte(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        data: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_WrWordEP12VL53LX_Dev_ttt"]
    fn VL53LX_VL53LX_WrWord(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        data: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX14VL53LX_WrDWordEP12VL53LX_Dev_ttj"]
    fn VL53LX_VL53LX_WrDWord(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        data: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_RdByteEP12VL53LX_Dev_ttPh"]
    fn VL53LX_VL53LX_RdByte(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        data: *mut u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_RdWordEP12VL53LX_Dev_ttPt"]
    fn VL53LX_VL53LX_RdWord(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        data: *mut u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX14VL53LX_RdDWordEP12VL53LX_Dev_ttPj"]
    fn VL53LX_VL53LX_RdDWord(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        data: *mut u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_UpdateByteEP12VL53LX_Dev_tthh"]
    fn VL53LX_VL53LX_UpdateByte(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        AndData: u8,
        OrData: u8,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX17VL53LX_WriteMultiEP12VL53LX_Dev_ttPhj"]
    fn VL53LX_VL53LX_WriteMulti(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        pdata: *mut u8,
        count: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX16VL53LX_ReadMultiEP12VL53LX_Dev_ttPhj"]
    fn VL53LX_VL53LX_ReadMulti(
        this: *mut VL53LX,
        Dev: VL53LX_DEV,
        index: u16,
        pdata: *mut u8,
        count: u32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX15VL53LX_I2CWriteEhtPht"]
    fn VL53LX_VL53LX_I2CWrite(
        this: *mut VL53LX,
        DeviceAddr: u8,
        RegisterAddr: u16,
        pBuffer: *mut u8,
        NumByteToWrite: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX14VL53LX_I2CReadEhtPht"]
    fn VL53LX_VL53LX_I2CRead(
        this: *mut VL53LX,
        DeviceAddr: u8,
        RegisterAddr: u16,
        pBuffer: *mut u8,
        NumByteToRead: u16,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX19VL53LX_GetTickCountEPj"]
    fn VL53LX_VL53LX_GetTickCount(this: *mut VL53LX, ptick_count_ms: *mut u32) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_WaitUsEP12VL53LX_Dev_ti"]
    fn VL53LX_VL53LX_WaitUs(
        this: *mut VL53LX,
        pdev: *mut VL53LX_Dev_t,
        wait_us: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX13VL53LX_WaitMsEP12VL53LX_Dev_ti"]
    fn VL53LX_VL53LX_WaitMs(
        this: *mut VL53LX,
        pdev: *mut VL53LX_Dev_t,
        wait_ms: i32,
    ) -> VL53LX_Error;
}
extern "C" {
    #[link_name = "\u{1}_ZN6VL53LX22VL53LX_WaitValueMaskExEP12VL53LX_Dev_tjthhj"]
    fn VL53LX_VL53LX_WaitValueMaskEx(
        this: *mut VL53LX,
        pdev: *mut VL53LX_Dev_t,
        timeout_ms: u32,
        index: u16,
        value: u8,
        mask: u8,
        poll_delay_ms: u32,
    ) -> VL53LX_Error;
}
impl VL53LX {
    #[inline]
    unsafe fn VL53LX_GetVersion(&mut self, pVersion: *mut VL53LX_Version_t) -> VL53LX_Error {
        VL53LX_VL53LX_GetVersion(self, pVersion)
    }
    #[inline]
    unsafe fn VL53LX_GetProductRevision(
        &mut self,
        pProductRevisionMajor: *mut u8,
        pProductRevisionMinor: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetProductRevision(self, pProductRevisionMajor, pProductRevisionMinor)
    }
    #[inline]
    unsafe fn VL53LX_GetDeviceInfo(
        &mut self,
        pVL53LX_DeviceInfo: *mut VL53LX_DeviceInfo_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetDeviceInfo(self, pVL53LX_DeviceInfo)
    }
    #[inline]
    unsafe fn VL53LX_GetUID(&mut self, pUid: *mut u64) -> VL53LX_Error {
        VL53LX_VL53LX_GetUID(self, pUid)
    }
    #[inline]
    unsafe fn VL53LX_SetDeviceAddress(&mut self, DeviceAddress: u8) -> VL53LX_Error {
        VL53LX_VL53LX_SetDeviceAddress(self, DeviceAddress)
    }
    #[inline]
    unsafe fn VL53LX_DataInit(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_DataInit(self)
    }
    #[inline]
    unsafe fn VL53LX_WaitDeviceBooted(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_WaitDeviceBooted(self)
    }
    #[inline]
    unsafe fn VL53LX_SetDistanceMode(
        &mut self,
        DistanceMode: VL53LX_DistanceModes,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SetDistanceMode(self, DistanceMode)
    }
    #[inline]
    unsafe fn VL53LX_GetDistanceMode(
        &mut self,
        pDistanceMode: *mut VL53LX_DistanceModes,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetDistanceMode(self, pDistanceMode)
    }
    #[inline]
    unsafe fn VL53LX_SetMeasurementTimingBudgetMicroSeconds(
        &mut self,
        MeasurementTimingBudgetMicroSeconds: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SetMeasurementTimingBudgetMicroSeconds(
            self,
            MeasurementTimingBudgetMicroSeconds,
        )
    }
    #[inline]
    unsafe fn VL53LX_GetMeasurementTimingBudgetMicroSeconds(
        &mut self,
        pMeasurementTimingBudgetMicroSeconds: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetMeasurementTimingBudgetMicroSeconds(
            self,
            pMeasurementTimingBudgetMicroSeconds,
        )
    }
    #[inline]
    unsafe fn VL53LX_StartMeasurement(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_StartMeasurement(self)
    }
    #[inline]
    unsafe fn VL53LX_StopMeasurement(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_StopMeasurement(self)
    }
    #[inline]
    unsafe fn VL53LX_ClearInterruptAndStartMeasurement(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_ClearInterruptAndStartMeasurement(self)
    }
    #[inline]
    unsafe fn VL53LX_GetMeasurementDataReady(
        &mut self,
        pMeasurementDataReady: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetMeasurementDataReady(self, pMeasurementDataReady)
    }
    #[inline]
    unsafe fn VL53LX_WaitMeasurementDataReady(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_WaitMeasurementDataReady(self)
    }
    #[inline]
    unsafe fn VL53LX_GetMultiRangingData(
        &mut self,
        pMultiRangingData: *mut VL53LX_MultiRangingData_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetMultiRangingData(self, pMultiRangingData)
    }
    #[inline]
    unsafe fn VL53LX_SetTuningParameter(
        &mut self,
        TuningParameterId: u16,
        TuningParameterValue: i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SetTuningParameter(self, TuningParameterId, TuningParameterValue)
    }
    #[inline]
    unsafe fn VL53LX_GetTuningParameter(
        &mut self,
        TuningParameterId: u16,
        pTuningParameterValue: *mut i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetTuningParameter(self, TuningParameterId, pTuningParameterValue)
    }
    #[inline]
    unsafe fn VL53LX_PerformRefSpadManagement(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_PerformRefSpadManagement(self)
    }
    #[inline]
    unsafe fn VL53LX_SmudgeCorrectionEnable(
        &mut self,
        Mode: VL53LX_SmudgeCorrectionModes,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SmudgeCorrectionEnable(self, Mode)
    }
    #[inline]
    unsafe fn VL53LX_SetXTalkCompensationEnable(
        &mut self,
        XTalkCompensationEnable: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SetXTalkCompensationEnable(self, XTalkCompensationEnable)
    }
    #[inline]
    unsafe fn VL53LX_GetXTalkCompensationEnable(
        &mut self,
        pXTalkCompensationEnable: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetXTalkCompensationEnable(self, pXTalkCompensationEnable)
    }
    #[inline]
    unsafe fn VL53LX_PerformXTalkCalibration(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_PerformXTalkCalibration(self)
    }
    #[inline]
    unsafe fn VL53LX_SetOffsetCorrectionMode(
        &mut self,
        OffsetCorrectionMode: VL53LX_OffsetCorrectionModes,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SetOffsetCorrectionMode(self, OffsetCorrectionMode)
    }
    #[inline]
    unsafe fn VL53LX_PerformOffsetSimpleCalibration(
        &mut self,
        CalDistanceMilliMeter: i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_PerformOffsetSimpleCalibration(self, CalDistanceMilliMeter)
    }
    #[inline]
    unsafe fn VL53LX_PerformOffsetZeroDistanceCalibration(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_PerformOffsetZeroDistanceCalibration(self)
    }
    #[inline]
    unsafe fn VL53LX_PerformOffsetPerVcselCalibration(
        &mut self,
        CalDistanceMilliMeter: i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_PerformOffsetPerVcselCalibration(self, CalDistanceMilliMeter)
    }
    #[inline]
    unsafe fn VL53LX_SetCalibrationData(
        &mut self,
        pCalibrationData: *mut VL53LX_CalibrationData_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_SetCalibrationData(self, pCalibrationData)
    }
    #[inline]
    unsafe fn VL53LX_GetCalibrationData(
        &mut self,
        pCalibrationData: *mut VL53LX_CalibrationData_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_GetCalibrationData(self, pCalibrationData)
    }
    #[inline]
    unsafe fn VL53LX_get_version(
        &mut self,
        pversion: *mut VL53LX_ll_version_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_version(self, pversion)
    }
    #[inline]
    unsafe fn VL53LX_get_device_firmware_version(
        &mut self,
        pfw_version: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_device_firmware_version(self, pfw_version)
    }
    #[inline]
    unsafe fn VL53LX_data_init(&mut self, read_p2p_data: u8) -> VL53LX_Error {
        VL53LX_VL53LX_data_init(self, read_p2p_data)
    }
    #[inline]
    unsafe fn VL53LX_read_p2p_data(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_read_p2p_data(self)
    }
    #[inline]
    unsafe fn VL53LX_software_reset(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_software_reset(self)
    }
    #[inline]
    unsafe fn VL53LX_set_part_to_part_data(
        &mut self,
        pcal_data: *mut VL53LX_calibration_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_part_to_part_data(self, pcal_data)
    }
    #[inline]
    unsafe fn VL53LX_get_part_to_part_data(
        &mut self,
        pcal_data: *mut VL53LX_calibration_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_part_to_part_data(self, pcal_data)
    }
    #[inline]
    unsafe fn VL53LX_get_tuning_debug_data(
        &mut self,
        ptun_data: *mut VL53LX_tuning_parameters_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_tuning_debug_data(self, ptun_data)
    }
    #[inline]
    unsafe fn VL53LX_set_inter_measurement_period_ms(
        &mut self,
        inter_measurement_period_ms: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_inter_measurement_period_ms(self, inter_measurement_period_ms)
    }
    #[inline]
    unsafe fn VL53LX_get_inter_measurement_period_ms(
        &mut self,
        pinter_measurement_period_ms: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_inter_measurement_period_ms(self, pinter_measurement_period_ms)
    }
    #[inline]
    unsafe fn VL53LX_set_timeouts_us(
        &mut self,
        phasecal_config_timeout_us: u32,
        mm_config_timeout_us: u32,
        range_config_timeout_us: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_timeouts_us(
            self,
            phasecal_config_timeout_us,
            mm_config_timeout_us,
            range_config_timeout_us,
        )
    }
    #[inline]
    unsafe fn VL53LX_get_timeouts_us(
        &mut self,
        pphasecal_config_timeout_us: *mut u32,
        pmm_config_timeout_us: *mut u32,
        prange_config_timeout_us: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_timeouts_us(
            self,
            pphasecal_config_timeout_us,
            pmm_config_timeout_us,
            prange_config_timeout_us,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_calibration_repeat_period(
        &mut self,
        cal_config__repeat_period: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_calibration_repeat_period(self, cal_config__repeat_period)
    }
    #[inline]
    unsafe fn VL53LX_get_calibration_repeat_period(
        &mut self,
        pcal_config__repeat_period: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_calibration_repeat_period(self, pcal_config__repeat_period)
    }
    #[inline]
    unsafe fn VL53LX_set_sequence_config_bit(
        &mut self,
        bit_id: VL53LX_DeviceSequenceConfig,
        value: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_sequence_config_bit(self, bit_id, value)
    }
    #[inline]
    unsafe fn VL53LX_get_sequence_config_bit(
        &mut self,
        bit_id: VL53LX_DeviceSequenceConfig,
        pvalue: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_sequence_config_bit(self, bit_id, pvalue)
    }
    #[inline]
    unsafe fn VL53LX_set_interrupt_polarity(
        &mut self,
        interrupt_polarity: VL53LX_DeviceInterruptPolarity,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_interrupt_polarity(self, interrupt_polarity)
    }
    #[inline]
    unsafe fn VL53LX_get_interrupt_polarity(
        &mut self,
        pinterrupt_polarity: *mut VL53LX_DeviceInterruptPolarity,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_interrupt_polarity(self, pinterrupt_polarity)
    }
    #[inline]
    unsafe fn VL53LX_get_refspadchar_config_struct(
        &mut self,
        pdata: *mut VL53LX_refspadchar_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_refspadchar_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_refspadchar_config_struct(
        &mut self,
        pdata: *mut VL53LX_refspadchar_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_refspadchar_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_range_ignore_threshold(
        &mut self,
        range_ignore_thresh_mult: u8,
        range_ignore_threshold_mcps: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_range_ignore_threshold(
            self,
            range_ignore_thresh_mult,
            range_ignore_threshold_mcps,
        )
    }
    #[inline]
    unsafe fn VL53LX_get_range_ignore_threshold(
        &mut self,
        prange_ignore_thresh_mult: *mut u8,
        prange_ignore_threshold_mcps_internal: *mut u16,
        prange_ignore_threshold_mcps_current: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_range_ignore_threshold(
            self,
            prange_ignore_thresh_mult,
            prange_ignore_threshold_mcps_internal,
            prange_ignore_threshold_mcps_current,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_user_zone(
        &mut self,
        puser_zone: *mut VL53LX_user_zone_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_user_zone(self, puser_zone)
    }
    #[inline]
    unsafe fn VL53LX_get_user_zone(
        &mut self,
        puser_zone: *mut VL53LX_user_zone_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_user_zone(self, puser_zone)
    }
    #[inline]
    unsafe fn VL53LX_get_mode_mitigation_roi(
        &mut self,
        pmm_roi: *mut VL53LX_user_zone_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_mode_mitigation_roi(self, pmm_roi)
    }
    #[inline]
    unsafe fn VL53LX_set_zone_config(
        &mut self,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_zone_config(self, pzone_cfg)
    }
    #[inline]
    unsafe fn VL53LX_get_zone_config(
        &mut self,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_zone_config(self, pzone_cfg)
    }
    #[inline]
    unsafe fn VL53LX_set_preset_mode(
        &mut self,
        device_preset_mode: VL53LX_DevicePresetModes,
        dss_config__target_total_rate_mcps: u16,
        phasecal_config_timeout_us: u32,
        mm_config_timeout_us: u32,
        range_config_timeout_us: u32,
        inter_measurement_period_ms: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_preset_mode(
            self,
            device_preset_mode,
            dss_config__target_total_rate_mcps,
            phasecal_config_timeout_us,
            mm_config_timeout_us,
            range_config_timeout_us,
            inter_measurement_period_ms,
        )
    }
    #[inline]
    unsafe fn VL53LX_get_preset_mode_timing_cfg(
        &mut self,
        device_preset_mode: VL53LX_DevicePresetModes,
        pdss_config__target_total_rate_mcps: *mut u16,
        pphasecal_config_timeout_us: *mut u32,
        pmm_config_timeout_us: *mut u32,
        prange_config_timeout_us: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_preset_mode_timing_cfg(
            self,
            device_preset_mode,
            pdss_config__target_total_rate_mcps,
            pphasecal_config_timeout_us,
            pmm_config_timeout_us,
            prange_config_timeout_us,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_zone_preset(
        &mut self,
        zone_preset: VL53LX_DeviceZonePreset,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_zone_preset(self, zone_preset)
    }
    #[inline]
    unsafe fn VL53LX_enable_xtalk_compensation(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_enable_xtalk_compensation(self)
    }
    #[inline]
    unsafe fn VL53LX_disable_xtalk_compensation(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_disable_xtalk_compensation(self)
    }
    #[inline]
    unsafe fn VL53LX_get_xtalk_compensation_enable(
        &mut self,
        pcrosstalk_compensation_enable: *mut u8,
    ) {
        VL53LX_VL53LX_get_xtalk_compensation_enable(self, pcrosstalk_compensation_enable)
    }
    #[inline]
    unsafe fn VL53LX_init_and_start_range(
        &mut self,
        measurement_mode: u8,
        device_config_level: VL53LX_DeviceConfigLevel,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_and_start_range(self, measurement_mode, device_config_level)
    }
    #[inline]
    unsafe fn VL53LX_stop_range(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_stop_range(self)
    }
    #[inline]
    unsafe fn VL53LX_get_measurement_results(
        &mut self,
        device_result_level: VL53LX_DeviceResultsLevel,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_measurement_results(self, device_result_level)
    }
    #[inline]
    unsafe fn VL53LX_get_device_results(
        &mut self,
        device_result_level: VL53LX_DeviceResultsLevel,
        prange_results: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_device_results(self, device_result_level, prange_results)
    }
    #[inline]
    unsafe fn VL53LX_clear_interrupt_and_enable_next_range(
        &mut self,
        measurement_mode: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_clear_interrupt_and_enable_next_range(self, measurement_mode)
    }
    #[inline]
    unsafe fn VL53LX_get_histogram_bin_data(
        &mut self,
        phist_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_histogram_bin_data(self, phist_data)
    }
    #[inline]
    unsafe fn VL53LX_copy_sys_and_core_results_to_range_results(
        &mut self,
        gain_factor: i32,
        psys: *mut VL53LX_system_results_t,
        pcore: *mut VL53LX_core_results_t,
        presults: *mut VL53LX_range_results_t,
    ) {
        VL53LX_VL53LX_copy_sys_and_core_results_to_range_results(
            self,
            gain_factor,
            psys,
            pcore,
            presults,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_zone_dss_config(
        &mut self,
        pzone_dyn_cfg: *mut VL53LX_zone_private_dyn_cfg_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_zone_dss_config(self, pzone_dyn_cfg)
    }
    #[inline]
    unsafe fn VL53LX_calc_ambient_dmax(
        &mut self,
        target_reflectance: u16,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_calc_ambient_dmax(self, target_reflectance, pambient_dmax_mm)
    }
    #[inline]
    unsafe fn VL53LX_set_GPIO_interrupt_config(
        &mut self,
        intr_mode_distance: VL53LX_GPIO_Interrupt_Mode,
        intr_mode_rate: VL53LX_GPIO_Interrupt_Mode,
        intr_new_measure_ready: u8,
        intr_no_target: u8,
        intr_combined_mode: u8,
        thresh_distance_high: u16,
        thresh_distance_low: u16,
        thresh_rate_high: u16,
        thresh_rate_low: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_GPIO_interrupt_config(
            self,
            intr_mode_distance,
            intr_mode_rate,
            intr_new_measure_ready,
            intr_no_target,
            intr_combined_mode,
            thresh_distance_high,
            thresh_distance_low,
            thresh_rate_high,
            thresh_rate_low,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_GPIO_interrupt_config_struct(
        &mut self,
        intconf: VL53LX_GPIO_interrupt_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_GPIO_interrupt_config_struct(self, intconf)
    }
    #[inline]
    unsafe fn VL53LX_get_GPIO_interrupt_config(
        &mut self,
        pintconf: *mut VL53LX_GPIO_interrupt_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_GPIO_interrupt_config(self, pintconf)
    }
    #[inline]
    unsafe fn VL53LX_set_dmax_mode(
        &mut self,
        dmax_mode: VL53LX_DeviceDmaxMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_dmax_mode(self, dmax_mode)
    }
    #[inline]
    unsafe fn VL53LX_get_dmax_mode(
        &mut self,
        pdmax_mode: *mut VL53LX_DeviceDmaxMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_dmax_mode(self, pdmax_mode)
    }
    #[inline]
    unsafe fn VL53LX_get_dmax_calibration_data(
        &mut self,
        dmax_mode: VL53LX_DeviceDmaxMode,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_dmax_calibration_data(self, dmax_mode, pdmax_cal)
    }
    #[inline]
    unsafe fn VL53LX_set_hist_dmax_config(
        &mut self,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_hist_dmax_config(self, pdmax_cfg)
    }
    #[inline]
    unsafe fn VL53LX_get_hist_dmax_config(
        &mut self,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_hist_dmax_config(self, pdmax_cfg)
    }
    #[inline]
    unsafe fn VL53LX_set_offset_calibration_mode(
        &mut self,
        offset_cal_mode: VL53LX_OffsetCalibrationMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_offset_calibration_mode(self, offset_cal_mode)
    }
    #[inline]
    unsafe fn VL53LX_get_offset_calibration_mode(
        &mut self,
        poffset_cal_mode: *mut VL53LX_OffsetCalibrationMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_offset_calibration_mode(self, poffset_cal_mode)
    }
    #[inline]
    unsafe fn VL53LX_set_offset_correction_mode(
        &mut self,
        offset_cor_mode: VL53LX_OffsetCalibrationMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_offset_correction_mode(self, offset_cor_mode)
    }
    #[inline]
    unsafe fn VL53LX_get_offset_correction_mode(
        &mut self,
        poffset_cor_mode: *mut VL53LX_OffsetCorrectionMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_offset_correction_mode(self, poffset_cor_mode)
    }
    #[inline]
    unsafe fn VL53LX_set_zone_calibration_data(
        &mut self,
        pzone_cal: *mut VL53LX_zone_calibration_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_zone_calibration_data(self, pzone_cal)
    }
    #[inline]
    unsafe fn VL53LX_get_zone_calibration_data(
        &mut self,
        pzone_cal: *mut VL53LX_zone_calibration_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_zone_calibration_data(self, pzone_cal)
    }
    #[inline]
    unsafe fn VL53LX_get_lite_xtalk_margin_kcps(
        &mut self,
        pxtalk_margin: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_lite_xtalk_margin_kcps(self, pxtalk_margin)
    }
    #[inline]
    unsafe fn VL53LX_set_lite_xtalk_margin_kcps(&mut self, xtalk_margin: i16) -> VL53LX_Error {
        VL53LX_VL53LX_set_lite_xtalk_margin_kcps(self, xtalk_margin)
    }
    #[inline]
    unsafe fn VL53LX_get_histogram_xtalk_margin_kcps(
        &mut self,
        pxtalk_margin: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_histogram_xtalk_margin_kcps(self, pxtalk_margin)
    }
    #[inline]
    unsafe fn VL53LX_set_histogram_xtalk_margin_kcps(
        &mut self,
        xtalk_margin: i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_histogram_xtalk_margin_kcps(self, xtalk_margin)
    }
    #[inline]
    unsafe fn VL53LX_get_histogram_phase_consistency(
        &mut self,
        pphase_consistency: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_histogram_phase_consistency(self, pphase_consistency)
    }
    #[inline]
    unsafe fn VL53LX_set_histogram_phase_consistency(
        &mut self,
        phase_consistency: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_histogram_phase_consistency(self, phase_consistency)
    }
    #[inline]
    unsafe fn VL53LX_get_histogram_event_consistency(
        &mut self,
        pevent_consistency: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_histogram_event_consistency(self, pevent_consistency)
    }
    #[inline]
    unsafe fn VL53LX_set_histogram_event_consistency(
        &mut self,
        event_consistency: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_histogram_event_consistency(self, event_consistency)
    }
    #[inline]
    unsafe fn VL53LX_get_histogram_ambient_threshold_sigma(
        &mut self,
        pamb_thresh_sigma: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_histogram_ambient_threshold_sigma(self, pamb_thresh_sigma)
    }
    #[inline]
    unsafe fn VL53LX_set_histogram_ambient_threshold_sigma(
        &mut self,
        amb_thresh_sigma: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_histogram_ambient_threshold_sigma(self, amb_thresh_sigma)
    }
    #[inline]
    unsafe fn VL53LX_get_lite_min_count_rate(
        &mut self,
        plite_mincountrate: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_lite_min_count_rate(self, plite_mincountrate)
    }
    #[inline]
    unsafe fn VL53LX_set_lite_min_count_rate(
        &mut self,
        lite_mincountrate: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_lite_min_count_rate(self, lite_mincountrate)
    }
    #[inline]
    unsafe fn VL53LX_get_lite_sigma_threshold(
        &mut self,
        plite_sigma: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_lite_sigma_threshold(self, plite_sigma)
    }
    #[inline]
    unsafe fn VL53LX_set_lite_sigma_threshold(&mut self, lite_sigma: u16) -> VL53LX_Error {
        VL53LX_VL53LX_set_lite_sigma_threshold(self, lite_sigma)
    }
    #[inline]
    unsafe fn VL53LX_restore_xtalk_nvm_default(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_restore_xtalk_nvm_default(self)
    }
    #[inline]
    unsafe fn VL53LX_get_xtalk_detect_config(
        &mut self,
        pmax_valid_range_mm: *mut i16,
        pmin_valid_range_mm: *mut i16,
        pmax_valid_rate_kcps: *mut u16,
        pmax_sigma_mm: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_xtalk_detect_config(
            self,
            pmax_valid_range_mm,
            pmin_valid_range_mm,
            pmax_valid_rate_kcps,
            pmax_sigma_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_xtalk_detect_config(
        &mut self,
        max_valid_range_mm: i16,
        min_valid_range_mm: i16,
        max_valid_rate_kcps: u16,
        max_sigma_mm: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_xtalk_detect_config(
            self,
            max_valid_range_mm,
            min_valid_range_mm,
            max_valid_rate_kcps,
            max_sigma_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_get_target_order_mode(
        &mut self,
        phist_target_order: *mut VL53LX_HistTargetOrder,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_target_order_mode(self, phist_target_order)
    }
    #[inline]
    unsafe fn VL53LX_set_target_order_mode(
        &mut self,
        hist_target_order: VL53LX_HistTargetOrder,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_target_order_mode(self, hist_target_order)
    }
    #[inline]
    unsafe fn VL53LX_set_dmax_reflectance_values(
        &mut self,
        pdmax_reflectances: *mut VL53LX_dmax_reflectance_array_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_dmax_reflectance_values(self, pdmax_reflectances)
    }
    #[inline]
    unsafe fn VL53LX_get_dmax_reflectance_values(
        &mut self,
        pdmax_reflectances: *mut VL53LX_dmax_reflectance_array_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_dmax_reflectance_values(self, pdmax_reflectances)
    }
    #[inline]
    unsafe fn VL53LX_set_vhv_config(
        &mut self,
        vhv_init_en: u8,
        vhv_init_value: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_vhv_config(self, vhv_init_en, vhv_init_value)
    }
    #[inline]
    unsafe fn VL53LX_get_vhv_config(
        &mut self,
        pvhv_init_en: *mut u8,
        pvhv_init_value: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_vhv_config(self, pvhv_init_en, pvhv_init_value)
    }
    #[inline]
    unsafe fn VL53LX_set_vhv_loopbound(&mut self, vhv_loopbound: u8) -> VL53LX_Error {
        VL53LX_VL53LX_set_vhv_loopbound(self, vhv_loopbound)
    }
    #[inline]
    unsafe fn VL53LX_get_vhv_loopbound(&mut self, pvhv_loopbound: *mut u8) -> VL53LX_Error {
        VL53LX_VL53LX_get_vhv_loopbound(self, pvhv_loopbound)
    }
    #[inline]
    unsafe fn VL53LX_get_tuning_parm(
        &mut self,
        tuning_parm_key: VL53LX_TuningParms,
        ptuning_parm_value: *mut i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_tuning_parm(self, tuning_parm_key, ptuning_parm_value)
    }
    #[inline]
    unsafe fn VL53LX_set_tuning_parm(
        &mut self,
        tuning_parm_key: VL53LX_TuningParms,
        tuning_parm_value: i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_tuning_parm(self, tuning_parm_key, tuning_parm_value)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_enable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_enable(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_disable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_disable(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_apply_enable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_apply_enable(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_apply_disable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_apply_disable(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_single_apply_enable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_single_apply_enable(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_single_apply_disable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_single_apply_disable(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_set_scalers(
        &mut self,
        x_scaler_in: i16,
        y_scaler_in: i16,
        user_scaler_set_in: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_set_scalers(
            self,
            x_scaler_in,
            y_scaler_in,
            user_scaler_set_in,
        )
    }
    #[inline]
    unsafe fn VL53LX_get_current_xtalk_settings(
        &mut self,
        pxtalk: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_current_xtalk_settings(self, pxtalk)
    }
    #[inline]
    unsafe fn VL53LX_set_current_xtalk_settings(
        &mut self,
        pxtalk: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_current_xtalk_settings(self, pxtalk)
    }
    #[inline]
    unsafe fn VL53LX_load_patch(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_load_patch(self)
    }
    #[inline]
    unsafe fn VL53LX_unload_patch(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_unload_patch(self)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_static_nvm_managed(
        &mut self,
        pdata: *mut VL53LX_static_nvm_managed_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_static_nvm_managed(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_static_nvm_managed(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_static_nvm_managed_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_static_nvm_managed(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_static_nvm_managed(
        &mut self,
        pdata: *mut VL53LX_static_nvm_managed_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_static_nvm_managed(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_static_nvm_managed(
        &mut self,
        pdata: *mut VL53LX_static_nvm_managed_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_static_nvm_managed(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_customer_nvm_managed(
        &mut self,
        pdata: *mut VL53LX_customer_nvm_managed_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_customer_nvm_managed(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_customer_nvm_managed(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_customer_nvm_managed_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_customer_nvm_managed(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_customer_nvm_managed(
        &mut self,
        pdata: *mut VL53LX_customer_nvm_managed_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_customer_nvm_managed(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_customer_nvm_managed(
        &mut self,
        pdata: *mut VL53LX_customer_nvm_managed_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_customer_nvm_managed(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_static_config(
        &mut self,
        pdata: *mut VL53LX_static_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_static_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_static_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_static_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_static_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_static_config(
        &mut self,
        pdata: *mut VL53LX_static_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_static_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_static_config(
        &mut self,
        pdata: *mut VL53LX_static_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_static_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_general_config(
        &mut self,
        pdata: *mut VL53LX_general_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_general_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_general_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_general_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_general_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_general_config(
        &mut self,
        pdata: *mut VL53LX_general_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_general_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_general_config(
        &mut self,
        pdata: *mut VL53LX_general_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_general_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_timing_config(
        &mut self,
        pdata: *mut VL53LX_timing_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_timing_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_timing_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_timing_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_timing_config(
        &mut self,
        pdata: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_timing_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_timing_config(
        &mut self,
        pdata: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_timing_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_dynamic_config(
        &mut self,
        pdata: *mut VL53LX_dynamic_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_dynamic_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_dynamic_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_dynamic_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_dynamic_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_dynamic_config(
        &mut self,
        pdata: *mut VL53LX_dynamic_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_dynamic_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_dynamic_config(
        &mut self,
        pdata: *mut VL53LX_dynamic_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_dynamic_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_system_control(
        &mut self,
        pdata: *mut VL53LX_system_control_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_system_control(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_system_control(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_system_control_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_system_control(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_system_control(
        &mut self,
        pdata: *mut VL53LX_system_control_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_system_control(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_system_control(
        &mut self,
        pdata: *mut VL53LX_system_control_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_system_control(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_system_results(
        &mut self,
        pdata: *mut VL53LX_system_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_system_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_system_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_system_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_system_results(
        &mut self,
        pdata: *mut VL53LX_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_system_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_system_results(
        &mut self,
        pdata: *mut VL53LX_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_system_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_core_results(
        &mut self,
        pdata: *mut VL53LX_core_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_core_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_core_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_core_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_core_results(
        &mut self,
        pdata: *mut VL53LX_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_core_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_core_results(
        &mut self,
        pdata: *mut VL53LX_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_core_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_debug_results(
        &mut self,
        pdata: *mut VL53LX_debug_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_debug_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_debug_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_debug_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_debug_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_debug_results(
        &mut self,
        pdata: *mut VL53LX_debug_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_debug_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_debug_results(
        &mut self,
        pdata: *mut VL53LX_debug_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_debug_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_nvm_copy_data(
        &mut self,
        pdata: *mut VL53LX_nvm_copy_data_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_nvm_copy_data(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_nvm_copy_data(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_nvm_copy_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_nvm_copy_data(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_nvm_copy_data(
        &mut self,
        pdata: *mut VL53LX_nvm_copy_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_nvm_copy_data(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_nvm_copy_data(
        &mut self,
        pdata: *mut VL53LX_nvm_copy_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_nvm_copy_data(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_prev_shadow_system_results(
        &mut self,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_prev_shadow_system_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_prev_shadow_system_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_prev_shadow_system_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_prev_shadow_system_results(
        &mut self,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_prev_shadow_system_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_prev_shadow_system_results(
        &mut self,
        pdata: *mut VL53LX_prev_shadow_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_prev_shadow_system_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_prev_shadow_core_results(
        &mut self,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_prev_shadow_core_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_prev_shadow_core_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_prev_shadow_core_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_prev_shadow_core_results(
        &mut self,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_prev_shadow_core_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_prev_shadow_core_results(
        &mut self,
        pdata: *mut VL53LX_prev_shadow_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_prev_shadow_core_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_patch_debug(
        &mut self,
        pdata: *mut VL53LX_patch_debug_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_patch_debug(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_patch_debug(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_patch_debug_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_patch_debug(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_patch_debug(
        &mut self,
        pdata: *mut VL53LX_patch_debug_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_patch_debug(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_patch_debug(
        &mut self,
        pdata: *mut VL53LX_patch_debug_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_patch_debug(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_gph_general_config(
        &mut self,
        pdata: *mut VL53LX_gph_general_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_gph_general_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_gph_general_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_gph_general_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_gph_general_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_gph_general_config(
        &mut self,
        pdata: *mut VL53LX_gph_general_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_gph_general_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_gph_general_config(
        &mut self,
        pdata: *mut VL53LX_gph_general_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_gph_general_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_gph_static_config(
        &mut self,
        pdata: *mut VL53LX_gph_static_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_gph_static_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_gph_static_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_gph_static_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_gph_static_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_gph_static_config(
        &mut self,
        pdata: *mut VL53LX_gph_static_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_gph_static_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_gph_static_config(
        &mut self,
        pdata: *mut VL53LX_gph_static_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_gph_static_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_gph_timing_config(
        &mut self,
        pdata: *mut VL53LX_gph_timing_config_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_gph_timing_config(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_gph_timing_config(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_gph_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_gph_timing_config(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_gph_timing_config(
        &mut self,
        pdata: *mut VL53LX_gph_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_gph_timing_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_gph_timing_config(
        &mut self,
        pdata: *mut VL53LX_gph_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_gph_timing_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_fw_internal(
        &mut self,
        pdata: *mut VL53LX_fw_internal_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_fw_internal(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_fw_internal(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_fw_internal_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_fw_internal(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_fw_internal(
        &mut self,
        pdata: *mut VL53LX_fw_internal_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_fw_internal(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_fw_internal(
        &mut self,
        pdata: *mut VL53LX_fw_internal_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_fw_internal(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_patch_results(
        &mut self,
        pdata: *mut VL53LX_patch_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_patch_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_patch_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_patch_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_patch_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_patch_results(
        &mut self,
        pdata: *mut VL53LX_patch_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_patch_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_patch_results(
        &mut self,
        pdata: *mut VL53LX_patch_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_patch_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_shadow_system_results(
        &mut self,
        pdata: *mut VL53LX_shadow_system_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_shadow_system_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_shadow_system_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_shadow_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_shadow_system_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_shadow_system_results(
        &mut self,
        pdata: *mut VL53LX_shadow_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_shadow_system_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_shadow_system_results(
        &mut self,
        pdata: *mut VL53LX_shadow_system_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_shadow_system_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_shadow_core_results(
        &mut self,
        pdata: *mut VL53LX_shadow_core_results_t,
        buf_size: u16,
        pbuffer: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_encode_shadow_core_results(self, pdata, buf_size, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_shadow_core_results(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_shadow_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_i2c_decode_shadow_core_results(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_set_shadow_core_results(
        &mut self,
        pdata: *mut VL53LX_shadow_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_shadow_core_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_get_shadow_core_results(
        &mut self,
        pdata: *mut VL53LX_shadow_core_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_shadow_core_results(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_enable(
        &mut self,
        nvm_ctrl_pulse_width: u16,
        nvm_power_up_delay_us: i32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_enable(self, nvm_ctrl_pulse_width, nvm_power_up_delay_us)
    }
    #[inline]
    unsafe fn VL53LX_nvm_read(
        &mut self,
        start_address: u8,
        count: u8,
        pdata: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_read(self, start_address, count, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_disable(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_disable(self)
    }
    #[inline]
    unsafe fn VL53LX_nvm_format_decode(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_format_decode(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_decode_optical_centre(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_optical_centre_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_decode_optical_centre(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_decode_cal_peak_rate_map(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_cal_peak_rate_map_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_decode_cal_peak_rate_map(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_decode_additional_offset_cal_data(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_additional_offset_cal_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_decode_additional_offset_cal_data(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_decode_fmt_range_results_data(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_fmt_range_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_decode_fmt_range_results_data(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_decode_fmt_info(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_fmt_info_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_decode_fmt_info(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_decode_ews_info(
        &mut self,
        buf_size: u16,
        pbuffer: *mut u8,
        pdata: *mut VL53LX_decoded_nvm_ews_info_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_nvm_decode_ews_info(self, buf_size, pbuffer, pdata)
    }
    #[inline]
    unsafe fn VL53LX_nvm_format_encode(
        &mut self,
        pnvm_info: *mut VL53LX_decoded_nvm_data_t,
        pnvm_data: *mut u8,
    ) {
        VL53LX_VL53LX_nvm_format_encode(self, pnvm_info, pnvm_data)
    }
    #[inline]
    unsafe fn VL53LX_read_nvm_raw_data(
        &mut self,
        start_address: u8,
        count: u8,
        pnvm_raw_data: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_read_nvm_raw_data(self, start_address, count, pnvm_raw_data)
    }
    #[inline]
    unsafe fn VL53LX_read_nvm(
        &mut self,
        nvm_format: u8,
        pnvm_info: *mut VL53LX_decoded_nvm_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_read_nvm(self, nvm_format, pnvm_info)
    }
    #[inline]
    unsafe fn VL53LX_read_nvm_optical_centre(
        &mut self,
        pcentre: *mut VL53LX_optical_centre_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_read_nvm_optical_centre(self, pcentre)
    }
    #[inline]
    unsafe fn VL53LX_read_nvm_cal_peak_rate_map(
        &mut self,
        pcal_data: *mut VL53LX_cal_peak_rate_map_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_read_nvm_cal_peak_rate_map(self, pcal_data)
    }
    #[inline]
    unsafe fn VL53LX_read_nvm_additional_offset_cal_data(
        &mut self,
        pcal_data: *mut VL53LX_additional_offset_cal_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_read_nvm_additional_offset_cal_data(self, pcal_data)
    }
    #[inline]
    unsafe fn VL53LX_read_nvm_fmt_range_results_data(
        &mut self,
        range_results_select: u16,
        prange_data: *mut VL53LX_decoded_nvm_fmt_range_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_read_nvm_fmt_range_results_data(self, range_results_select, prange_data)
    }
    #[inline]
    unsafe fn VL53LX_ipp_hist_process_data(
        &mut self,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_xtalk_histogram_data_t,
        pArea1: *mut u8,
        pArea2: *mut u8,
        phisto_merge_nb: *mut u8,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_ipp_hist_process_data(
            self,
            pdmax_cal,
            pdmax_cfg,
            ppost_cfg,
            pbins,
            pxtalk,
            pArea1,
            pArea2,
            phisto_merge_nb,
            presults,
        )
    }
    #[inline]
    unsafe fn VL53LX_ipp_hist_ambient_dmax(
        &mut self,
        target_reflectance: u16,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_ipp_hist_ambient_dmax(
            self,
            target_reflectance,
            pdmax_cal,
            pdmax_cfg,
            pbins,
            pambient_dmax_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_ipp_xtalk_calibration_process_data(
        &mut self,
        pxtalk_ranges: *mut VL53LX_xtalk_range_results_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pxtalk_cal: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_ipp_xtalk_calibration_process_data(
            self,
            pxtalk_ranges,
            pxtalk_shape,
            pxtalk_cal,
        )
    }
    #[inline]
    unsafe fn VL53LX_ipp_hist_xtalk_correction(
        &mut self,
        pcustomer: *mut VL53LX_customer_nvm_managed_t,
        pdyn_cfg: *mut VL53LX_dynamic_config_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pip_hist_data: *mut VL53LX_histogram_bin_data_t,
        pop_hist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_count_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_ipp_hist_xtalk_correction(
            self,
            pcustomer,
            pdyn_cfg,
            pxtalk_shape,
            pip_hist_data,
            pop_hist_data,
            pxtalk_count_data,
        )
    }
    #[inline]
    unsafe fn VL53LX_ipp_generate_dual_reflectance_xtalk_samples(
        &mut self,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        expected_target_distance_mm: u16,
        higher_reflectance: u8,
        pxtalk_avg_samples: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_ipp_generate_dual_reflectance_xtalk_samples(
            self,
            pxtalk_results,
            expected_target_distance_mm,
            higher_reflectance,
            pxtalk_avg_samples,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_process_data(
        &mut self,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_xtalk_histogram_data_t,
        pArea1: *mut u8,
        pArea2: *mut u8,
        presults: *mut VL53LX_range_results_t,
        HistMergeNumber: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_process_data(
            self,
            pdmax_cal,
            pdmax_cfg,
            ppost_cfg,
            pbins,
            pxtalk,
            pArea1,
            pArea2,
            presults,
            HistMergeNumber,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_ambient_dmax(
        &mut self,
        target_reflectance: u16,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_ambient_dmax(
            self,
            target_reflectance,
            pdmax_cal,
            pdmax_cfg,
            pbins,
            pambient_dmax_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_calc_pll_period_us(&mut self, fast_osc_frequency: u16) -> u32 {
        VL53LX_VL53LX_calc_pll_period_us(self, fast_osc_frequency)
    }
    #[inline]
    unsafe fn VL53LX_duration_maths(
        &mut self,
        pll_period_us: u32,
        vcsel_parm_pclks: u32,
        window_vclks: u32,
        periods_elapsed_mclks: u32,
    ) -> u32 {
        VL53LX_VL53LX_duration_maths(
            self,
            pll_period_us,
            vcsel_parm_pclks,
            window_vclks,
            periods_elapsed_mclks,
        )
    }
    #[inline]
    unsafe fn VL53LX_events_per_spad_maths(
        &mut self,
        VL53LX_p_010: i32,
        num_spads: u16,
        duration: u32,
    ) -> u32 {
        VL53LX_VL53LX_events_per_spad_maths(self, VL53LX_p_010, num_spads, duration)
    }
    #[inline]
    unsafe fn VL53LX_isqrt(&mut self, num: u32) -> u32 {
        VL53LX_VL53LX_isqrt(self, num)
    }
    #[inline]
    unsafe fn VL53LX_hist_calc_zero_distance_phase(
        &mut self,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_hist_calc_zero_distance_phase(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_hist_estimate_ambient_from_thresholded_bins(
        &mut self,
        ambient_threshold_sigma: i32,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_hist_estimate_ambient_from_thresholded_bins(
            self,
            ambient_threshold_sigma,
            pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_remove_ambient_bins(
        &mut self,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_hist_remove_ambient_bins(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_calc_pll_period_mm(&mut self, fast_osc_frequency: u16) -> u32 {
        VL53LX_VL53LX_calc_pll_period_mm(self, fast_osc_frequency)
    }
    #[inline]
    unsafe fn VL53LX_rate_maths(&mut self, VL53LX_p_018: i32, time_us: u32) -> u16 {
        VL53LX_VL53LX_rate_maths(self, VL53LX_p_018, time_us)
    }
    #[inline]
    unsafe fn VL53LX_rate_per_spad_maths(
        &mut self,
        frac_bits: u32,
        peak_count_rate: u32,
        num_spads: u16,
        max_output_value: u32,
    ) -> u16 {
        VL53LX_VL53LX_rate_per_spad_maths(
            self,
            frac_bits,
            peak_count_rate,
            num_spads,
            max_output_value,
        )
    }
    #[inline]
    unsafe fn VL53LX_range_maths(
        &mut self,
        fast_osc_frequency: u16,
        VL53LX_p_014: u16,
        zero_distance_phase: u16,
        fractional_bits: u8,
        gain_factor: i32,
        range_offset_mm: i32,
    ) -> i32 {
        VL53LX_VL53LX_range_maths(
            self,
            fast_osc_frequency,
            VL53LX_p_014,
            zero_distance_phase,
            fractional_bits,
            gain_factor,
            range_offset_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_decode_vcsel_period(&mut self, vcsel_period_reg: u8) -> u8 {
        VL53LX_VL53LX_decode_vcsel_period(self, vcsel_period_reg)
    }
    #[inline]
    unsafe fn VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
        &mut self,
        pxtalk: *mut VL53LX_xtalk_histogram_shape_t,
        phist: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(self, pxtalk, phist)
    }
    #[inline]
    unsafe fn VL53LX_init_histogram_bin_data_struct(
        &mut self,
        bin_value: i32,
        VL53LX_p_021: u16,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_init_histogram_bin_data_struct(self, bin_value, VL53LX_p_021, pdata)
    }
    #[inline]
    unsafe fn VL53LX_decode_row_col(&mut self, spad_number: u8, prow: *mut u8, pcol: *mut u8) {
        VL53LX_VL53LX_decode_row_col(self, spad_number, prow, pcol)
    }
    #[inline]
    unsafe fn VL53LX_hist_find_min_max_bin_values(
        &mut self,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_hist_find_min_max_bin_values(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_hist_estimate_ambient_from_ambient_bins(
        &mut self,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_hist_estimate_ambient_from_ambient_bins(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_version(&mut self) {
        VL53LX_VL53LX_init_version(self)
    }
    #[inline]
    unsafe fn VL53LX_init_ll_driver_state(&mut self, ll_state: VL53LX_DeviceState) {
        VL53LX_VL53LX_init_ll_driver_state(self, ll_state)
    }
    #[inline]
    unsafe fn VL53LX_update_ll_driver_rd_state(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_update_ll_driver_rd_state(self)
    }
    #[inline]
    unsafe fn VL53LX_check_ll_driver_rd_state(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_check_ll_driver_rd_state(self)
    }
    #[inline]
    unsafe fn VL53LX_update_ll_driver_cfg_state(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_update_ll_driver_cfg_state(self)
    }
    #[inline]
    unsafe fn VL53LX_copy_rtn_good_spads_to_buffer(
        &mut self,
        pdata: *mut VL53LX_nvm_copy_data_t,
        pbuffer: *mut u8,
    ) {
        VL53LX_VL53LX_copy_rtn_good_spads_to_buffer(self, pdata, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_init_system_results(&mut self, pdata: *mut VL53LX_system_results_t) {
        VL53LX_VL53LX_init_system_results(self, pdata)
    }
    #[inline]
    unsafe fn V53L1_init_zone_results_structure(
        &mut self,
        active_zones: u8,
        pdata: *mut VL53LX_zone_results_t,
    ) {
        VL53LX_V53L1_init_zone_results_structure(self, active_zones, pdata)
    }
    #[inline]
    unsafe fn V53L1_init_zone_dss_configs(&mut self) {
        VL53LX_V53L1_init_zone_dss_configs(self)
    }
    #[inline]
    unsafe fn VL53LX_init_histogram_config_structure(
        &mut self,
        even_bin0: u8,
        even_bin1: u8,
        even_bin2: u8,
        even_bin3: u8,
        even_bin4: u8,
        even_bin5: u8,
        odd_bin0: u8,
        odd_bin1: u8,
        odd_bin2: u8,
        odd_bin3: u8,
        odd_bin4: u8,
        odd_bin5: u8,
        pdata: *mut VL53LX_histogram_config_t,
    ) {
        VL53LX_VL53LX_init_histogram_config_structure(
            self, even_bin0, even_bin1, even_bin2, even_bin3, even_bin4, even_bin5, odd_bin0,
            odd_bin1, odd_bin2, odd_bin3, odd_bin4, odd_bin5, pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_init_histogram_multizone_config_structure(
        &mut self,
        even_bin0: u8,
        even_bin1: u8,
        even_bin2: u8,
        even_bin3: u8,
        even_bin4: u8,
        even_bin5: u8,
        odd_bin0: u8,
        odd_bin1: u8,
        odd_bin2: u8,
        odd_bin3: u8,
        odd_bin4: u8,
        odd_bin5: u8,
        pdata: *mut VL53LX_histogram_config_t,
    ) {
        VL53LX_VL53LX_init_histogram_multizone_config_structure(
            self, even_bin0, even_bin1, even_bin2, even_bin3, even_bin4, even_bin5, odd_bin0,
            odd_bin1, odd_bin2, odd_bin3, odd_bin4, odd_bin5, pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_init_xtalk_bin_data_struct(
        &mut self,
        bin_value: u32,
        VL53LX_p_021: u16,
        pdata: *mut VL53LX_xtalk_histogram_shape_t,
    ) {
        VL53LX_VL53LX_init_xtalk_bin_data_struct(self, bin_value, VL53LX_p_021, pdata)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_uint16_t(
        &mut self,
        ip_value: u16,
        count: u16,
        pbuffer: *mut u8,
    ) {
        VL53LX_VL53LX_i2c_encode_uint16_t(self, ip_value, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_uint16_t(&mut self, count: u16, pbuffer: *mut u8) -> u16 {
        VL53LX_VL53LX_i2c_decode_uint16_t(self, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_int16_t(
        &mut self,
        ip_value: i16,
        count: u16,
        pbuffer: *mut u8,
    ) {
        VL53LX_VL53LX_i2c_encode_int16_t(self, ip_value, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_int16_t(&mut self, count: u16, pbuffer: *mut u8) -> i16 {
        VL53LX_VL53LX_i2c_decode_int16_t(self, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_uint32_t(
        &mut self,
        ip_value: u32,
        count: u16,
        pbuffer: *mut u8,
    ) {
        VL53LX_VL53LX_i2c_encode_uint32_t(self, ip_value, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_uint32_t(&mut self, count: u16, pbuffer: *mut u8) -> u32 {
        VL53LX_VL53LX_i2c_decode_uint32_t(self, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_with_mask(
        &mut self,
        count: u16,
        pbuffer: *mut u8,
        bit_mask: u32,
        down_shift: u32,
        offset: u32,
    ) -> u32 {
        VL53LX_VL53LX_i2c_decode_with_mask(self, count, pbuffer, bit_mask, down_shift, offset)
    }
    #[inline]
    unsafe fn VL53LX_i2c_encode_int32_t(
        &mut self,
        ip_value: i32,
        count: u16,
        pbuffer: *mut u8,
    ) {
        VL53LX_VL53LX_i2c_encode_int32_t(self, ip_value, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_i2c_decode_int32_t(&mut self, count: u16, pbuffer: *mut u8) -> i32 {
        VL53LX_VL53LX_i2c_decode_int32_t(self, count, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_start_test(&mut self, test_mode__ctrl: u8) -> VL53LX_Error {
        VL53LX_VL53LX_start_test(self, test_mode__ctrl)
    }
    #[inline]
    unsafe fn VL53LX_set_firmware_enable_register(&mut self, value: u8) -> VL53LX_Error {
        VL53LX_VL53LX_set_firmware_enable_register(self, value)
    }
    #[inline]
    unsafe fn VL53LX_enable_firmware(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_enable_firmware(self)
    }
    #[inline]
    unsafe fn VL53LX_disable_firmware(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_disable_firmware(self)
    }
    #[inline]
    unsafe fn VL53LX_set_powerforce_register(&mut self, value: u8) -> VL53LX_Error {
        VL53LX_VL53LX_set_powerforce_register(self, value)
    }
    #[inline]
    unsafe fn VL53LX_enable_powerforce(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_enable_powerforce(self)
    }
    #[inline]
    unsafe fn VL53LX_disable_powerforce(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_disable_powerforce(self)
    }
    #[inline]
    unsafe fn VL53LX_clear_interrupt(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_clear_interrupt(self)
    }
    #[inline]
    unsafe fn VL53LX_force_shadow_stream_count_to_zero(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_force_shadow_stream_count_to_zero(self)
    }
    #[inline]
    unsafe fn VL53LX_calc_macro_period_us(
        &mut self,
        fast_osc_frequency: u16,
        VL53LX_p_005: u8,
    ) -> u32 {
        VL53LX_VL53LX_calc_macro_period_us(self, fast_osc_frequency, VL53LX_p_005)
    }
    #[inline]
    unsafe fn VL53LX_calc_range_ignore_threshold(
        &mut self,
        central_rate: u32,
        x_gradient: i16,
        y_gradient: i16,
        rate_mult: u8,
    ) -> u16 {
        VL53LX_VL53LX_calc_range_ignore_threshold(
            self,
            central_rate,
            x_gradient,
            y_gradient,
            rate_mult,
        )
    }
    #[inline]
    unsafe fn VL53LX_calc_timeout_mclks(
        &mut self,
        timeout_us: u32,
        macro_period_us: u32,
    ) -> u32 {
        VL53LX_VL53LX_calc_timeout_mclks(self, timeout_us, macro_period_us)
    }
    #[inline]
    unsafe fn VL53LX_calc_encoded_timeout(
        &mut self,
        timeout_us: u32,
        macro_period_us: u32,
    ) -> u16 {
        VL53LX_VL53LX_calc_encoded_timeout(self, timeout_us, macro_period_us)
    }
    #[inline]
    unsafe fn VL53LX_calc_timeout_us(
        &mut self,
        timeout_mclks: u32,
        macro_period_us: u32,
    ) -> u32 {
        VL53LX_VL53LX_calc_timeout_us(self, timeout_mclks, macro_period_us)
    }
    #[inline]
    unsafe fn VL53LX_calc_decoded_timeout_us(
        &mut self,
        timeout_encoded: u16,
        macro_period_us: u32,
    ) -> u32 {
        VL53LX_VL53LX_calc_decoded_timeout_us(self, timeout_encoded, macro_period_us)
    }
    #[inline]
    unsafe fn VL53LX_encode_timeout(&mut self, timeout_mclks: u32) -> u16 {
        VL53LX_VL53LX_encode_timeout(self, timeout_mclks)
    }
    #[inline]
    unsafe fn VL53LX_decode_timeout(&mut self, encoded_timeout: u16) -> u32 {
        VL53LX_VL53LX_decode_timeout(self, encoded_timeout)
    }
    #[inline]
    unsafe fn VL53LX_calc_timeout_register_values(
        &mut self,
        phasecal_config_timeout_us: u32,
        mm_config_timeout_us: u32,
        range_config_timeout_us: u32,
        fast_osc_frequency: u16,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_calc_timeout_register_values(
            self,
            phasecal_config_timeout_us,
            mm_config_timeout_us,
            range_config_timeout_us,
            fast_osc_frequency,
            pgeneral,
            ptiming,
        )
    }
    #[inline]
    unsafe fn VL53LX_encode_vcsel_period(&mut self, VL53LX_p_030: u8) -> u8 {
        VL53LX_VL53LX_encode_vcsel_period(self, VL53LX_p_030)
    }
    #[inline]
    unsafe fn VL53LX_decode_unsigned_integer(
        &mut self,
        pbuffer: *mut u8,
        no_of_bytes: u8,
    ) -> u32 {
        VL53LX_VL53LX_decode_unsigned_integer(self, pbuffer, no_of_bytes)
    }
    #[inline]
    unsafe fn VL53LX_encode_unsigned_integer(
        &mut self,
        ip_value: u32,
        no_of_bytes: u8,
        pbuffer: *mut u8,
    ) {
        VL53LX_VL53LX_encode_unsigned_integer(self, ip_value, no_of_bytes, pbuffer)
    }
    #[inline]
    unsafe fn VL53LX_hist_copy_and_scale_ambient_info(
        &mut self,
        pidata: *mut VL53LX_zone_hist_info_t,
        podata: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_copy_and_scale_ambient_info(self, pidata, podata)
    }
    #[inline]
    unsafe fn VL53LX_hist_get_bin_sequence_config(
        &mut self,
        pdata: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_hist_get_bin_sequence_config(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_hist_phase_consistency_check(
        &mut self,
        phist_prev: *mut VL53LX_zone_hist_info_t,
        prange_prev: *mut VL53LX_zone_objects_t,
        prange_curr: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_phase_consistency_check(self, phist_prev, prange_prev, prange_curr)
    }
    #[inline]
    unsafe fn VL53LX_hist_events_consistency_check(
        &mut self,
        event_sigma: u8,
        min_effective_spad_count: u16,
        phist_prev: *mut VL53LX_zone_hist_info_t,
        prange_prev: *mut VL53LX_object_data_t,
        prange_curr: *mut VL53LX_range_data_t,
        pevents_tolerance: *mut i32,
        pevents_delta: *mut i32,
        prange_status: *mut VL53LX_DeviceError,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_events_consistency_check(
            self,
            event_sigma,
            min_effective_spad_count,
            phist_prev,
            prange_prev,
            prange_curr,
            pevents_tolerance,
            pevents_delta,
            prange_status,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_merged_pulse_check(
        &mut self,
        min_max_tolerance_mm: i16,
        pdata: *mut VL53LX_range_data_t,
        prange_status: *mut VL53LX_DeviceError,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_merged_pulse_check(self, min_max_tolerance_mm, pdata, prange_status)
    }
    #[inline]
    unsafe fn VL53LX_hist_xmonitor_consistency_check(
        &mut self,
        phist_prev: *mut VL53LX_zone_hist_info_t,
        prange_prev: *mut VL53LX_zone_objects_t,
        prange_curr: *mut VL53LX_range_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xmonitor_consistency_check(self, phist_prev, prange_prev, prange_curr)
    }
    #[inline]
    unsafe fn VL53LX_hist_wrap_dmax(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pcurrent: *mut VL53LX_histogram_bin_data_t,
        pwrap_dmax_mm: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_wrap_dmax(self, phistpostprocess, pcurrent, pwrap_dmax_mm)
    }
    #[inline]
    unsafe fn VL53LX_hist_combine_mm1_mm2_offsets(
        &mut self,
        mm1_offset_mm: i16,
        mm2_offset_mm: i16,
        encoded_mm_roi_centre: u8,
        encoded_mm_roi_size: u8,
        encoded_zone_centre: u8,
        encoded_zone_size: u8,
        pcal_data: *mut VL53LX_additional_offset_cal_data_t,
        pgood_spads: *mut u8,
        aperture_attenuation: u16,
        prange_offset_mm: *mut i16,
    ) {
        VL53LX_VL53LX_hist_combine_mm1_mm2_offsets(
            self,
            mm1_offset_mm,
            mm2_offset_mm,
            encoded_mm_roi_centre,
            encoded_mm_roi_size,
            encoded_zone_centre,
            encoded_zone_size,
            pcal_data,
            pgood_spads,
            aperture_attenuation,
            prange_offset_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_calc_window(
        &mut self,
        target_distance_mm: i16,
        target_width_oversize: u16,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_extract_calc_window(
            self,
            target_distance_mm,
            target_width_oversize,
            phist_bins,
            pxtalk_data,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_calc_event_sums(
        &mut self,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_extract_calc_event_sums(self, phist_bins, pxtalk_data)
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_calc_rate_per_spad(
        &mut self,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_extract_calc_rate_per_spad(self, pxtalk_data)
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_calc_shape(
        &mut self,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_extract_calc_shape(self, pxtalk_data, pxtalk_shape)
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_shape_model(
        &mut self,
        events_per_bin: u16,
        pulse_centre: u16,
        pulse_width: u16,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_shape_model(
            self,
            events_per_bin,
            pulse_centre,
            pulse_width,
            pxtalk_shape,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_shape_model_interp(
        &mut self,
        events_per_bin: u16,
        phase_delta: u32,
    ) -> u16 {
        VL53LX_VL53LX_hist_xtalk_shape_model_interp(self, events_per_bin, phase_delta)
    }
    #[inline]
    unsafe fn VL53LX_spad_number_to_byte_bit_index(
        &mut self,
        spad_number: u8,
        pbyte_index: *mut u8,
        pbit_index: *mut u8,
        pbit_mask: *mut u8,
    ) {
        VL53LX_VL53LX_spad_number_to_byte_bit_index(
            self,
            spad_number,
            pbyte_index,
            pbit_index,
            pbit_mask,
        )
    }
    #[inline]
    unsafe fn VL53LX_encode_row_col(&mut self, row: u8, col: u8, pspad_number: *mut u8) {
        VL53LX_VL53LX_encode_row_col(self, row, col, pspad_number)
    }
    #[inline]
    unsafe fn VL53LX_decode_zone_size(
        &mut self,
        encoded_xy_size: u8,
        pwidth: *mut u8,
        pheight: *mut u8,
    ) {
        VL53LX_VL53LX_decode_zone_size(self, encoded_xy_size, pwidth, pheight)
    }
    #[inline]
    unsafe fn VL53LX_encode_zone_size(
        &mut self,
        width: u8,
        height: u8,
        pencoded_xy_size: *mut u8,
    ) {
        VL53LX_VL53LX_encode_zone_size(self, width, height, pencoded_xy_size)
    }
    #[inline]
    unsafe fn VL53LX_decode_zone_limits(
        &mut self,
        encoded_xy_centre: u8,
        encoded_xy_size: u8,
        px_ll: *mut i16,
        py_ll: *mut i16,
        px_ur: *mut i16,
        py_ur: *mut i16,
    ) {
        VL53LX_VL53LX_decode_zone_limits(
            self,
            encoded_xy_centre,
            encoded_xy_size,
            px_ll,
            py_ll,
            px_ur,
            py_ur,
        )
    }
    #[inline]
    unsafe fn VL53LX_is_aperture_location(&mut self, row: u8, col: u8) -> u8 {
        VL53LX_VL53LX_is_aperture_location(self, row, col)
    }
    #[inline]
    unsafe fn VL53LX_calc_max_effective_spads(
        &mut self,
        encoded_zone_centre: u8,
        encoded_zone_size: u8,
        pgood_spads: *mut u8,
        aperture_attenuation: u16,
        pmax_effective_spads: *mut u16,
    ) {
        VL53LX_VL53LX_calc_max_effective_spads(
            self,
            encoded_zone_centre,
            encoded_zone_size,
            pgood_spads,
            aperture_attenuation,
            pmax_effective_spads,
        )
    }
    #[inline]
    unsafe fn VL53LX_calc_mm_effective_spads(
        &mut self,
        encoded_mm_roi_centre: u8,
        encoded_mm_roi_size: u8,
        encoded_zone_centre: u8,
        encoded_zone_size: u8,
        pgood_spads: *mut u8,
        aperture_attenuation: u16,
        pmm_inner_effective_spads: *mut u16,
        pmm_outer_effective_spads: *mut u16,
    ) {
        VL53LX_VL53LX_calc_mm_effective_spads(
            self,
            encoded_mm_roi_centre,
            encoded_mm_roi_size,
            encoded_zone_centre,
            encoded_zone_size,
            pgood_spads,
            aperture_attenuation,
            pmm_inner_effective_spads,
            pmm_outer_effective_spads,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_copy_results_to_sys_and_core(
        &mut self,
        pbins: *mut VL53LX_histogram_bin_data_t,
        phist: *mut VL53LX_range_results_t,
        psys: *mut VL53LX_system_results_t,
        pcore: *mut VL53LX_core_results_t,
    ) {
        VL53LX_VL53LX_hist_copy_results_to_sys_and_core(self, pbins, phist, psys, pcore)
    }
    #[inline]
    unsafe fn VL53LX_sum_histogram_data(
        &mut self,
        phist_input: *mut VL53LX_histogram_bin_data_t,
        phist_output: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_sum_histogram_data(self, phist_input, phist_output)
    }
    #[inline]
    unsafe fn VL53LX_avg_histogram_data(
        &mut self,
        no_of_samples: u8,
        phist_sum: *mut VL53LX_histogram_bin_data_t,
        phist_avg: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_avg_histogram_data(self, no_of_samples, phist_sum, phist_avg)
    }
    #[inline]
    unsafe fn VL53LX_save_cfg_data(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_save_cfg_data(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_zone_update(
        &mut self,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_zone_update(self, presults)
    }
    #[inline]
    unsafe fn VL53LX_update_internal_stream_counters(
        &mut self,
        external_stream_count: u8,
        pinternal_stream_count: *mut u8,
        pinternal_stream_count_val: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_update_internal_stream_counters(
            self,
            external_stream_count,
            pinternal_stream_count,
            pinternal_stream_count_val,
        )
    }
    #[inline]
    unsafe fn VL53LX_multizone_hist_bins_update(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_multizone_hist_bins_update(self)
    }
    #[inline]
    unsafe fn VL53LX_set_histogram_multizone_initial_bin_config(
        &mut self,
        pzone_cfg: *mut VL53LX_zone_config_t,
        phist_cfg: *mut VL53LX_histogram_config_t,
        pmulti_hist: *mut VL53LX_histogram_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_histogram_multizone_initial_bin_config(
            self,
            pzone_cfg,
            phist_cfg,
            pmulti_hist,
        )
    }
    #[inline]
    unsafe fn VL53LX_encode_GPIO_interrupt_config(
        &mut self,
        pintconf: *mut VL53LX_GPIO_interrupt_config_t,
    ) -> u8 {
        VL53LX_VL53LX_encode_GPIO_interrupt_config(self, pintconf)
    }
    #[inline]
    unsafe fn VL53LX_decode_GPIO_interrupt_config(
        &mut self,
        system__interrupt_config: u8,
    ) -> VL53LX_GPIO_interrupt_config_t {
        VL53LX_VL53LX_decode_GPIO_interrupt_config(self, system__interrupt_config)
    }
    #[inline]
    unsafe fn VL53LX_set_GPIO_distance_threshold(
        &mut self,
        threshold_high: u16,
        threshold_low: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_GPIO_distance_threshold(self, threshold_high, threshold_low)
    }
    #[inline]
    unsafe fn VL53LX_set_GPIO_rate_threshold(
        &mut self,
        threshold_high: u16,
        threshold_low: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_GPIO_rate_threshold(self, threshold_high, threshold_low)
    }
    #[inline]
    unsafe fn VL53LX_set_GPIO_thresholds_from_struct(
        &mut self,
        pintconf: *mut VL53LX_GPIO_interrupt_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_GPIO_thresholds_from_struct(self, pintconf)
    }
    #[inline]
    unsafe fn VL53LX_set_ref_spad_char_config(
        &mut self,
        vcsel_period_a: u8,
        phasecal_timeout_us: u32,
        total_rate_target_mcps: u16,
        max_count_rate_rtn_limit_mcps: u16,
        min_count_rate_rtn_limit_mcps: u16,
        fast_osc_frequency: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_ref_spad_char_config(
            self,
            vcsel_period_a,
            phasecal_timeout_us,
            total_rate_target_mcps,
            max_count_rate_rtn_limit_mcps,
            min_count_rate_rtn_limit_mcps,
            fast_osc_frequency,
        )
    }
    #[inline]
    unsafe fn VL53LX_set_ssc_config(
        &mut self,
        pssc_cfg: *mut VL53LX_ssc_config_t,
        fast_osc_frequency: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_set_ssc_config(self, pssc_cfg, fast_osc_frequency)
    }
    #[inline]
    unsafe fn VL53LX_get_spad_rate_data(
        &mut self,
        pspad_rates: *mut VL53LX_spad_rate_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_spad_rate_data(self, pspad_rates)
    }
    #[inline]
    unsafe fn VL53LX_calc_crosstalk_plane_offset_with_margin(
        &mut self,
        plane_offset_kcps: u32,
        margin_offset_kcps: i16,
    ) -> u32 {
        VL53LX_VL53LX_calc_crosstalk_plane_offset_with_margin(
            self,
            plane_offset_kcps,
            margin_offset_kcps,
        )
    }
    #[inline]
    unsafe fn VL53LX_low_power_auto_data_init(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_low_power_auto_data_init(self)
    }
    #[inline]
    unsafe fn VL53LX_low_power_auto_data_stop_range(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_low_power_auto_data_stop_range(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_calc_required_samples(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_calc_required_samples(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
        &mut self,
        xtalk_offset_out: u32,
        pconfig: *mut VL53LX_smudge_corrector_config_t,
        pout: *mut VL53LX_smudge_corrector_data_t,
        add_smudge: u8,
        soft_update: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
            self,
            xtalk_offset_out,
            pconfig,
            pout,
            add_smudge,
            soft_update,
        )
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_corrector(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_corrector(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_data_init(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_data_init(self)
    }
    #[inline]
    unsafe fn VL53LX_dynamic_xtalk_correction_output_init(
        &mut self,
        pres: *mut VL53LX_LLDriverResults_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_dynamic_xtalk_correction_output_init(self, pres)
    }
    #[inline]
    unsafe fn VL53LX_xtalk_cal_data_init(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_xtalk_cal_data_init(self)
    }
    #[inline]
    unsafe fn VL53LX_config_low_power_auto_mode(
        &mut self,
        pgeneral: *mut VL53LX_general_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_config_low_power_auto_mode(self, pgeneral, pdynamic, plpadata)
    }
    #[inline]
    unsafe fn VL53LX_low_power_auto_setup_manual_calibration(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_low_power_auto_setup_manual_calibration(self)
    }
    #[inline]
    unsafe fn VL53LX_low_power_auto_update_DSS(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_low_power_auto_update_DSS(self)
    }
    #[inline]
    unsafe fn VL53LX_compute_histo_merge_nb(
        &mut self,
        histo_merge_nb: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_compute_histo_merge_nb(self, histo_merge_nb)
    }
    #[inline]
    unsafe fn VL53LX_wait_for_boot_completion(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_wait_for_boot_completion(self)
    }
    #[inline]
    unsafe fn VL53LX_wait_for_firmware_ready(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_wait_for_firmware_ready(self)
    }
    #[inline]
    unsafe fn VL53LX_wait_for_range_completion(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_wait_for_range_completion(self)
    }
    #[inline]
    unsafe fn VL53LX_wait_for_test_completion(&mut self) -> VL53LX_Error {
        VL53LX_VL53LX_wait_for_test_completion(self)
    }
    #[inline]
    unsafe fn VL53LX_is_boot_complete(&mut self, pready: *mut u8) -> VL53LX_Error {
        VL53LX_VL53LX_is_boot_complete(self, pready)
    }
    #[inline]
    unsafe fn VL53LX_is_firmware_ready(&mut self, pready: *mut u8) -> VL53LX_Error {
        VL53LX_VL53LX_is_firmware_ready(self, pready)
    }
    #[inline]
    unsafe fn VL53LX_is_new_data_ready(&mut self, pready: *mut u8) -> VL53LX_Error {
        VL53LX_VL53LX_is_new_data_ready(self, pready)
    }
    #[inline]
    unsafe fn VL53LX_poll_for_boot_completion(&mut self, timeout_ms: u32) -> VL53LX_Error {
        VL53LX_VL53LX_poll_for_boot_completion(self, timeout_ms)
    }
    #[inline]
    unsafe fn VL53LX_poll_for_firmware_ready(&mut self, timeout_ms: u32) -> VL53LX_Error {
        VL53LX_VL53LX_poll_for_firmware_ready(self, timeout_ms)
    }
    #[inline]
    unsafe fn VL53LX_poll_for_range_completion(&mut self, timeout_ms: u32) -> VL53LX_Error {
        VL53LX_VL53LX_poll_for_range_completion(self, timeout_ms)
    }
    #[inline]
    unsafe fn VL53LX_init_zone_config_structure(
        &mut self,
        x_off: u8,
        x_inc: u8,
        x_zones: u8,
        y_off: u8,
        y_inc: u8,
        y_zones: u8,
        width: u8,
        height: u8,
        pdata: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_zone_config_structure(
            self, x_off, x_inc, x_zones, y_off, y_inc, y_zones, width, height, pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_zone_preset_xtalk_planar(
        &mut self,
        pgeneral: *mut VL53LX_general_config_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_zone_preset_xtalk_planar(self, pgeneral, pzone_cfg)
    }
    #[inline]
    unsafe fn VL53LX_init_zone_config_histogram_bins(
        &mut self,
        pdata: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_zone_config_histogram_bins(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_refspadchar_config_struct(
        &mut self,
        pdata: *mut VL53LX_refspadchar_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_refspadchar_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_ssc_config_struct(
        &mut self,
        pdata: *mut VL53LX_ssc_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_ssc_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_xtalk_config_struct(
        &mut self,
        pnvm: *mut VL53LX_customer_nvm_managed_t,
        pdata: *mut VL53LX_xtalk_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_xtalk_config_struct(self, pnvm, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_xtalk_extract_config_struct(
        &mut self,
        pdata: *mut VL53LX_xtalkextract_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_xtalk_extract_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_offset_cal_config_struct(
        &mut self,
        pdata: *mut VL53LX_offsetcal_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_offset_cal_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_zone_cal_config_struct(
        &mut self,
        pdata: *mut VL53LX_zonecal_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_zone_cal_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_hist_post_process_config_struct(
        &mut self,
        xtalk_compensation_enable: u8,
        pdata: *mut VL53LX_hist_post_process_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_hist_post_process_config_struct(self, xtalk_compensation_enable, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_dmax_calibration_data_struct(
        &mut self,
        pdata: *mut VL53LX_dmax_calibration_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_dmax_calibration_data_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_tuning_parm_storage_struct(
        &mut self,
        pdata: *mut VL53LX_tuning_parm_storage_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_tuning_parm_storage_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_init_hist_gen3_dmax_config_struct(
        &mut self,
        pdata: *mut VL53LX_hist_gen3_dmax_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_init_hist_gen3_dmax_config_struct(self, pdata)
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_standard_ranging(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_standard_ranging(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_standard_ranging_short_range(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_standard_ranging_short_range(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_standard_ranging_long_range(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_standard_ranging_long_range(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_standard_ranging_mm1_cal(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_standard_ranging_mm1_cal(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_standard_ranging_mm2_cal(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_standard_ranging_mm2_cal(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_timed_ranging(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_timed_ranging(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_timed_ranging_short_range(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_timed_ranging_short_range(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_timed_ranging_long_range(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_timed_ranging_long_range(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_low_power_auto_ranging(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_low_power_auto_ranging(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
            plpadata,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_low_power_auto_short_ranging(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_low_power_auto_short_ranging(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
            plpadata,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_low_power_auto_long_ranging(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
        plpadata: *mut VL53LX_low_power_auto_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_low_power_auto_long_ranging(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
            plpadata,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging_with_mm1(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging_with_mm1(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging_with_mm2(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging_with_mm2(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging_mm1_cal(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging_mm1_cal(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging_mm2_cal(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging_mm2_cal(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging_ref(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging_ref(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_characterisation(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_characterisation(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_xtalk_planar(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_xtalk_planar(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_xtalk_mm1(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_xtalk_mm1(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_xtalk_mm2(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_xtalk_mm2(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_multizone(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_multizone(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_multizone_short_range(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_multizone_short_range(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_multizone_long_range(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_multizone_long_range(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_ranging_short_timing(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_ranging_short_timing(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_long_range(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_long_range(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_medium_range(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_medium_range(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_short_range(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_short_range(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_special_histogram_short_range(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_special_histogram_short_range(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_long_range_mm1(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_long_range_mm1(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_long_range_mm2(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_long_range_mm2(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_medium_range_mm1(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_medium_range_mm1(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_medium_range_mm2(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_medium_range_mm2(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_short_range_mm1(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_short_range_mm1(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_histogram_short_range_mm2(
        &mut self,
        phistpostprocess: *mut VL53LX_hist_post_process_config_t,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_histogram_short_range_mm2(
            self,
            phistpostprocess,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_olt(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_olt(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_preset_mode_singleshot_ranging(
        &mut self,
        pstatic: *mut VL53LX_static_config_t,
        phistogram: *mut VL53LX_histogram_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
        psystem: *mut VL53LX_system_control_t,
        ptuning_parms: *mut VL53LX_tuning_parm_storage_t,
        pzone_cfg: *mut VL53LX_zone_config_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_preset_mode_singleshot_ranging(
            self,
            pstatic,
            phistogram,
            pgeneral,
            ptiming,
            pdynamic,
            psystem,
            ptuning_parms,
            pzone_cfg,
        )
    }
    #[inline]
    unsafe fn VL53LX_copy_hist_cfg_to_static_cfg(
        &mut self,
        phistogram: *mut VL53LX_histogram_config_t,
        pstatic: *mut VL53LX_static_config_t,
        pgeneral: *mut VL53LX_general_config_t,
        ptiming: *mut VL53LX_timing_config_t,
        pdynamic: *mut VL53LX_dynamic_config_t,
    ) {
        VL53LX_VL53LX_copy_hist_cfg_to_static_cfg(
            self, phistogram, pstatic, pgeneral, ptiming, pdynamic,
        )
    }
    #[inline]
    unsafe fn VL53LX_copy_hist_bins_to_static_cfg(
        &mut self,
        phistogram: *mut VL53LX_histogram_config_t,
        pstatic: *mut VL53LX_static_config_t,
        ptiming: *mut VL53LX_timing_config_t,
    ) {
        VL53LX_VL53LX_copy_hist_bins_to_static_cfg(self, phistogram, pstatic, ptiming)
    }
    #[inline]
    unsafe fn VL53LX_is_firmware_ready_silicon(&mut self, pready: *mut u8) -> VL53LX_Error {
        VL53LX_VL53LX_is_firmware_ready_silicon(self, pready)
    }
    #[inline]
    unsafe fn VL53LX_f_022(
        &mut self,
        VL53LX_p_032: u8,
        filter_woi: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pa: *mut i32,
        pb: *mut i32,
        pc: *mut i32,
    ) {
        VL53LX_VL53LX_f_022(self, VL53LX_p_032, filter_woi, pbins, pa, pb, pc)
    }
    #[inline]
    unsafe fn VL53LX_f_018(
        &mut self,
        vcsel_width: u16,
        fast_osc_frequency: u16,
        total_periods_elapsed: u32,
        VL53LX_p_004: u16,
        pdata: *mut VL53LX_range_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_018(
            self,
            vcsel_width,
            fast_osc_frequency,
            total_periods_elapsed,
            VL53LX_p_004,
            pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_019(
        &mut self,
        gain_factor: u16,
        range_offset_mm: i16,
        pdata: *mut VL53LX_range_data_t,
    ) {
        VL53LX_VL53LX_f_019(self, gain_factor, range_offset_mm, pdata)
    }
    #[inline]
    unsafe fn VL53LX_f_029(
        &mut self,
        pdata: *mut VL53LX_histogram_bin_data_t,
        ambient_estimate_counts_per_bin: i32,
    ) {
        VL53LX_VL53LX_f_029(self, pdata, ambient_estimate_counts_per_bin)
    }
    #[inline]
    unsafe fn VL53LX_f_005(
        &mut self,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_realigned: *mut VL53LX_histogram_bin_data_t,
    ) {
        VL53LX_VL53LX_f_005(self, pxtalk, pbins, pxtalk_realigned)
    }
    #[inline]
    unsafe fn VL53LX_f_030(
        &mut self,
        pdata1: *mut VL53LX_histogram_bin_data_t,
        pdata2: *mut VL53LX_histogram_bin_data_t,
    ) -> i8 {
        VL53LX_VL53LX_f_030(self, pdata1, pdata2)
    }
    #[inline]
    unsafe fn VL53LX_f_031(
        &mut self,
        pidata: *mut VL53LX_histogram_bin_data_t,
        podata: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_031(self, pidata, podata)
    }
    #[inline]
    unsafe fn VL53LX_xtalk_calibration_process_data(
        &mut self,
        pxtalk_ranges: *mut VL53LX_xtalk_range_results_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pxtalk_cal: *mut VL53LX_xtalk_calibration_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_xtalk_calibration_process_data(self, pxtalk_ranges, pxtalk_shape, pxtalk_cal)
    }
    #[inline]
    unsafe fn VL53LX_f_041(
        &mut self,
        pavg_bins: *mut VL53LX_histogram_bin_data_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        pxtalk_data: *mut VL53LX_xtalk_range_data_t,
        histogram__window_start: u8,
        histogram__window_end: u8,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_041(
            self,
            pavg_bins,
            pdebug,
            pxtalk_data,
            histogram__window_start,
            histogram__window_end,
            pxtalk_shape,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_039(
        &mut self,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        xgradient: *mut i16,
        ygradient: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_039(self, pxtalk_results, pdebug, xgradient, ygradient)
    }
    #[inline]
    unsafe fn VL53LX_f_040(
        &mut self,
        pxtalk_data: *mut VL53LX_xtalk_range_data_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        xtalk_mean_offset_kcps: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_040(self, pxtalk_data, pdebug, xtalk_mean_offset_kcps)
    }
    #[inline]
    unsafe fn VL53LX_f_045(
        &mut self,
        phist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_xtalk_range_data_t,
        pdebug: *mut VL53LX_xtalk_algo_data_t,
        pxtalk_histo: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_045(self, phist_data, pxtalk_data, pdebug, pxtalk_histo)
    }
    #[inline]
    unsafe fn VL53LX_f_032(
        &mut self,
        mean_offset: u32,
        xgradient: i16,
        ygradient: i16,
        centre_offset_x: i8,
        centre_offset_y: i8,
        roi_effective_spads: u16,
        roi_centre_spad: u8,
        roi_xy_size: u8,
        xtalk_rate_kcps: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_032(
            self,
            mean_offset,
            xgradient,
            ygradient,
            centre_offset_x,
            centre_offset_y,
            roi_effective_spads,
            roi_centre_spad,
            roi_xy_size,
            xtalk_rate_kcps,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_033(
        &mut self,
        phist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_xtalk_histogram_shape_t,
        xtalk_rate_kcps: u32,
        pxtalkcount_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_033(
            self,
            phist_data,
            pxtalk_data,
            xtalk_rate_kcps,
            pxtalkcount_data,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_047(
        &mut self,
        phist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_histogram_bin_data_t,
        xtalk_bin_offset: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_047(self, phist_data, pxtalk_data, xtalk_bin_offset)
    }
    #[inline]
    unsafe fn VL53LX_f_044(
        &mut self,
        pxtalk_data: *mut VL53LX_histogram_bin_data_t,
        amb_threshold: u32,
        VL53LX_p_019: u8,
        VL53LX_p_024: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_044(self, pxtalk_data, amb_threshold, VL53LX_p_019, VL53LX_p_024)
    }
    #[inline]
    unsafe fn VL53LX_f_046(
        &mut self,
        pcustomer: *mut VL53LX_customer_nvm_managed_t,
        pdyn_cfg: *mut VL53LX_dynamic_config_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_data_t,
        pip_hist_data: *mut VL53LX_histogram_bin_data_t,
        pop_hist_data: *mut VL53LX_histogram_bin_data_t,
        pxtalk_count_data: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_046(
            self,
            pcustomer,
            pdyn_cfg,
            pxtalk_shape,
            pip_hist_data,
            pop_hist_data,
            pxtalk_count_data,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_043(
        &mut self,
        sigma_mult: u8,
        VL53LX_p_028: i32,
        ambient_noise: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_043(self, sigma_mult, VL53LX_p_028, ambient_noise)
    }
    #[inline]
    unsafe fn VL53LX_generate_dual_reflectance_xtalk_samples(
        &mut self,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        expected_target_distance_mm: u16,
        higher_reflectance: u8,
        pxtalk_avg_samples: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_generate_dual_reflectance_xtalk_samples(
            self,
            pxtalk_results,
            expected_target_distance_mm,
            higher_reflectance,
            pxtalk_avg_samples,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_042(
        &mut self,
        pzone_avg_1: *mut VL53LX_histogram_bin_data_t,
        pzone_avg_2: *mut VL53LX_histogram_bin_data_t,
        expected_target_distance: u16,
        subtract_amb: u8,
        higher_reflectance: u8,
        pxtalk_output: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_042(
            self,
            pzone_avg_1,
            pzone_avg_2,
            expected_target_distance,
            subtract_amb,
            higher_reflectance,
            pxtalk_output,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_034(
        &mut self,
        sigma_estimator__effective_pulse_width_ns: u8,
        sigma_estimator__effective_ambient_width_ns: u8,
        sigma_estimator__sigma_ref_mm: u8,
        pdata: *mut VL53LX_range_data_t,
    ) -> u16 {
        VL53LX_VL53LX_f_034(
            self,
            sigma_estimator__effective_pulse_width_ns,
            sigma_estimator__effective_ambient_width_ns,
            sigma_estimator__sigma_ref_mm,
            pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_036(
        &mut self,
        sigma_estimator__effective_pulse_width_ns: u8,
        sigma_estimator__effective_ambient_width_ns: u8,
        sigma_estimator__sigma_ref_mm: u8,
        pdata: *mut VL53LX_range_data_t,
    ) -> u16 {
        VL53LX_VL53LX_f_036(
            self,
            sigma_estimator__effective_pulse_width_ns,
            sigma_estimator__effective_ambient_width_ns,
            sigma_estimator__sigma_ref_mm,
            pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_037(
        &mut self,
        sigma_estimator__sigma_ref_mm: u8,
        VL53LX_p_007: u32,
        VL53LX_p_032: u32,
        VL53LX_p_001: u32,
        a_zp: u32,
        c_zp: u32,
        bx: u32,
        ax_zp: u32,
        cx_zp: u32,
        VL53LX_p_028: u32,
        fast_osc_frequency: u16,
        psigma_est: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_037(
            self,
            sigma_estimator__sigma_ref_mm,
            VL53LX_p_007,
            VL53LX_p_032,
            VL53LX_p_001,
            a_zp,
            c_zp,
            bx,
            ax_zp,
            cx_zp,
            VL53LX_p_028,
            fast_osc_frequency,
            psigma_est,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_023(
        &mut self,
        sigma_estimator__sigma_ref_mm: u8,
        VL53LX_p_007: u32,
        VL53LX_p_032: u32,
        VL53LX_p_001: u32,
        a_zp: u32,
        c_zp: u32,
        bx: u32,
        ax_zp: u32,
        cx_zp: u32,
        VL53LX_p_028: u32,
        fast_osc_frequency: u16,
        psigma_est: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_023(
            self,
            sigma_estimator__sigma_ref_mm,
            VL53LX_p_007,
            VL53LX_p_032,
            VL53LX_p_001,
            a_zp,
            c_zp,
            bx,
            ax_zp,
            cx_zp,
            VL53LX_p_028,
            fast_osc_frequency,
            psigma_est,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_038(&mut self, VL53LX_p_007: u64, size: u32) -> u32 {
        VL53LX_VL53LX_f_038(self, VL53LX_p_007, size)
    }
    #[inline]
    unsafe fn VL53LX_f_035(&mut self, VL53LX_p_007: u32, VL53LX_p_032: u32) -> u32 {
        VL53LX_VL53LX_f_035(self, VL53LX_p_007, VL53LX_p_032)
    }
    #[inline]
    unsafe fn VL53LX_f_003(&mut self, palgo: *mut VL53LX_hist_gen3_algo_private_data_t) {
        VL53LX_VL53LX_f_003(self, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_004(
        &mut self,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pdmax_algo: *mut VL53LX_hist_gen3_dmax_private_data_t,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_004(
            self, pdmax_cal, pdmax_cfg, ppost_cfg, pbins, pxtalk, palgo, pdmax_algo, presults,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_006(
        &mut self,
        ambient_threshold_events_scaler: u16,
        ambient_threshold_sigma: i32,
        min_ambient_threshold_events: i32,
        algo__crosstalk_compensation_enable: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_006(
            self,
            ambient_threshold_events_scaler,
            ambient_threshold_sigma,
            min_ambient_threshold_events,
            algo__crosstalk_compensation_enable,
            pbins,
            pxtalk,
            palgo,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_007(
        &mut self,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_007(self, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_008(
        &mut self,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_008(self, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_009(
        &mut self,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_009(self, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_016(
        &mut self,
        target_order: VL53LX_HistTargetOrder,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_016(self, target_order, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_010(
        &mut self,
        pulse_no: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_010(self, pulse_no, pbins, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_015(
        &mut self,
        pulse_no: u8,
        clip_events: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_015(self, pulse_no, clip_events, pbins, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_020(
        &mut self,
        VL53LX_p_019: i16,
        VL53LX_p_024: i16,
        VL53LX_p_030: u8,
        clip_events: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pphase: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_020(
            self,
            VL53LX_p_019,
            VL53LX_p_024,
            VL53LX_p_030,
            clip_events,
            pbins,
            pphase,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_011(
        &mut self,
        pulse_no: u8,
        pbins: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pad_value: i32,
        ppulse: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_011(self, pulse_no, pbins, palgo, pad_value, ppulse)
    }
    #[inline]
    unsafe fn VL53LX_f_012(
        &mut self,
        pulse_no: u8,
        ppulse: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_012(self, pulse_no, ppulse, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_013(
        &mut self,
        pulse_no: u8,
        noise_threshold: u16,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_013(self, pulse_no, noise_threshold, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_021(
        &mut self,
        bin: u8,
        filta0: i32,
        filta1: i32,
        VL53LX_p_030: u8,
        pmedian_phase: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_021(self, bin, filta0, filta1, VL53LX_p_030, pmedian_phase)
    }
    #[inline]
    unsafe fn VL53LX_f_014(
        &mut self,
        bin: u8,
        sigma_estimator__sigma_ref_mm: u8,
        VL53LX_p_030: u8,
        VL53LX_p_051: u8,
        crosstalk_compensation_enable: u8,
        phist_data_ap: *mut VL53LX_histogram_bin_data_t,
        phist_data_zp: *mut VL53LX_histogram_bin_data_t,
        pxtalk_hist: *mut VL53LX_histogram_bin_data_t,
        psigma_est: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_014(
            self,
            bin,
            sigma_estimator__sigma_ref_mm,
            VL53LX_p_030,
            VL53LX_p_051,
            crosstalk_compensation_enable,
            phist_data_ap,
            phist_data_zp,
            pxtalk_hist,
            psigma_est,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_017(
        &mut self,
        range_id: u8,
        valid_phase_low: u8,
        valid_phase_high: u8,
        sigma_thres: u16,
        pbins: *mut VL53LX_histogram_bin_data_t,
        ppulse: *mut VL53LX_hist_pulse_data_t,
        pdata: *mut VL53LX_range_data_t,
    ) {
        VL53LX_VL53LX_f_017(
            self,
            range_id,
            valid_phase_low,
            valid_phase_high,
            sigma_thres,
            pbins,
            ppulse,
            pdata,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_024(&mut self, palgo: *mut VL53LX_hist_gen4_algo_filtered_data_t) {
        VL53LX_VL53LX_f_024(self, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_025(
        &mut self,
        pdmax_cal: *mut VL53LX_dmax_calibration_data_t,
        pdmax_cfg: *mut VL53LX_hist_gen3_dmax_config_t,
        ppost_cfg: *mut VL53LX_hist_post_process_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pxtalk: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pfiltered: *mut VL53LX_hist_gen4_algo_filtered_data_t,
        pdmax_algo: *mut VL53LX_hist_gen3_dmax_private_data_t,
        presults: *mut VL53LX_range_results_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_025(
            self, pdmax_cal, pdmax_cfg, ppost_cfg, pbins, pxtalk, palgo, pfiltered, pdmax_algo,
            presults,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_026(
        &mut self,
        pulse_no: u8,
        ppulse: *mut VL53LX_histogram_bin_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
        pfiltered: *mut VL53LX_hist_gen4_algo_filtered_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_026(self, pulse_no, ppulse, palgo, pfiltered)
    }
    #[inline]
    unsafe fn VL53LX_f_027(
        &mut self,
        pulse_no: u8,
        noise_threshold: u16,
        pfiltered: *mut VL53LX_hist_gen4_algo_filtered_data_t,
        palgo: *mut VL53LX_hist_gen3_algo_private_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_027(self, pulse_no, noise_threshold, pfiltered, palgo)
    }
    #[inline]
    unsafe fn VL53LX_f_028(
        &mut self,
        bin: u8,
        VL53LX_p_007: i32,
        VL53LX_p_032: i32,
        VL53LX_p_001: i32,
        ax: i32,
        bx: i32,
        cx: i32,
        VL53LX_p_028: i32,
        VL53LX_p_030: u8,
        pmedian_phase: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_028(
            self,
            bin,
            VL53LX_p_007,
            VL53LX_p_032,
            VL53LX_p_001,
            ax,
            bx,
            cx,
            VL53LX_p_028,
            VL53LX_p_030,
            pmedian_phase,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_001(
        &mut self,
        target_reflectance: u16,
        pcal: *mut VL53LX_dmax_calibration_data_t,
        pcfg: *mut VL53LX_hist_gen3_dmax_config_t,
        pbins: *mut VL53LX_histogram_bin_data_t,
        pdata: *mut VL53LX_hist_gen3_dmax_private_data_t,
        pambient_dmax_mm: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_f_001(
            self,
            target_reflectance,
            pcal,
            pcfg,
            pbins,
            pdata,
            pambient_dmax_mm,
        )
    }
    #[inline]
    unsafe fn VL53LX_f_002(
        &mut self,
        events_threshold: u32,
        ref_signal_events: u32,
        ref_distance_mm: u32,
        signal_thresh_sigma: u32,
    ) -> u32 {
        VL53LX_VL53LX_f_002(
            self,
            events_threshold,
            ref_signal_events,
            ref_distance_mm,
            signal_thresh_sigma,
        )
    }
    #[inline]
    unsafe fn VL53LX_run_ref_spad_char(
        &mut self,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_ref_spad_char(self, pcal_status)
    }
    #[inline]
    unsafe fn VL53LX_run_device_test(
        &mut self,
        device_test_mode: VL53LX_DeviceTestMode,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_device_test(self, device_test_mode)
    }
    #[inline]
    unsafe fn VL53LX_run_spad_rate_map(
        &mut self,
        device_test_mode: VL53LX_DeviceTestMode,
        array_select: VL53LX_DeviceSscArray,
        ssc_config_timeout_us: u32,
        pspad_rate_data: *mut VL53LX_spad_rate_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_spad_rate_map(
            self,
            device_test_mode,
            array_select,
            ssc_config_timeout_us,
            pspad_rate_data,
        )
    }
    #[inline]
    unsafe fn VL53LX_run_xtalk_extraction(
        &mut self,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_xtalk_extraction(self, pcal_status)
    }
    #[inline]
    unsafe fn VL53LX_get_and_avg_xtalk_samples(
        &mut self,
        num_of_samples: u8,
        measurement_mode: u8,
        xtalk_filter_thresh_max_mm: i16,
        xtalk_filter_thresh_min_mm: i16,
        xtalk_max_valid_rate_kcps: u16,
        xtalk_result_id: u8,
        xtalk_histo_id: u8,
        pxtalk_results: *mut VL53LX_xtalk_range_results_t,
        psum_histo: *mut VL53LX_histogram_bin_data_t,
        pavg_histo: *mut VL53LX_histogram_bin_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_get_and_avg_xtalk_samples(
            self,
            num_of_samples,
            measurement_mode,
            xtalk_filter_thresh_max_mm,
            xtalk_filter_thresh_min_mm,
            xtalk_max_valid_rate_kcps,
            xtalk_result_id,
            xtalk_histo_id,
            pxtalk_results,
            psum_histo,
            pavg_histo,
        )
    }
    #[inline]
    unsafe fn VL53LX_run_offset_calibration(
        &mut self,
        cal_distance_mm: i16,
        cal_reflectance_pc: u16,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_offset_calibration(self, cal_distance_mm, cal_reflectance_pc, pcal_status)
    }
    #[inline]
    unsafe fn VL53LX_run_phasecal_average(
        &mut self,
        measurement_mode: u8,
        phasecal_result__vcsel_start: u8,
        phasecal_num_of_samples: u16,
        prange_results: *mut VL53LX_range_results_t,
        pphasecal_result__reference_phase: *mut u16,
        pzero_distance_phase: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_phasecal_average(
            self,
            measurement_mode,
            phasecal_result__vcsel_start,
            phasecal_num_of_samples,
            prange_results,
            pphasecal_result__reference_phase,
            pzero_distance_phase,
        )
    }
    #[inline]
    unsafe fn VL53LX_run_zone_calibration(
        &mut self,
        device_preset_mode: VL53LX_DevicePresetModes,
        zone_preset: VL53LX_DeviceZonePreset,
        pzone_cfg: *mut VL53LX_zone_config_t,
        cal_distance_mm: i16,
        cal_reflectance_pc: u16,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_zone_calibration(
            self,
            device_preset_mode,
            zone_preset,
            pzone_cfg,
            cal_distance_mm,
            cal_reflectance_pc,
            pcal_status,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_data_init(
        &mut self,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) {
        VL53LX_VL53LX_hist_xtalk_extract_data_init(self, pxtalk_data)
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_update(
        &mut self,
        target_distance_mm: i16,
        target_width_oversize: u16,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_extract_update(
            self,
            target_distance_mm,
            target_width_oversize,
            phist_bins,
            pxtalk_data,
        )
    }
    #[inline]
    unsafe fn VL53LX_hist_xtalk_extract_fini(
        &mut self,
        phist_bins: *mut VL53LX_histogram_bin_data_t,
        pxtalk_data: *mut VL53LX_hist_xtalk_extract_data_t,
        pxtalk_cal: *mut VL53LX_xtalk_calibration_results_t,
        pxtalk_shape: *mut VL53LX_xtalk_histogram_shape_t,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_hist_xtalk_extract_fini(
            self,
            phist_bins,
            pxtalk_data,
            pxtalk_cal,
            pxtalk_shape,
        )
    }
    #[inline]
    unsafe fn VL53LX_run_hist_xtalk_extraction(
        &mut self,
        cal_distance_mm: i16,
        pcal_status: *mut VL53LX_Error,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_run_hist_xtalk_extraction(self, cal_distance_mm, pcal_status)
    }
    #[inline]
    unsafe fn select_offset_per_vcsel(
        &mut self,
        pdev: *mut VL53LX_LLDriverData_t,
        poffset: *mut i16,
    ) -> VL53LX_Error {
        VL53LX_select_offset_per_vcsel(self, pdev, poffset)
    }
    #[inline]
    unsafe fn vl53lx_diff_histo_stddev(
        &mut self,
        pdev: *mut VL53LX_LLDriverData_t,
        pdata: *mut VL53LX_histogram_bin_data_t,
        timing: u8,
        HighIndex: u8,
        prev_pos: u8,
        pdiff_histo_stddev: *mut i32,
    ) {
        VL53LX_vl53lx_diff_histo_stddev(
            self,
            pdev,
            pdata,
            timing,
            HighIndex,
            prev_pos,
            pdiff_histo_stddev,
        )
    }
    #[inline]
    unsafe fn vl53lx_histo_merge(&mut self, pdata: *mut VL53LX_histogram_bin_data_t) {
        VL53LX_vl53lx_histo_merge(self, pdata)
    }
    #[inline]
    unsafe fn ComputeDevicePresetMode(
        &mut self,
        DistanceMode: VL53LX_DistanceModes,
        pDevicePresetMode: *mut VL53LX_DevicePresetModes,
    ) -> VL53LX_Error {
        VL53LX_ComputeDevicePresetMode(self, DistanceMode, pDevicePresetMode)
    }
    #[inline]
    unsafe fn SetPresetModeL3CX(
        &mut self,
        DistanceMode: VL53LX_DistanceModes,
        inter_measurement_period_ms: u32,
    ) -> VL53LX_Error {
        VL53LX_SetPresetModeL3CX(self, DistanceMode, inter_measurement_period_ms)
    }
    #[inline]
    unsafe fn SetInterMeasurementPeriodMilliSeconds(
        &mut self,
        InterMeasurementPeriodMilliSeconds: u32,
    ) -> VL53LX_Error {
        VL53LX_SetInterMeasurementPeriodMilliSeconds(self, InterMeasurementPeriodMilliSeconds)
    }
    #[inline]
    unsafe fn GetInterMeasurementPeriodMilliSeconds(
        &mut self,
        pInterMeasurementPeriodMilliSeconds: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_GetInterMeasurementPeriodMilliSeconds(self, pInterMeasurementPeriodMilliSeconds)
    }
    #[inline]
    unsafe fn ConvertStatusHisto(&mut self, FilteredRangeStatus: u8) -> u8 {
        VL53LX_ConvertStatusHisto(self, FilteredRangeStatus)
    }
    #[inline]
    unsafe fn SetTargetData(
        &mut self,
        active_results: u8,
        device_status: u8,
        presults_data: *mut VL53LX_range_data_t,
        pRangeData: *mut VL53LX_TargetRangeData_t,
    ) -> VL53LX_Error {
        VL53LX_SetTargetData(
            self,
            active_results,
            device_status,
            presults_data,
            pRangeData,
        )
    }
    #[inline]
    unsafe fn SetMeasurementData(
        &mut self,
        presults: *mut VL53LX_range_results_t,
        pMultiRangingData: *mut VL53LX_MultiRangingData_t,
    ) -> VL53LX_Error {
        VL53LX_SetMeasurementData(self, presults, pMultiRangingData)
    }
    #[inline]
    unsafe fn VL53LX_WrByte(&mut self, Dev: VL53LX_DEV, index: u16, data: u8) -> VL53LX_Error {
        VL53LX_VL53LX_WrByte(self, Dev, index, data)
    }
    #[inline]
    unsafe fn VL53LX_WrWord(&mut self, Dev: VL53LX_DEV, index: u16, data: u16) -> VL53LX_Error {
        VL53LX_VL53LX_WrWord(self, Dev, index, data)
    }
    #[inline]
    unsafe fn VL53LX_WrDWord(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        data: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_WrDWord(self, Dev, index, data)
    }
    #[inline]
    unsafe fn VL53LX_RdByte(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        data: *mut u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_RdByte(self, Dev, index, data)
    }
    #[inline]
    unsafe fn VL53LX_RdWord(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        data: *mut u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_RdWord(self, Dev, index, data)
    }
    #[inline]
    unsafe fn VL53LX_RdDWord(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        data: *mut u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_RdDWord(self, Dev, index, data)
    }
    #[inline]
    unsafe fn VL53LX_UpdateByte(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        AndData: u8,
        OrData: u8,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_UpdateByte(self, Dev, index, AndData, OrData)
    }
    #[inline]
    unsafe fn VL53LX_WriteMulti(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        pdata: *mut u8,
        count: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_WriteMulti(self, Dev, index, pdata, count)
    }
    #[inline]
    unsafe fn VL53LX_ReadMulti(
        &mut self,
        Dev: VL53LX_DEV,
        index: u16,
        pdata: *mut u8,
        count: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_ReadMulti(self, Dev, index, pdata, count)
    }
    #[inline]
    unsafe fn VL53LX_I2CWrite(
        &mut self,
        DeviceAddr: u8,
        RegisterAddr: u16,
        pBuffer: *mut u8,
        NumByteToWrite: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_I2CWrite(self, DeviceAddr, RegisterAddr, pBuffer, NumByteToWrite)
    }
    #[inline]
    unsafe fn VL53LX_I2CRead(
        &mut self,
        DeviceAddr: u8,
        RegisterAddr: u16,
        pBuffer: *mut u8,
        NumByteToRead: u16,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_I2CRead(self, DeviceAddr, RegisterAddr, pBuffer, NumByteToRead)
    }
    #[inline]
    unsafe fn VL53LX_GetTickCount(&mut self, ptick_count_ms: *mut u32) -> VL53LX_Error {
        VL53LX_VL53LX_GetTickCount(self, ptick_count_ms)
    }
    #[inline]
    unsafe fn VL53LX_WaitUs(&mut self, pdev: *mut VL53LX_Dev_t, wait_us: i32) -> VL53LX_Error {
        VL53LX_VL53LX_WaitUs(self, pdev, wait_us)
    }
    #[inline]
    unsafe fn VL53LX_WaitMs(&mut self, pdev: *mut VL53LX_Dev_t, wait_ms: i32) -> VL53LX_Error {
        VL53LX_VL53LX_WaitMs(self, pdev, wait_ms)
    }
    #[inline]
    unsafe fn VL53LX_WaitValueMaskEx(
        &mut self,
        pdev: *mut VL53LX_Dev_t,
        timeout_ms: u32,
        index: u16,
        value: u8,
        mask: u8,
        poll_delay_ms: u32,
    ) -> VL53LX_Error {
        VL53LX_VL53LX_WaitValueMaskEx(self, pdev, timeout_ms, index, value, mask, poll_delay_ms)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __locale_data {
    _address: u8,
}
type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
struct __va_list_tag {
    gp_offset: ::std::os::raw::c_uint,
    fp_offset: ::std::os::raw::c_uint,
    overflow_arg_area: *mut ::std::os::raw::c_void,
    reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    fn test_field_gp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(gp_offset)
            )
        );
    }
    test_field_gp_offset();
    fn test_field_fp_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(fp_offset)
            )
        );
    }
    test_field_fp_offset();
    fn test_field_overflow_arg_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(overflow_arg_area)
            )
        );
    }
    test_field_overflow_arg_area();
    fn test_field_reg_save_area() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__va_list_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__va_list_tag),
                "::",
                stringify!(reg_save_area)
            )
        );
    }
    test_field_reg_save_area();
}
